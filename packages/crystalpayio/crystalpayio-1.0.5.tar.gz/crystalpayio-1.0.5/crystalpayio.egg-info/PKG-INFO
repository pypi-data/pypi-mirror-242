Metadata-Version: 2.1
Name: crystalpayio
Version: 1.0.5
Summary: Asynchronous wrapper for CrystalPay API
Home-page: https://github.com/Fsoky/aiocrystalpay
Author: Fsoky
Author-email: cyberuest0x12@gmail.com
License: UNKNOWN
Keywords: api crystalpay asyncio crypto
Platform: UNKNOWN
Description-Content-Type: text/markdown
License-File: LICENSE

<p align="center">
      <a href="https://imgur.com/9t3fDgT"><img src="https://i.imgur.com/9t3fDgT.png" title=Logo" width="500"/></a>
</p>

<p align="center">
    <img src="https://img.shields.io/badge/Version-1.0.5-blueviolet" alt="Project Version">
    <img src="https://img.shields.io/badge/License-MIT-success" alt="License">
</p>

## –û –±–∏–±–ª–∏–æ—Ç–µ–∫–µ üíô
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ **CrystalPayIO** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —É–¥–æ–±–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é _[CrystalPay](https://crystalpay.io/) API_ –≤ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã.

> [!TIP]
> **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è CrystalPAY:** https://docs.crystalpay.io/

–í –¥–∞–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ –±–∞–≥–∏ –∏–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—à—É –æ—Ç–ø–∏—Å–∞—Ç—å –≤ [—Ç–µ–ª–µ–≥—Ä–∞–º](https://t.me/fsoky_community). –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è. –°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!
> [!NOTE]
> –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å _AUTH_LOGIN_ & _AUTH_SECRET_ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [—Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞](https://t.me/CrystalPAY_bot) –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Å—Å—É. \
> –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏.

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ üß°
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä pip
```
$ pip install crystalpayio
```
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å GitHub *(—Ç—Ä–µ–±—É–µ—Ç—Å—è [git](https://git-scm.com/downloads))*
```
$ git clone https://github.com/Fsoky/crystalpayio
$ cd crystalpayio
$ python setup.py install
```
- –ò–ª–∏
```
$ pip install git+https://github.com/Fsoky/crystalpayio
```

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üíú
- –®–∞–±–ª–æ–Ω
```py
import asyncio
from crystalpayio import CrystalPayIO


async def main() -> None:
    async with CrystalPayIO("AUTH_LOGIN", "AUTH_SECRET") as crystal:
        ...


if __name__ == "__main__":
  asyncio.run(main())
```
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã \
    `checkout` - –ö–∞—Å—Å–∞ \
    `payment` - –ü–ª–∞—Ç–µ–∂–∏ \
    `invoice` - –ò–Ω–≤–æ–π—Å—ã (—á–µ–∫–∏) \
    `payoff` - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ \
    `ticker` - –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏ –∫—É—Ä—Å \
    `history` - –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π/–≤—ã–≤–æ–¥–æ–≤/–æ–±—â–∞—è
```py
async with CrystalPayIO("AUTH_LOGIN", "AUTH_SECRET") as crystal:
    # –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞—Å—Å–∞:
    checkout = await crystal.checkout.me()
```

## –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (aiogram 3.x) ‚ù§
```py
import asyncio

from aiogram import Router, Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

from crystalpayio import CrystalPayIO

router = Router()
crystal = CrystalPayIO("AUTH_LOGIN", "AUTH_SECRET")


async def create_invoice() -> tuple:
    invoice = await crystal.invoice.create(
        100, # –¶–µ–Ω–∞
        5, # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —á–µ–∫–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        amount_currency="RUB" # –í–∞–ª—é—Ç–∞
    )
    return (invoice.url, invoice.id)


async def invoice_handler(id: str, message: Message) -> None:
    while True:
        invoice = await crystal.invoice.get(id)
        
        if invoice.state != "notpayed":
            await message.answer("–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")
        await asyncio.sleep(15) # –ó–∞–¥–µ—Ä–∂–∫–∞


@router.message(CommandStart())
async def show_goods(message: Message) -> None:
    await message.answer(
        "üéÉ –¢—ã–∫–≤–∞ - 100 –†–£–ë.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö–£–ü–ò–¢–¨", callback_data="buy")]
            ]
        )
    )


@router.callback_query(F.data == "buy")
async def buy_handler(query: CallbackQuery) -> None:
    invoice_task = asyncio.create_task(create_invoice())
    invoice_result = await invoice_task

    await query.message.answer(f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏: {invoice_result[0]}")
    await query.answer()

    asyncio.create_task(invoice_handler(invoice_result[1], query.message))


async def main() -> None:
    bot = Bot("TOKEN")
    dp = Dispatcher()

    dp.include_router(router)

    await bot.delete_webhook(True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
```

## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Webhook'–æ–≤ üï∏
```py
import asyncio

from crystalpayio import CrystalPayIO, WebhookManager, PaymentEvent

from fastapi import FastAPI # pip install fastapi[all]
import uvicorn # pip install uvicorn

WEBHOOK_URL = "https://xxx-xxx-xxx.ngrok-free.app" # ngrok url
WEBHOOK_ENDPOINT = "/my-endpoint"

app = FastAPI()
crystal = CrystalPayIO("AUTH_LOGIN", "AUTH_SECRET")
wm = WebhookManager(app)

wm.register_webhook_endpoint(WEBHOOK_ENDPOINT) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤–µ–±—Ö—É–∫—É


@wm.successfull_payment()
async def handle_successfull_event(event: PaymentEvent) -> None:
    print(event)


async def create_invoice() -> None:
    order = await crystal.invoice.create(
        10, # –°—É–º–º–∞ (–≤ —Ä—É–±–ª—è—Ö)
        5, # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —á–µ–∫–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        callback_url=f"{WEBHOOK_URL}{WEBHOOK_ENDPOINT}"
    )
    print(order.url)


if __name__ == "__main__":
    asyncio.run(create_invoice()) # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
    uvicorn.run("test:app")
```


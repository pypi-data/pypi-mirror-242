# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class CampaignServiceMaximizeClicksBiddingScheme(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bid_ceiling': 'int'
    }

    attribute_map = {
        'bid_ceiling': 'bidCeiling'
    }

    def __init__(self, bid_ceiling=None, local_vars_configuration=None):  # noqa: E501
        """CampaignServiceMaximizeClicksBiddingScheme - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bid_ceiling = None
        self.discriminator = None

        self.bid_ceiling = bid_ceiling

    @property
    def bid_ceiling(self):
        """Gets the bid_ceiling of this CampaignServiceMaximizeClicksBiddingScheme.  # noqa: E501

        <div lang=\"ja\">入札価格の上限です。<br>※「0」が設定された 場合、上限設定は ありません。<br> このフィールドは省略可能となります。その際、デフォルト設定値は0となります。</div> <div lang=\"en\">Bid amount limit.<br>* If &#34;0&#34; is set, no bid limit.<br> This field is optional. The default value will be 0.</div>   # noqa: E501

        :return: The bid_ceiling of this CampaignServiceMaximizeClicksBiddingScheme.  # noqa: E501
        :rtype: int
        """
        return self._bid_ceiling

    @bid_ceiling.setter
    def bid_ceiling(self, bid_ceiling):
        """Sets the bid_ceiling of this CampaignServiceMaximizeClicksBiddingScheme.

        <div lang=\"ja\">入札価格の上限です。<br>※「0」が設定された 場合、上限設定は ありません。<br> このフィールドは省略可能となります。その際、デフォルト設定値は0となります。</div> <div lang=\"en\">Bid amount limit.<br>* If &#34;0&#34; is set, no bid limit.<br> This field is optional. The default value will be 0.</div>   # noqa: E501

        :param bid_ceiling: The bid_ceiling of this CampaignServiceMaximizeClicksBiddingScheme.  # noqa: E501
        :type: int
        """

        self._bid_ceiling = bid_ceiling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignServiceMaximizeClicksBiddingScheme):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignServiceMaximizeClicksBiddingScheme):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class RetargetingListServiceRuleBaseTargetList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_date': 'str',
        'is_all_visitor_rule': 'RetargetingListServiceIsAllVisitorRule',
        'is_date_specific_rule': 'RetargetingListServiceIsDateSpecificRule',
        'rules': 'list[RetargetingListServiceRuleGroup]',
        'start_date': 'str'
    }

    attribute_map = {
        'end_date': 'endDate',
        'is_all_visitor_rule': 'isAllVisitorRule',
        'is_date_specific_rule': 'isDateSpecificRule',
        'rules': 'rules',
        'start_date': 'startDate'
    }

    def __init__(self, end_date=None, is_all_visitor_rule=None, is_date_specific_rule=None, rules=None, start_date=None, local_vars_configuration=None):  # noqa: E501
        """RetargetingListServiceRuleBaseTargetList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._end_date = None
        self._is_all_visitor_rule = None
        self._is_date_specific_rule = None
        self._rules = None
        self._start_date = None
        self.discriminator = None

        self.end_date = end_date
        self.is_all_visitor_rule = is_all_visitor_rule
        self.is_date_specific_rule = is_date_specific_rule
        self.rules = rules
        self.start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501

        <div lang=\"ja\">ルール適用終了日です。<br> ※このフィールドの追加と編集は廃止され、現在設定できません。<br> ※YYYYMMDD形式です。<br> ※リクエスト日は2037/12/30まで 指定可能です。</div> <div lang=\"en\">End date of rule setting.<br> *In YYYYMMDD format<br> *Request date can be set up to 2037/12/30<br> *Adding and editing this field is obsolete. Currently not available.</div>   # noqa: E501

        :return: The end_date of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RetargetingListServiceRuleBaseTargetList.

        <div lang=\"ja\">ルール適用終了日です。<br> ※このフィールドの追加と編集は廃止され、現在設定できません。<br> ※YYYYMMDD形式です。<br> ※リクエスト日は2037/12/30まで 指定可能です。</div> <div lang=\"en\">End date of rule setting.<br> *In YYYYMMDD format<br> *Request date can be set up to 2037/12/30<br> *Adding and editing this field is obsolete. Currently not available.</div>   # noqa: E501

        :param end_date: The end_date of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def is_all_visitor_rule(self):
        """Gets the is_all_visitor_rule of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501


        :return: The is_all_visitor_rule of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :rtype: RetargetingListServiceIsAllVisitorRule
        """
        return self._is_all_visitor_rule

    @is_all_visitor_rule.setter
    def is_all_visitor_rule(self, is_all_visitor_rule):
        """Sets the is_all_visitor_rule of this RetargetingListServiceRuleBaseTargetList.


        :param is_all_visitor_rule: The is_all_visitor_rule of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :type: RetargetingListServiceIsAllVisitorRule
        """

        self._is_all_visitor_rule = is_all_visitor_rule

    @property
    def is_date_specific_rule(self):
        """Gets the is_date_specific_rule of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501


        :return: The is_date_specific_rule of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :rtype: RetargetingListServiceIsDateSpecificRule
        """
        return self._is_date_specific_rule

    @is_date_specific_rule.setter
    def is_date_specific_rule(self, is_date_specific_rule):
        """Sets the is_date_specific_rule of this RetargetingListServiceRuleBaseTargetList.


        :param is_date_specific_rule: The is_date_specific_rule of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :type: RetargetingListServiceIsDateSpecificRule
        """

        self._is_date_specific_rule = is_date_specific_rule

    @property
    def rules(self):
        """Gets the rules of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501


        :return: The rules of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :rtype: list[RetargetingListServiceRuleGroup]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this RetargetingListServiceRuleBaseTargetList.


        :param rules: The rules of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :type: list[RetargetingListServiceRuleGroup]
        """

        self._rules = rules

    @property
    def start_date(self):
        """Gets the start_date of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501

        <div lang=\"ja\">ルール適用開始日です。<br> ※YYYYMMDD形式です。<br>※リクエスト日は2037/12/30まで 指定可能です。<br> ※このフィールドの追加と編集は廃止され、現在設定できません。</div> <div lang=\"en\">Start date of rule setting.<br> *In YYYYMMDD format<br> *Request date can be set up to 2037/12/30<br> *Adding and editing this field is obsolete. Currently not available.</div>   # noqa: E501

        :return: The start_date of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RetargetingListServiceRuleBaseTargetList.

        <div lang=\"ja\">ルール適用開始日です。<br> ※YYYYMMDD形式です。<br>※リクエスト日は2037/12/30まで 指定可能です。<br> ※このフィールドの追加と編集は廃止され、現在設定できません。</div> <div lang=\"en\">Start date of rule setting.<br> *In YYYYMMDD format<br> *Request date can be set up to 2037/12/30<br> *Adding and editing this field is obsolete. Currently not available.</div>   # noqa: E501

        :param start_date: The start_date of this RetargetingListServiceRuleBaseTargetList.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetargetingListServiceRuleBaseTargetList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetargetingListServiceRuleBaseTargetList):
            return True

        return self.to_dict() != other.to_dict()

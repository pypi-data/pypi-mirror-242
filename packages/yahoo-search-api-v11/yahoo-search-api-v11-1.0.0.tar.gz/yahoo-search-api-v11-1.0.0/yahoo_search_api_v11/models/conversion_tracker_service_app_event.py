# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class ConversionTrackerServiceAppEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conversion_tracker_track_id': 'int',
        'app_vendor_id': 'str',
        'app_id': 'str',
        'app_link_platform': 'ConversionTrackerServiceAppLinkPlatform',
        'app_event_type': 'str'
    }

    attribute_map = {
        'conversion_tracker_track_id': 'conversionTrackerTrackId',
        'app_vendor_id': 'appVendorId',
        'app_id': 'appId',
        'app_link_platform': 'appLinkPlatform',
        'app_event_type': 'appEventType'
    }

    def __init__(self, conversion_tracker_track_id=None, app_vendor_id=None, app_id=None, app_link_platform=None, app_event_type=None, local_vars_configuration=None):  # noqa: E501
        """ConversionTrackerServiceAppEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conversion_tracker_track_id = None
        self._app_vendor_id = None
        self._app_id = None
        self._app_link_platform = None
        self._app_event_type = None
        self.discriminator = None

        self.conversion_tracker_track_id = conversion_tracker_track_id
        self.app_vendor_id = app_vendor_id
        self.app_id = app_id
        self.app_link_platform = app_link_platform
        self.app_event_type = app_event_type

    @property
    def conversion_tracker_track_id(self):
        """Gets the conversion_tracker_track_id of this ConversionTrackerServiceAppEvent.  # noqa: E501

        <div lang=\"ja\">トラッキング用コンバージョントラッカーIDです。</div> <div lang=\"en\">ConversionTracker ID for tracking.</div>   # noqa: E501

        :return: The conversion_tracker_track_id of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :rtype: int
        """
        return self._conversion_tracker_track_id

    @conversion_tracker_track_id.setter
    def conversion_tracker_track_id(self, conversion_tracker_track_id):
        """Sets the conversion_tracker_track_id of this ConversionTrackerServiceAppEvent.

        <div lang=\"ja\">トラッキング用コンバージョントラッカーIDです。</div> <div lang=\"en\">ConversionTracker ID for tracking.</div>   # noqa: E501

        :param conversion_tracker_track_id: The conversion_tracker_track_id of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :type: int
        """

        self._conversion_tracker_track_id = conversion_tracker_track_id

    @property
    def app_vendor_id(self):
        """Gets the app_vendor_id of this ConversionTrackerServiceAppEvent.  # noqa: E501

        <div lang=\"ja\">アプリ計測ベンダー識別子です。</div> <div lang=\"en\">Application vendor ID.</div>   # noqa: E501

        :return: The app_vendor_id of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :rtype: str
        """
        return self._app_vendor_id

    @app_vendor_id.setter
    def app_vendor_id(self, app_vendor_id):
        """Sets the app_vendor_id of this ConversionTrackerServiceAppEvent.

        <div lang=\"ja\">アプリ計測ベンダー識別子です。</div> <div lang=\"en\">Application vendor ID.</div>   # noqa: E501

        :param app_vendor_id: The app_vendor_id of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :type: str
        """

        self._app_vendor_id = app_vendor_id

    @property
    def app_id(self):
        """Gets the app_id of this ConversionTrackerServiceAppEvent.  # noqa: E501

        <div lang=\"ja\">アプリケーションIDです。</div> <div lang=\"en\">Application ID.</div>   # noqa: E501

        :return: The app_id of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ConversionTrackerServiceAppEvent.

        <div lang=\"ja\">アプリケーションIDです。</div> <div lang=\"en\">Application ID.</div>   # noqa: E501

        :param app_id: The app_id of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_link_platform(self):
        """Gets the app_link_platform of this ConversionTrackerServiceAppEvent.  # noqa: E501


        :return: The app_link_platform of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :rtype: ConversionTrackerServiceAppLinkPlatform
        """
        return self._app_link_platform

    @app_link_platform.setter
    def app_link_platform(self, app_link_platform):
        """Sets the app_link_platform of this ConversionTrackerServiceAppEvent.


        :param app_link_platform: The app_link_platform of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :type: ConversionTrackerServiceAppLinkPlatform
        """

        self._app_link_platform = app_link_platform

    @property
    def app_event_type(self):
        """Gets the app_event_type of this ConversionTrackerServiceAppEvent.  # noqa: E501

        <div lang=\"ja\">アプリイベントタイプです。</div> <div lang=\"en\">Application event type.</div>   # noqa: E501

        :return: The app_event_type of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :rtype: str
        """
        return self._app_event_type

    @app_event_type.setter
    def app_event_type(self, app_event_type):
        """Sets the app_event_type of this ConversionTrackerServiceAppEvent.

        <div lang=\"ja\">アプリイベントタイプです。</div> <div lang=\"en\">Application event type.</div>   # noqa: E501

        :param app_event_type: The app_event_type of this ConversionTrackerServiceAppEvent.  # noqa: E501
        :type: str
        """

        self._app_event_type = app_event_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversionTrackerServiceAppEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConversionTrackerServiceAppEvent):
            return True

        return self.to_dict() != other.to_dict()

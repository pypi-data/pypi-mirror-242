# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from yahoo_search_api_v12.api_client import ApiClient
from yahoo_search_api_v12.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CampaignAssetServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def campaign_asset_service_get_post(self, x_z_base_account_id, **kwargs):  # noqa: E501
        """campaign_asset_service_get_post  # noqa: E501

        <div lang=\"ja\">キャンペーンとアセット間の設定情報を取得します。</div> <div lang=\"en\">Get configuration information between campaign and assets.</div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.campaign_asset_service_get_post(x_z_base_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int x_z_base_account_id: <div lang=\"ja\">アカウントIDを指定してください。</div> <div lang=\"en\">Specify Account ID.</div>  (required)
        :param CampaignAssetServiceSelector campaign_asset_service_selector:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CampaignAssetServiceGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.campaign_asset_service_get_post_with_http_info(x_z_base_account_id, **kwargs)  # noqa: E501

    def campaign_asset_service_get_post_with_http_info(self, x_z_base_account_id, **kwargs):  # noqa: E501
        """campaign_asset_service_get_post  # noqa: E501

        <div lang=\"ja\">キャンペーンとアセット間の設定情報を取得します。</div> <div lang=\"en\">Get configuration information between campaign and assets.</div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.campaign_asset_service_get_post_with_http_info(x_z_base_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int x_z_base_account_id: <div lang=\"ja\">アカウントIDを指定してください。</div> <div lang=\"en\">Specify Account ID.</div>  (required)
        :param CampaignAssetServiceSelector campaign_asset_service_selector:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CampaignAssetServiceGetResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_z_base_account_id',
            'campaign_asset_service_selector'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_asset_service_get_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_z_base_account_id' is set
        if self.api_client.client_side_validation and ('x_z_base_account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_z_base_account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_z_base_account_id` when calling `campaign_asset_service_get_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_z_base_account_id' in local_var_params:
            header_params['x-z-base-account-id'] = local_var_params['x_z_base_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_asset_service_selector' in local_var_params:
            body_params = local_var_params['campaign_asset_service_selector']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth']  # noqa: E501

        return self.api_client.call_api(
            '/CampaignAssetService/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignAssetServiceGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def campaign_asset_service_replace_post(self, x_z_base_account_id, **kwargs):  # noqa: E501
        """campaign_asset_service_replace_post  # noqa: E501

        <div lang=\"ja\">キャンペーンにアセット情報を追加・更新・解除（削除）します。<br> ・更新は常に上書きされるため追加分を含めて更新する必要があります。<br> ・アセット情報を解除するときは空の情報で更新します。<br> ・1つのキャンペーンに設定できるステータスが有効なアセット情報は、各種それぞれ20件までです。<br> ・1つのキャンペーンに設定できるステータスが無効なアセット情報は、各種それぞれ2000件までです。</div> <div lang=\"en\">Add, update or release(remove) Asset information of campaign.<br> ・Update will overwrite the old information, so have to include the additional information on every updates.<br> ・To release FeedItem information, update with blank data.<br> ・Up to 20 asset information with valid status can be set for one campaign for each CampaignAssetServiceType.<br> ・Up to 2000 asset information with invalid status can be set for one campaign for each CampaignAssetServiceType.</div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.campaign_asset_service_replace_post(x_z_base_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int x_z_base_account_id: <div lang=\"ja\">アカウントIDを指定してください。</div> <div lang=\"en\">Specify Account ID.</div>  (required)
        :param CampaignAssetServiceReplaceOperation campaign_asset_service_replace_operation:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CampaignAssetServiceReplaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.campaign_asset_service_replace_post_with_http_info(x_z_base_account_id, **kwargs)  # noqa: E501

    def campaign_asset_service_replace_post_with_http_info(self, x_z_base_account_id, **kwargs):  # noqa: E501
        """campaign_asset_service_replace_post  # noqa: E501

        <div lang=\"ja\">キャンペーンにアセット情報を追加・更新・解除（削除）します。<br> ・更新は常に上書きされるため追加分を含めて更新する必要があります。<br> ・アセット情報を解除するときは空の情報で更新します。<br> ・1つのキャンペーンに設定できるステータスが有効なアセット情報は、各種それぞれ20件までです。<br> ・1つのキャンペーンに設定できるステータスが無効なアセット情報は、各種それぞれ2000件までです。</div> <div lang=\"en\">Add, update or release(remove) Asset information of campaign.<br> ・Update will overwrite the old information, so have to include the additional information on every updates.<br> ・To release FeedItem information, update with blank data.<br> ・Up to 20 asset information with valid status can be set for one campaign for each CampaignAssetServiceType.<br> ・Up to 2000 asset information with invalid status can be set for one campaign for each CampaignAssetServiceType.</div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.campaign_asset_service_replace_post_with_http_info(x_z_base_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int x_z_base_account_id: <div lang=\"ja\">アカウントIDを指定してください。</div> <div lang=\"en\">Specify Account ID.</div>  (required)
        :param CampaignAssetServiceReplaceOperation campaign_asset_service_replace_operation:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CampaignAssetServiceReplaceResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_z_base_account_id',
            'campaign_asset_service_replace_operation'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_asset_service_replace_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_z_base_account_id' is set
        if self.api_client.client_side_validation and ('x_z_base_account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_z_base_account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_z_base_account_id` when calling `campaign_asset_service_replace_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_z_base_account_id' in local_var_params:
            header_params['x-z-base-account-id'] = local_var_params['x_z_base_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_asset_service_replace_operation' in local_var_params:
            body_params = local_var_params['campaign_asset_service_replace_operation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth']  # noqa: E501

        return self.api_client.call_api(
            '/CampaignAssetService/replace', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignAssetServiceReplaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def campaign_asset_service_set_post(self, x_z_base_account_id, **kwargs):  # noqa: E501
        """campaign_asset_service_set_post  # noqa: E501

        <div lang=\"ja\">キャンペーンとアセット間の設定情報を更新します。<br> ・1つのキャンペーンに設定できるステータスが有効なアセット情報は、各種それぞれ20件までです。<br> ・1つのキャンペーンに設定できるステータスが無効なアセット情報は、各種それぞれ2000件までです。</div> <div lang=\"en\">Updates configuration information between campaign and assets.<br> ・Up to 20 asset information with valid status can be set for one campaign for each CampaignAssetServiceType.<br> ・Up to 2000 asset information with invalid status can be set for one campaign for each CampaignAssetServiceType.</div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.campaign_asset_service_set_post(x_z_base_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int x_z_base_account_id: <div lang=\"ja\">アカウントIDを指定してください。</div> <div lang=\"en\">Specify Account ID.</div>  (required)
        :param CampaignAssetServiceOperation campaign_asset_service_operation:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CampaignAssetServiceMutateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.campaign_asset_service_set_post_with_http_info(x_z_base_account_id, **kwargs)  # noqa: E501

    def campaign_asset_service_set_post_with_http_info(self, x_z_base_account_id, **kwargs):  # noqa: E501
        """campaign_asset_service_set_post  # noqa: E501

        <div lang=\"ja\">キャンペーンとアセット間の設定情報を更新します。<br> ・1つのキャンペーンに設定できるステータスが有効なアセット情報は、各種それぞれ20件までです。<br> ・1つのキャンペーンに設定できるステータスが無効なアセット情報は、各種それぞれ2000件までです。</div> <div lang=\"en\">Updates configuration information between campaign and assets.<br> ・Up to 20 asset information with valid status can be set for one campaign for each CampaignAssetServiceType.<br> ・Up to 2000 asset information with invalid status can be set for one campaign for each CampaignAssetServiceType.</div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.campaign_asset_service_set_post_with_http_info(x_z_base_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int x_z_base_account_id: <div lang=\"ja\">アカウントIDを指定してください。</div> <div lang=\"en\">Specify Account ID.</div>  (required)
        :param CampaignAssetServiceOperation campaign_asset_service_operation:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CampaignAssetServiceMutateResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_z_base_account_id',
            'campaign_asset_service_operation'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method campaign_asset_service_set_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_z_base_account_id' is set
        if self.api_client.client_side_validation and ('x_z_base_account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_z_base_account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_z_base_account_id` when calling `campaign_asset_service_set_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_z_base_account_id' in local_var_params:
            header_params['x-z-base-account-id'] = local_var_params['x_z_base_account_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_asset_service_operation' in local_var_params:
            body_params = local_var_params['campaign_asset_service_operation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth']  # noqa: E501

        return self.api_client.call_api(
            '/CampaignAssetService/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignAssetServiceMutateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

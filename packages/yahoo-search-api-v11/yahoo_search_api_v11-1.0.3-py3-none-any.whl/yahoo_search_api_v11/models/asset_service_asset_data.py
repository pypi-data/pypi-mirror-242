# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class AssetServiceAssetData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'AssetServiceType',
        'quick_link_asset': 'AssetServiceQuickLinkAsset',
        'call_asset': 'AssetServiceCallAsset',
        'callout_asset': 'AssetServiceCalloutAsset',
        'structured_snippet_asset': 'AssetServiceStructuredSnippetAsset'
    }

    attribute_map = {
        'type': 'type',
        'quick_link_asset': 'quickLinkAsset',
        'call_asset': 'callAsset',
        'callout_asset': 'calloutAsset',
        'structured_snippet_asset': 'structuredSnippetAsset'
    }

    def __init__(self, type=None, quick_link_asset=None, call_asset=None, callout_asset=None, structured_snippet_asset=None, local_vars_configuration=None):  # noqa: E501
        """AssetServiceAssetData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._quick_link_asset = None
        self._call_asset = None
        self._callout_asset = None
        self._structured_snippet_asset = None
        self.discriminator = None

        self.type = type
        self.quick_link_asset = quick_link_asset
        self.call_asset = call_asset
        self.callout_asset = callout_asset
        self.structured_snippet_asset = structured_snippet_asset

    @property
    def type(self):
        """Gets the type of this AssetServiceAssetData.  # noqa: E501


        :return: The type of this AssetServiceAssetData.  # noqa: E501
        :rtype: AssetServiceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetServiceAssetData.


        :param type: The type of this AssetServiceAssetData.  # noqa: E501
        :type: AssetServiceType
        """

        self._type = type

    @property
    def quick_link_asset(self):
        """Gets the quick_link_asset of this AssetServiceAssetData.  # noqa: E501


        :return: The quick_link_asset of this AssetServiceAssetData.  # noqa: E501
        :rtype: AssetServiceQuickLinkAsset
        """
        return self._quick_link_asset

    @quick_link_asset.setter
    def quick_link_asset(self, quick_link_asset):
        """Sets the quick_link_asset of this AssetServiceAssetData.


        :param quick_link_asset: The quick_link_asset of this AssetServiceAssetData.  # noqa: E501
        :type: AssetServiceQuickLinkAsset
        """

        self._quick_link_asset = quick_link_asset

    @property
    def call_asset(self):
        """Gets the call_asset of this AssetServiceAssetData.  # noqa: E501


        :return: The call_asset of this AssetServiceAssetData.  # noqa: E501
        :rtype: AssetServiceCallAsset
        """
        return self._call_asset

    @call_asset.setter
    def call_asset(self, call_asset):
        """Sets the call_asset of this AssetServiceAssetData.


        :param call_asset: The call_asset of this AssetServiceAssetData.  # noqa: E501
        :type: AssetServiceCallAsset
        """

        self._call_asset = call_asset

    @property
    def callout_asset(self):
        """Gets the callout_asset of this AssetServiceAssetData.  # noqa: E501


        :return: The callout_asset of this AssetServiceAssetData.  # noqa: E501
        :rtype: AssetServiceCalloutAsset
        """
        return self._callout_asset

    @callout_asset.setter
    def callout_asset(self, callout_asset):
        """Sets the callout_asset of this AssetServiceAssetData.


        :param callout_asset: The callout_asset of this AssetServiceAssetData.  # noqa: E501
        :type: AssetServiceCalloutAsset
        """

        self._callout_asset = callout_asset

    @property
    def structured_snippet_asset(self):
        """Gets the structured_snippet_asset of this AssetServiceAssetData.  # noqa: E501


        :return: The structured_snippet_asset of this AssetServiceAssetData.  # noqa: E501
        :rtype: AssetServiceStructuredSnippetAsset
        """
        return self._structured_snippet_asset

    @structured_snippet_asset.setter
    def structured_snippet_asset(self, structured_snippet_asset):
        """Sets the structured_snippet_asset of this AssetServiceAssetData.


        :param structured_snippet_asset: The structured_snippet_asset of this AssetServiceAssetData.  # noqa: E501
        :type: AssetServiceStructuredSnippetAsset
        """

        self._structured_snippet_asset = structured_snippet_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetServiceAssetData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetServiceAssetData):
            return True

        return self.to_dict() != other.to_dict()

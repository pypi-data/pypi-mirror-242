# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class KeywordPlanIdeaServiceSeed(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keyword_and_url_seed': 'KeywordPlanIdeaServiceKeywordAndUrlSeed',
        'keyword_seed': 'KeywordPlanIdeaServiceKeywordSeed',
        'url_seed': 'KeywordPlanIdeaServiceUrlSeed',
        'site_seed': 'KeywordPlanIdeaServiceSiteSeed',
        'seed_type': 'KeywordPlanIdeaServiceSeedType'
    }

    attribute_map = {
        'keyword_and_url_seed': 'keywordAndUrlSeed',
        'keyword_seed': 'keywordSeed',
        'url_seed': 'urlSeed',
        'site_seed': 'siteSeed',
        'seed_type': 'seedType'
    }

    def __init__(self, keyword_and_url_seed=None, keyword_seed=None, url_seed=None, site_seed=None, seed_type=None, local_vars_configuration=None):  # noqa: E501
        """KeywordPlanIdeaServiceSeed - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._keyword_and_url_seed = None
        self._keyword_seed = None
        self._url_seed = None
        self._site_seed = None
        self._seed_type = None
        self.discriminator = None

        self.keyword_and_url_seed = keyword_and_url_seed
        self.keyword_seed = keyword_seed
        self.url_seed = url_seed
        self.site_seed = site_seed
        self.seed_type = seed_type

    @property
    def keyword_and_url_seed(self):
        """Gets the keyword_and_url_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501


        :return: The keyword_and_url_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :rtype: KeywordPlanIdeaServiceKeywordAndUrlSeed
        """
        return self._keyword_and_url_seed

    @keyword_and_url_seed.setter
    def keyword_and_url_seed(self, keyword_and_url_seed):
        """Sets the keyword_and_url_seed of this KeywordPlanIdeaServiceSeed.


        :param keyword_and_url_seed: The keyword_and_url_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :type: KeywordPlanIdeaServiceKeywordAndUrlSeed
        """

        self._keyword_and_url_seed = keyword_and_url_seed

    @property
    def keyword_seed(self):
        """Gets the keyword_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501


        :return: The keyword_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :rtype: KeywordPlanIdeaServiceKeywordSeed
        """
        return self._keyword_seed

    @keyword_seed.setter
    def keyword_seed(self, keyword_seed):
        """Sets the keyword_seed of this KeywordPlanIdeaServiceSeed.


        :param keyword_seed: The keyword_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :type: KeywordPlanIdeaServiceKeywordSeed
        """

        self._keyword_seed = keyword_seed

    @property
    def url_seed(self):
        """Gets the url_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501


        :return: The url_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :rtype: KeywordPlanIdeaServiceUrlSeed
        """
        return self._url_seed

    @url_seed.setter
    def url_seed(self, url_seed):
        """Sets the url_seed of this KeywordPlanIdeaServiceSeed.


        :param url_seed: The url_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :type: KeywordPlanIdeaServiceUrlSeed
        """

        self._url_seed = url_seed

    @property
    def site_seed(self):
        """Gets the site_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501


        :return: The site_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :rtype: KeywordPlanIdeaServiceSiteSeed
        """
        return self._site_seed

    @site_seed.setter
    def site_seed(self, site_seed):
        """Sets the site_seed of this KeywordPlanIdeaServiceSeed.


        :param site_seed: The site_seed of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :type: KeywordPlanIdeaServiceSiteSeed
        """

        self._site_seed = site_seed

    @property
    def seed_type(self):
        """Gets the seed_type of this KeywordPlanIdeaServiceSeed.  # noqa: E501


        :return: The seed_type of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :rtype: KeywordPlanIdeaServiceSeedType
        """
        return self._seed_type

    @seed_type.setter
    def seed_type(self, seed_type):
        """Sets the seed_type of this KeywordPlanIdeaServiceSeed.


        :param seed_type: The seed_type of this KeywordPlanIdeaServiceSeed.  # noqa: E501
        :type: KeywordPlanIdeaServiceSeedType
        """

        self._seed_type = seed_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordPlanIdeaServiceSeed):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeywordPlanIdeaServiceSeed):
            return True

        return self.to_dict() != other.to_dict()

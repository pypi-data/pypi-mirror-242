# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class ReportDefinitionServiceReportFieldAttribute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filterable': 'bool',
        'selectable': 'bool',
        'display_field_name_en': 'str',
        'display_field_name_ja': 'str',
        'field_name': 'str',
        'field_type': 'str',
        'impossible_combination_fields': 'list[str]',
        'xml_attribute_name': 'str'
    }

    attribute_map = {
        'filterable': 'filterable',
        'selectable': 'selectable',
        'display_field_name_en': 'displayFieldNameEn',
        'display_field_name_ja': 'displayFieldNameJa',
        'field_name': 'fieldName',
        'field_type': 'fieldType',
        'impossible_combination_fields': 'impossibleCombinationFields',
        'xml_attribute_name': 'xmlAttributeName'
    }

    def __init__(self, filterable=None, selectable=None, display_field_name_en=None, display_field_name_ja=None, field_name=None, field_type=None, impossible_combination_fields=None, xml_attribute_name=None, local_vars_configuration=None):  # noqa: E501
        """ReportDefinitionServiceReportFieldAttribute - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filterable = None
        self._selectable = None
        self._display_field_name_en = None
        self._display_field_name_ja = None
        self._field_name = None
        self._field_type = None
        self._impossible_combination_fields = None
        self._xml_attribute_name = None
        self.discriminator = None

        self.filterable = filterable
        self.selectable = selectable
        self.display_field_name_en = display_field_name_en
        self.display_field_name_ja = display_field_name_ja
        self.field_name = field_name
        self.field_type = field_type
        self.impossible_combination_fields = impossible_combination_fields
        self.xml_attribute_name = xml_attribute_name

    @property
    def filterable(self):
        """Gets the filterable of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">ユーザーがこのフィールドにフィルタを 適用できるかどうかを示します。</div> <div lang=\"en\">Indicate if use can filter the fields.</div>   # noqa: E501

        :return: The filterable of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">ユーザーがこのフィールドにフィルタを 適用できるかどうかを示します。</div> <div lang=\"en\">Indicate if use can filter the fields.</div>   # noqa: E501

        :param filterable: The filterable of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: bool
        """

        self._filterable = filterable

    @property
    def selectable(self):
        """Gets the selectable of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">ユーザーがこのフィールドを 選択できるかどうかを示します。</div> <div lang=\"en\">Indicate if user can select the fields.</div>   # noqa: E501

        :return: The selectable of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._selectable

    @selectable.setter
    def selectable(self, selectable):
        """Sets the selectable of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">ユーザーがこのフィールドを 選択できるかどうかを示します。</div> <div lang=\"en\">Indicate if user can select the fields.</div>   # noqa: E501

        :param selectable: The selectable of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: bool
        """

        self._selectable = selectable

    @property
    def display_field_name_en(self):
        """Gets the display_field_name_en of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">ダウンロードされたレポートに 表示される英語名です。</div> <div lang=\"en\">Field name displayed in downloaded report (in English).</div>   # noqa: E501

        :return: The display_field_name_en of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: str
        """
        return self._display_field_name_en

    @display_field_name_en.setter
    def display_field_name_en(self, display_field_name_en):
        """Sets the display_field_name_en of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">ダウンロードされたレポートに 表示される英語名です。</div> <div lang=\"en\">Field name displayed in downloaded report (in English).</div>   # noqa: E501

        :param display_field_name_en: The display_field_name_en of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: str
        """

        self._display_field_name_en = display_field_name_en

    @property
    def display_field_name_ja(self):
        """Gets the display_field_name_ja of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">ダウンロードされたレポートに 表示される日本語名です。</div> <div lang=\"en\">Field name displayed in downloaded report (in Japanese).</div>   # noqa: E501

        :return: The display_field_name_ja of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: str
        """
        return self._display_field_name_ja

    @display_field_name_ja.setter
    def display_field_name_ja(self, display_field_name_ja):
        """Sets the display_field_name_ja of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">ダウンロードされたレポートに 表示される日本語名です。</div> <div lang=\"en\">Field name displayed in downloaded report (in Japanese).</div>   # noqa: E501

        :param display_field_name_ja: The display_field_name_ja of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: str
        """

        self._display_field_name_ja = display_field_name_ja

    @property
    def field_name(self):
        """Gets the field_name of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">フィールド名です。</div> <div lang=\"en\">Field name.</div>   # noqa: E501

        :return: The field_name of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">フィールド名です。</div> <div lang=\"en\">Field name.</div>   # noqa: E501

        :param field_name: The field_name of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">フィールドの種類です。<br> 数字、文字列、Enum値等を表します。</div> <div lang=\"en\">Type of field.<br> Displays int, string, Enum, etc.</div>   # noqa: E501

        :return: The field_type of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">フィールドの種類です。<br> 数字、文字列、Enum値等を表します。</div> <div lang=\"en\">Type of field.<br> Displays int, string, Enum, etc.</div>   # noqa: E501

        :param field_type: The field_type of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def impossible_combination_fields(self):
        """Gets the impossible_combination_fields of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">組み合わせができないレポートフィールドです。</div> <div lang=\"en\">Report fields which cannot be combined.</div>   # noqa: E501

        :return: The impossible_combination_fields of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: list[str]
        """
        return self._impossible_combination_fields

    @impossible_combination_fields.setter
    def impossible_combination_fields(self, impossible_combination_fields):
        """Sets the impossible_combination_fields of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">組み合わせができないレポートフィールドです。</div> <div lang=\"en\">Report fields which cannot be combined.</div>   # noqa: E501

        :param impossible_combination_fields: The impossible_combination_fields of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: list[str]
        """

        self._impossible_combination_fields = impossible_combination_fields

    @property
    def xml_attribute_name(self):
        """Gets the xml_attribute_name of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501

        <div lang=\"ja\">ダウンロードしたレポートの XMLアトリビュートです。</div> <div lang=\"en\">XML attribute name displayed in downloaded report.</div>   # noqa: E501

        :return: The xml_attribute_name of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :rtype: str
        """
        return self._xml_attribute_name

    @xml_attribute_name.setter
    def xml_attribute_name(self, xml_attribute_name):
        """Sets the xml_attribute_name of this ReportDefinitionServiceReportFieldAttribute.

        <div lang=\"ja\">ダウンロードしたレポートの XMLアトリビュートです。</div> <div lang=\"en\">XML attribute name displayed in downloaded report.</div>   # noqa: E501

        :param xml_attribute_name: The xml_attribute_name of this ReportDefinitionServiceReportFieldAttribute.  # noqa: E501
        :type: str
        """

        self._xml_attribute_name = xml_attribute_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDefinitionServiceReportFieldAttribute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportDefinitionServiceReportFieldAttribute):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class BiddingSeasonalityAdjustment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'bidding_seasonality_adjustment_name': 'str',
        'description': 'str',
        'bidding_seasonality_adjustment_id': 'int',
        'devices': 'list[BiddingSeasonalityAdjustmentServiceDevices]',
        'start_date_time': 'str',
        'end_date_time': 'str',
        'conversion_rate': 'float',
        'campaign_ids': 'list[int]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'bidding_seasonality_adjustment_name': 'biddingSeasonalityAdjustmentName',
        'description': 'description',
        'bidding_seasonality_adjustment_id': 'biddingSeasonalityAdjustmentId',
        'devices': 'devices',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime',
        'conversion_rate': 'conversionRate',
        'campaign_ids': 'campaignIds'
    }

    def __init__(self, account_id=None, bidding_seasonality_adjustment_name=None, description=None, bidding_seasonality_adjustment_id=None, devices=None, start_date_time=None, end_date_time=None, conversion_rate=None, campaign_ids=None, local_vars_configuration=None):  # noqa: E501
        """BiddingSeasonalityAdjustment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._bidding_seasonality_adjustment_name = None
        self._description = None
        self._bidding_seasonality_adjustment_id = None
        self._devices = None
        self._start_date_time = None
        self._end_date_time = None
        self._conversion_rate = None
        self._campaign_ids = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        self.bidding_seasonality_adjustment_name = bidding_seasonality_adjustment_name
        self.description = description
        self.bidding_seasonality_adjustment_id = bidding_seasonality_adjustment_id
        self.devices = devices
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.conversion_rate = conversion_rate
        self.campaign_ids = campaign_ids

    @property
    def account_id(self):
        """Gets the account_id of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :return: The account_id of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :param account_id: The account_id of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def bidding_seasonality_adjustment_name(self):
        """Gets the bidding_seasonality_adjustment_name of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">自動入札のスポット調整名です。<br> ADDおよびSET時、このフィールドは必須となります。<br> ※256文字以内になります。</div> <div lang=\"en\">Bidding seasonality adjustment name.<br> This field is required in ADD and SET operation.<br> *Up to 256 characters.</div>   # noqa: E501

        :return: The bidding_seasonality_adjustment_name of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._bidding_seasonality_adjustment_name

    @bidding_seasonality_adjustment_name.setter
    def bidding_seasonality_adjustment_name(self, bidding_seasonality_adjustment_name):
        """Sets the bidding_seasonality_adjustment_name of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">自動入札のスポット調整名です。<br> ADDおよびSET時、このフィールドは必須となります。<br> ※256文字以内になります。</div> <div lang=\"en\">Bidding seasonality adjustment name.<br> This field is required in ADD and SET operation.<br> *Up to 256 characters.</div>   # noqa: E501

        :param bidding_seasonality_adjustment_name: The bidding_seasonality_adjustment_name of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: str
        """

        self._bidding_seasonality_adjustment_name = bidding_seasonality_adjustment_name

    @property
    def description(self):
        """Gets the description of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">自動入札のスポット調整の説明です。<br> このフィールドは、省略可能となります。<br> ※500文字以内になります。</div> <div lang=\"en\">Bidding Seasonality Adjustment description.<br> This field is optional.<br> *Up to 500 characters.</div>   # noqa: E501

        :return: The description of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">自動入札のスポット調整の説明です。<br> このフィールドは、省略可能となります。<br> ※500文字以内になります。</div> <div lang=\"en\">Bidding Seasonality Adjustment description.<br> This field is optional.<br> *Up to 500 characters.</div>   # noqa: E501

        :param description: The description of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def bidding_seasonality_adjustment_id(self):
        """Gets the bidding_seasonality_adjustment_id of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">自動入札のスポット調整IDです。<br> SET及びREMOVE時、このフィールドは必須です。</div> <div lang=\"en\">Bidding seasonality adjustment ID.<br> This field is required in SET and REMOVE operation.</div>   # noqa: E501

        :return: The bidding_seasonality_adjustment_id of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._bidding_seasonality_adjustment_id

    @bidding_seasonality_adjustment_id.setter
    def bidding_seasonality_adjustment_id(self, bidding_seasonality_adjustment_id):
        """Sets the bidding_seasonality_adjustment_id of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">自動入札のスポット調整IDです。<br> SET及びREMOVE時、このフィールドは必須です。</div> <div lang=\"en\">Bidding seasonality adjustment ID.<br> This field is required in SET and REMOVE operation.</div>   # noqa: E501

        :param bidding_seasonality_adjustment_id: The bidding_seasonality_adjustment_id of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: int
        """

        self._bidding_seasonality_adjustment_id = bidding_seasonality_adjustment_id

    @property
    def devices(self):
        """Gets the devices of this BiddingSeasonalityAdjustment.  # noqa: E501


        :return: The devices of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: list[BiddingSeasonalityAdjustmentServiceDevices]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this BiddingSeasonalityAdjustment.


        :param devices: The devices of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: list[BiddingSeasonalityAdjustmentServiceDevices]
        """

        self._devices = devices

    @property
    def start_date_time(self):
        """Gets the start_date_time of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">ルール適用開始日です。<br> ADD時、このフィールドは必須です。<br> ※YYYYMMDDHHmmss形式です。<br> ※リクエスト日は2037/12/30まで 指定可能です。<br> ※startDateTime〜endDateTimeが14日を超える場合はエラーになります。</div> <div lang=\"en\">Start date of rule setting.<br> This field is required in ADD operation.<br> *In YYYYMMDDHHmmss format<br> *Request date can be set up to 2037/12/30<br> *If startDateTime〜endDateTime exceeds 14 days, an error will occur.</div>   # noqa: E501

        :return: The start_date_time of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">ルール適用開始日です。<br> ADD時、このフィールドは必須です。<br> ※YYYYMMDDHHmmss形式です。<br> ※リクエスト日は2037/12/30まで 指定可能です。<br> ※startDateTime〜endDateTimeが14日を超える場合はエラーになります。</div> <div lang=\"en\">Start date of rule setting.<br> This field is required in ADD operation.<br> *In YYYYMMDDHHmmss format<br> *Request date can be set up to 2037/12/30<br> *If startDateTime〜endDateTime exceeds 14 days, an error will occur.</div>   # noqa: E501

        :param start_date_time: The start_date_time of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: str
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">ルール適用終了日です。<br> ADD時、このフィールドは必須です。<br> ※YYYYMMDDHHmmss形式です。<br> ※リクエスト日は2037/12/30まで 指定可能です。<br> ※startDateTime〜endDateTimeが14日を超える場合はエラーになります。</div> <div lang=\"en\">End date of rule setting.<br> This field is required in ADD operation.<br> *In YYYYMMDDHHmmss format<br> *Request date can be set up to 2037/12/30<br> *If startDateTime〜endDateTime exceeds 14 days, an error will occur.</div>   # noqa: E501

        :return: The end_date_time of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">ルール適用終了日です。<br> ADD時、このフィールドは必須です。<br> ※YYYYMMDDHHmmss形式です。<br> ※リクエスト日は2037/12/30まで 指定可能です。<br> ※startDateTime〜endDateTimeが14日を超える場合はエラーになります。</div> <div lang=\"en\">End date of rule setting.<br> This field is required in ADD operation.<br> *In YYYYMMDDHHmmss format<br> *Request date can be set up to 2037/12/30<br> *If startDateTime〜endDateTime exceeds 14 days, an error will occur.</div>   # noqa: E501

        :param end_date_time: The end_date_time of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: str
        """

        self._end_date_time = end_date_time

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">コンバージョン率を調整する値です。<br> ADD時、このフィールドは必須となります。<br> ※制限値：0.1 ～ 10 </div> <div lang=\"en\">Value to adjust conversion rate.<br> This field is required in ADD operation.<br> *Range limit: 0.1 ～ 10 </div>   # noqa: E501

        :return: The conversion_rate of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">コンバージョン率を調整する値です。<br> ADD時、このフィールドは必須となります。<br> ※制限値：0.1 ～ 10 </div> <div lang=\"en\">Value to adjust conversion rate.<br> This field is required in ADD operation.<br> *Range limit: 0.1 ～ 10 </div>   # noqa: E501

        :param conversion_rate: The conversion_rate of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: float
        """

        self._conversion_rate = conversion_rate

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this BiddingSeasonalityAdjustment.  # noqa: E501

        <div lang=\"ja\">キャンペーンIDです。<br> ADD時、このフィールドは必須となります。</div> <div lang=\"en\">Campaign ID.<br> This field is required in ADD operation.</div>   # noqa: E501

        :return: The campaign_ids of this BiddingSeasonalityAdjustment.  # noqa: E501
        :rtype: list[int]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this BiddingSeasonalityAdjustment.

        <div lang=\"ja\">キャンペーンIDです。<br> ADD時、このフィールドは必須となります。</div> <div lang=\"en\">Campaign ID.<br> This field is required in ADD operation.</div>   # noqa: E501

        :param campaign_ids: The campaign_ids of this BiddingSeasonalityAdjustment.  # noqa: E501
        :type: list[int]
        """

        self._campaign_ids = campaign_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BiddingSeasonalityAdjustment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BiddingSeasonalityAdjustment):
            return True

        return self.to_dict() != other.to_dict()

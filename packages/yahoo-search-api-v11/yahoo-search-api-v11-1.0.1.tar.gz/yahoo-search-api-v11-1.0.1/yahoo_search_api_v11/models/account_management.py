# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class AccountManagement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'account_name': 'str',
        'account_payment': 'AccountManagementServicePayment',
        'agency_person_name': 'str',
        'agency_prefecture_code': 'AccountManagementServicePrefectureCode',
        'auto_tagging_enabled': 'AccountManagementServiceAutoTaggingEnabled',
        'client': 'AccountManagementServiceClient',
        'client_type': 'AccountManagementServiceClientType',
        'contact_biz_id': 'str',
        'delivery_status': 'AccountManagementServiceDeliveryStatus',
        'is_adult_account': 'AccountManagementServiceIsAdultAccount',
        'is_test_account': 'AccountManagementServiceIsTestAccount',
        'status': 'AccountManagementServiceStatus'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_name': 'accountName',
        'account_payment': 'accountPayment',
        'agency_person_name': 'agencyPersonName',
        'agency_prefecture_code': 'agencyPrefectureCode',
        'auto_tagging_enabled': 'autoTaggingEnabled',
        'client': 'client',
        'client_type': 'clientType',
        'contact_biz_id': 'contactBizId',
        'delivery_status': 'deliveryStatus',
        'is_adult_account': 'isAdultAccount',
        'is_test_account': 'isTestAccount',
        'status': 'status'
    }

    def __init__(self, account_id=None, account_name=None, account_payment=None, agency_person_name=None, agency_prefecture_code=None, auto_tagging_enabled=None, client=None, client_type=None, contact_biz_id=None, delivery_status=None, is_adult_account=None, is_test_account=None, status=None, local_vars_configuration=None):  # noqa: E501
        """AccountManagement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._account_name = None
        self._account_payment = None
        self._agency_person_name = None
        self._agency_prefecture_code = None
        self._auto_tagging_enabled = None
        self._client = None
        self._client_type = None
        self._contact_biz_id = None
        self._delivery_status = None
        self._is_adult_account = None
        self._is_test_account = None
        self._status = None
        self.discriminator = None

        self.account_id = account_id
        self.account_name = account_name
        self.account_payment = account_payment
        self.agency_person_name = agency_person_name
        self.agency_prefecture_code = agency_prefecture_code
        self.auto_tagging_enabled = auto_tagging_enabled
        self.client = client
        self.client_type = client_type
        self.contact_biz_id = contact_biz_id
        self.delivery_status = delivery_status
        self.is_adult_account = is_adult_account
        self.is_test_account = is_test_account
        self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this AccountManagement.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Account ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :return: The account_id of this AccountManagement.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountManagement.

        <div lang=\"ja\">アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Account ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :param account_id: The account_id of this AccountManagement.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this AccountManagement.  # noqa: E501

        <div lang=\"ja\">アカウント名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。</div> <div lang=\"en\">Account name.<br> This field is required in ADD operation, and will be optional in SET operation.</div>   # noqa: E501

        :return: The account_name of this AccountManagement.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountManagement.

        <div lang=\"ja\">アカウント名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。</div> <div lang=\"en\">Account name.<br> This field is required in ADD operation, and will be optional in SET operation.</div>   # noqa: E501

        :param account_name: The account_name of this AccountManagement.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_payment(self):
        """Gets the account_payment of this AccountManagement.  # noqa: E501


        :return: The account_payment of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServicePayment
        """
        return self._account_payment

    @account_payment.setter
    def account_payment(self, account_payment):
        """Sets the account_payment of this AccountManagement.


        :param account_payment: The account_payment of this AccountManagement.  # noqa: E501
        :type: AccountManagementServicePayment
        """

        self._account_payment = account_payment

    @property
    def agency_person_name(self):
        """Gets the agency_person_name of this AccountManagement.  # noqa: E501

        <div lang=\"ja\">代理店担当者名です。<br> ADDおよびSET時、このフィールドは省略可能となります。</div> <div lang=\"en\">Agency person name.<br> This field is optional in ADD and SET operation.</div>   # noqa: E501

        :return: The agency_person_name of this AccountManagement.  # noqa: E501
        :rtype: str
        """
        return self._agency_person_name

    @agency_person_name.setter
    def agency_person_name(self, agency_person_name):
        """Sets the agency_person_name of this AccountManagement.

        <div lang=\"ja\">代理店担当者名です。<br> ADDおよびSET時、このフィールドは省略可能となります。</div> <div lang=\"en\">Agency person name.<br> This field is optional in ADD and SET operation.</div>   # noqa: E501

        :param agency_person_name: The agency_person_name of this AccountManagement.  # noqa: E501
        :type: str
        """

        self._agency_person_name = agency_person_name

    @property
    def agency_prefecture_code(self):
        """Gets the agency_prefecture_code of this AccountManagement.  # noqa: E501


        :return: The agency_prefecture_code of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServicePrefectureCode
        """
        return self._agency_prefecture_code

    @agency_prefecture_code.setter
    def agency_prefecture_code(self, agency_prefecture_code):
        """Sets the agency_prefecture_code of this AccountManagement.


        :param agency_prefecture_code: The agency_prefecture_code of this AccountManagement.  # noqa: E501
        :type: AccountManagementServicePrefectureCode
        """

        self._agency_prefecture_code = agency_prefecture_code

    @property
    def auto_tagging_enabled(self):
        """Gets the auto_tagging_enabled of this AccountManagement.  # noqa: E501


        :return: The auto_tagging_enabled of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceAutoTaggingEnabled
        """
        return self._auto_tagging_enabled

    @auto_tagging_enabled.setter
    def auto_tagging_enabled(self, auto_tagging_enabled):
        """Sets the auto_tagging_enabled of this AccountManagement.


        :param auto_tagging_enabled: The auto_tagging_enabled of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceAutoTaggingEnabled
        """

        self._auto_tagging_enabled = auto_tagging_enabled

    @property
    def client(self):
        """Gets the client of this AccountManagement.  # noqa: E501


        :return: The client of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceClient
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this AccountManagement.


        :param client: The client of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceClient
        """

        self._client = client

    @property
    def client_type(self):
        """Gets the client_type of this AccountManagement.  # noqa: E501


        :return: The client_type of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceClientType
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this AccountManagement.


        :param client_type: The client_type of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceClientType
        """

        self._client_type = client_type

    @property
    def contact_biz_id(self):
        """Gets the contact_biz_id of this AccountManagement.  # noqa: E501

        <div lang=\"ja\">アカウント管理者のYahoo! JAPANビジネスIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Contact business ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :return: The contact_biz_id of this AccountManagement.  # noqa: E501
        :rtype: str
        """
        return self._contact_biz_id

    @contact_biz_id.setter
    def contact_biz_id(self, contact_biz_id):
        """Sets the contact_biz_id of this AccountManagement.

        <div lang=\"ja\">アカウント管理者のYahoo! JAPANビジネスIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Contact business ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :param contact_biz_id: The contact_biz_id of this AccountManagement.  # noqa: E501
        :type: str
        """

        self._contact_biz_id = contact_biz_id

    @property
    def delivery_status(self):
        """Gets the delivery_status of this AccountManagement.  # noqa: E501


        :return: The delivery_status of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceDeliveryStatus
        """
        return self._delivery_status

    @delivery_status.setter
    def delivery_status(self, delivery_status):
        """Sets the delivery_status of this AccountManagement.


        :param delivery_status: The delivery_status of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceDeliveryStatus
        """

        self._delivery_status = delivery_status

    @property
    def is_adult_account(self):
        """Gets the is_adult_account of this AccountManagement.  # noqa: E501


        :return: The is_adult_account of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceIsAdultAccount
        """
        return self._is_adult_account

    @is_adult_account.setter
    def is_adult_account(self, is_adult_account):
        """Sets the is_adult_account of this AccountManagement.


        :param is_adult_account: The is_adult_account of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceIsAdultAccount
        """

        self._is_adult_account = is_adult_account

    @property
    def is_test_account(self):
        """Gets the is_test_account of this AccountManagement.  # noqa: E501


        :return: The is_test_account of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceIsTestAccount
        """
        return self._is_test_account

    @is_test_account.setter
    def is_test_account(self, is_test_account):
        """Sets the is_test_account of this AccountManagement.


        :param is_test_account: The is_test_account of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceIsTestAccount
        """

        self._is_test_account = is_test_account

    @property
    def status(self):
        """Gets the status of this AccountManagement.  # noqa: E501


        :return: The status of this AccountManagement.  # noqa: E501
        :rtype: AccountManagementServiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountManagement.


        :param status: The status of this AccountManagement.  # noqa: E501
        :type: AccountManagementServiceStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountManagement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountManagement):
            return True

        return self.to_dict() != other.to_dict()

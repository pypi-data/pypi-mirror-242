from . import (
    BrotherQLError as BrotherQLError,
    BrotherQLRasterError as BrotherQLRasterError,
    BrotherQLUnknownModel as BrotherQLUnknownModel,
    BrotherQLUnsupportedCmd as BrotherQLUnsupportedCmd,
)
from .devicedependent import (
    compressionsupport as compressionsupport,
    cuttingsupport as cuttingsupport,
    expandedmode as expandedmode,
    min_max_feed as min_max_feed,
    min_max_length_dots as min_max_length_dots,
    models as models,
    modesetting as modesetting,
    number_bytes_per_row as number_bytes_per_row,
    two_color_support as two_color_support,
)
from PIL import Image
from _typeshed import Incomplete

logger: Incomplete

class BrotherQLRaster:
    model: Incomplete
    data: bytes
    page_number: int
    cut_at_end: bool
    dpi_600: bool
    two_color_printing: bool
    exception_on_warning: bool
    def __init__(self, model: str = ...) -> None: ...
    @property
    def two_color_support(self) -> bool: ...
    def add_initialize(self) -> None: ...
    def add_status_information(self) -> None: ...
    def add_switch_mode(self) -> None: ...
    def add_invalidate(self) -> None: ...
    @property
    def mtype(self) -> bytes: ...
    @property
    def mwidth(self) -> bytes: ...
    @property
    def mlength(self) -> bytes: ...
    @property
    def pquality(self) -> bool: ...
    def add_media_and_quality(self, rnumber: int) -> None: ...
    def add_autocut(self, autocut: bool = ...) -> None: ...
    def add_cut_every(self, n: int = ...) -> None: ...
    def add_expanded_mode(self) -> None: ...
    def add_margins(self, dots: int = ...) -> None: ...
    def add_compression(self, compression: bool = ...) -> None: ...
    def get_pixel_width(self) -> int: ...
    def add_raster_data(
        self, image: Image.Image, second_image: Image.Image | None = ...
    ) -> None: ...
    def add_print(self, last_page: bool = ...) -> None: ...

[tool.poetry]
name = "mpai-cae-arp"
version = "0.5.4"
description = "The MPAI CAE-ARP software API"
authors = ["Matteo Spanio <spanio@dei.unipd.it>"]
readme = "README.md"
license = "GPLv3"
packages = [
    {include = "mpai_cae_arp"},
    {include = "mpai_cae_arp/py.typed"}
]
keywords = ["mpai", "cae", "arp", "audio", "processing", "artificial intelligence"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.10"
numpy = "^1.24.4"
pydantic = "^2.4.0"
pyyaml = "^6.0"
librosa = "^0.10.1"
grpcio-tools = "^1.59.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
toml = "^0.10.2"
pre-commit = "^3.4.0"
docformatter = "^1.7.5"
ruff = "^0.0.291"
black = "^23.9.1"
typing-extensions = "^4.8.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.0"
sphinxcontrib-bibtex = "^2.6.1"
sphinx-copybutton = "^0.5.2"
furo = "^2023.9.10"
sphinx-inline-tabs = "^2023.4.21"
sphinx-autobuild = "^2021.3.14"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
    "error::RuntimeWarning"
]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]

[tool.coverage.run]
relative_files = true
source = ["mpai_cae_arp"]

[tool.coverage.report]
show_missing = true
omit = [
    "**/__init__.py",
    "mpai_cae_arp/io.py",
]
exclude_lines = [
    "pragma: no cover",
    "except OSError",
    "def __repr__",
    "def __str__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.docformatter]
resucrsive = true
wrap-summaries = 88
blank = true

[tool.ruff]
line-length = 88
src = ["mpai_cae_arp", "tests"]
extend-exclude = ["mpai_cae_arp/network/arp_pb2.py", "docs"]
select =[
    "A",    # builtins
    "B",    # bugbear
    "BLE",  # blind exception
    "C4",   # comprehensions
    "C90",
    "COM",  # commas
    "D",    # pydocstyle
    "DTZ",  # datetime
    "E",    # pycodestyle
    "EM",   # error messages
    "F",    # pyflakes
    "G",    # logging
    "I",    # isort
    "PIE",  # flake-8 pie
    "PL",   # pylint
    "PT",   # pytest
    "PTH",  # use pathlib
    "N",    # pep-naming
    "RUF",  # ruff specific rules
    "S",    # bandit
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "W",    # pycodestyle warning
]
fixable = ["ALL"]
target-version = "py310"

[tool.ruff.pydocstyle]
convention = "numpy"
ignore-decorators = ["typing.overload"]

[tool.ruff.pylint]
max-args = 7
max-returns = 5

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D", "RUF", "S", "A", "PLR6301", "PLR2004"]
"mpai_cae_arp/network/*" = ["N802", "PLR0913", "A"]
"mpai_cae_arp/types/_irregularity.py" = ["A003", "N815"]
"mpai_cae_arp/types/_restoration.py" = ["A003", "N815"]

[tool.black]
line-length = 88
target-version = ["py310"]
extend-exclude = '''
(
  ^/docs/.*$   # exclude docs
  | .*_pb2.py  # exclude autogenerated protobuf files
)
'''

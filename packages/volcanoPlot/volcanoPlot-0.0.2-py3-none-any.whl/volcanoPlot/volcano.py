# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_volcanoPlot.ipynb.

# %% auto 0
__all__ = ['PandasDataFrame', 'assign_sig', 'plot']

# %% ../nbs/00_volcanoPlot.ipynb 3
import matplotlib.pyplot as plt
from typing import Optional, TypeVar
import pandas as pd
import numpy as np
from pathlib import Path
from adjustText import adjust_text

PandasDataFrame = TypeVar('pandas.core.frame.DataFrame')

# %% ../nbs/00_volcanoPlot.ipynb 5
#| code_fold: True
#| code_fold: True
#| code_fold: True
#| code_fold: True
def assign_sig(p_value : int, log2FC: int, pvalue_cutoff: float=0.05 , log2FC_cutoff: int=2 ) -> str:

   if p_value < pvalue_cutoff and abs(log2FC) > log2FC_cutoff :
      return 'log2FC and p_value'
   elif p_value < pvalue_cutoff and   abs(log2FC)  <= log2FC_cutoff: 
      return 'p_value'
   elif p_value >= pvalue_cutoff and  abs(log2FC)  > log2FC_cutoff:
      return 'log2FC'
   else:
      return 'non-sig'


# %% ../nbs/00_volcanoPlot.ipynb 7
#| code_fold: True
#| code_fold: True
#| code_fold: True
#| code_fold: True
def plot(df: PandasDataFrame, x: str = 'log2FC', y: str = 'log10p', 
                xline_color: str = 'grey', yline_color: str = 'grey', line_style: str = '--',
                loc: str = 'upper left', bbox_to_anchor: Optional[tuple] = (0.3, 1),
                figsize: tuple = (8, 8), axline: float = 2, title: str = "Volcano Plot",
                top_n: int = 10, save_path: Optional[str] = None,dpi: int=300 , **kwargs) -> None:


    if 'assignSig' not in df.columns:
        df['assignSig'] = df.apply(lambda row: assign_sig(row['p_value'], row['log2FC']), axis=1)
    else:
        df = df.assign( assignSig_old = df['assignSig'],
                        assignSig = df.apply(lambda row: assign_sig(row['p_value'], row['log2FC']), axis=1))

    plt.figure(figsize=figsize)
    plt.scatter(x=df[x], y=df[y], s=1, label="Not significant", color="grey", alpha=0.5, **kwargs)

    lfc2_df = df[df.assignSig == 'log2FC'].copy()
    pvalue_df = df[df.assignSig == 'p_value'].copy()
    both_df = df[df.assignSig == 'log2FC and p_value'].copy()

    plt.scatter(x=pvalue_df[x], y=pvalue_df[y], s=3, label="p-value", color="blue", marker="o", alpha=0.5, **kwargs)
    plt.scatter(x=lfc2_df[x], y=lfc2_df[y], s=3, label="log2FC", color="green", marker="o", alpha=0.5, **kwargs)
    plt.scatter(x=both_df[x], y=both_df[y], s=3, label='log2FC and p-value', color="red", marker="o", alpha=0.5, **kwargs)

    texts = []
    top_n_indices = both_df[y].nlargest(top_n).index
    for i, index in enumerate(top_n_indices):
        texts.append(plt.text(both_df.loc[index, x], both_df.loc[index, y], index, fontsize=8))

    adjust_text(texts, arrowprops=dict(arrowstyle='->', color='black', lw=0.8), expand_points=(1.5, 1.5), expand_text=(1.5, 1.5))

    plt.xlabel(x)
    plt.ylabel(y)
    plt.title(title)
    plt.axvline(-axline, color=xline_color, linestyle=line_style)
    plt.axvline(axline, color=xline_color, linestyle=line_style)
    plt.axhline(-np.log10(0.05), color=yline_color, linestyle=line_style)
    plt.legend(loc=loc, bbox_to_anchor=bbox_to_anchor)

    if save_path:
        plt.savefig(save_path, dpi=dpi)

    plt.show()

# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import seaplane.gen.carrier
from seaplane.gen.carrier.models.sync_response_sync_response import (
    SyncResponseSyncResponse,
)  # noqa: E501
from seaplane.gen.carrier.rest import ApiException


class TestSyncResponseSyncResponse(unittest.TestCase):
    """SyncResponseSyncResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SyncResponseSyncResponse
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `SyncResponseSyncResponse`
        """
        model = seaplane.gen.carrier.models.sync_response_sync_response.SyncResponseSyncResponse()  # noqa: E501
        if include_optional :
            return SyncResponseSyncResponse(
                status = '200', 
                headers = {"Content-Type":"application/octet-stream"}, 
                metadata_headers = seaplane.gen.carrier.models.metadata_headers.MetadataHeaders(
                    include_prefixes = [
                        'foo_'
                        ], 
                    include_patterns = [
                        '.*'
                        ], )
            )
        else :
            return SyncResponseSyncResponse(
        )
        """

    def testSyncResponseSyncResponse(self):
        """Test SyncResponseSyncResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()

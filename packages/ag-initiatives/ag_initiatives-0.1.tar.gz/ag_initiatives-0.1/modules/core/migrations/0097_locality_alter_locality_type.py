# Generated by Django 4.2.3 on 2023-07-27 16:31
import collections

from django.db import migrations, models
import django.db.models.deletion


class LocalityType(object):
    MUNICIPAL_REGION = 10
    MUNICIPAL_DISTRICT = 70
    URBAN_DISTRICT = 30

    SETTLEMENT = 20
    CITY = 40
    URBAN_VILLAGE = 50
    TOWNSHIP = 60

    MUNICIPALITY_TYPES = [MUNICIPAL_REGION, MUNICIPAL_DISTRICT, URBAN_DISTRICT]
    LOCALITY_TYPES = [SETTLEMENT, CITY, URBAN_VILLAGE, TOWNSHIP]

    RESOLVER = collections.OrderedDict(
        [
            (MUNICIPAL_REGION, "Муниципальный район"),
            (MUNICIPAL_DISTRICT, "Муниципальный округ"),
            (URBAN_DISTRICT, "Городской округ"),
            (SETTLEMENT, "Населенный пункт"),
            (CITY, "Город"),
            (URBAN_VILLAGE, "Поселок городского типа"),
            (TOWNSHIP, "Поселок"),
        ]
    )

    CHOICES = RESOLVER.items()


class LocalityCategory(object):
    MUNICIPALITY = 1
    LOCALITY = 2

    RESOLVER = collections.OrderedDict(
        [
            (MUNICIPALITY, "Муниципальное образование"),
            (LOCALITY, "Населённый пункт"),
        ]
    )

    CHOICES = RESOLVER.items()


def copy_enum_values(apps, schema_editor):
    locality_types = apps.get_model('core', 'LocalityType')
    localities = apps.get_model('core', 'Locality')

    for k, v in LocalityType.CHOICES:
        locality_types.objects.create(name=v, category=LocalityCategory.LOCALITY if k in LocalityType.LOCALITY_TYPES else LocalityCategory.MUNICIPALITY)

    for locality in localities.objects.all():
        for locality_type in locality_types.objects.all():
            if locality.type and LocalityType.RESOLVER.get(int(locality.type)) == locality_type.name:
                locality.new_type = locality_type
                locality.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0096_auto_20230727_1645'),
    ]

    operations = [
        migrations.CreateModel(
            name='LocalityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name="Наименование")),
                ('category', models.IntegerField(choices=[(1, 'Муниципальное образование'), (2, 'Населённый пункт')], verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Тип населённого пункта или муниципального образования',
                'verbose_name_plural': 'Типы населённых пунктов и муниципальных образований',
            },
        ),
        migrations.AddField(
            model_name='locality',
            name='new_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, blank=True, null=True, to='core.localitytype', verbose_name='Тип населённого пункта или муниципального образования'),
        ),
        migrations.RunPython(copy_enum_values),
        migrations.RemoveField(
            model_name='locality',
            name='type',
        ),
        migrations.RenameField(
            model_name='locality',
            old_name='new_type',
            new_name='type',
        ),
    ]
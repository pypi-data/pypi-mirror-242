[build-system]
requires = [
  "setuptools >= 40.9.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "starframe"
version = "0.0.1"
description = "Extension of polars dataframe to stars schema"
readme = "README.md"
authors = [
  { name = "Jacek Pliszka", email = "jacek.pliszka@gmail.com" },
]
license = { file = "LICENSE" }
requires-python = ">=3.8"

keywords = ["dataframe", "polars"]
classifiers = [
  "Development Status :: 1 - Planning",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering",
]

[project.urls]
Homepage = "https://github.com/JacekPliszka/starframe"
Documentation = "https://github.com/JacekPliszka/starframe"
Repository = "https://github.com/JacekPliszka/starframe"
Changelog = "https://github.com/JacekPliszka/starframe"

[tool.mypy]
files = ["starframe", "tests"]
strict = true
enable_error_code = [
  "redundant-expr",
  "truthy-bool",
  "ignore-without-code",
]
disable_error_code = [
  "empty-body",
]

[tool.ruff]
line-length = 88
fix = true

select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "I", # isort
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
  "PTH", # flake8-use-pathlib
  "FA", # flake8-future-annotations
  "PIE", # flake8-pie
  "TD", # flake8-todos
  "TRY", # tryceratops
  "FBT001", # flake8-boolean-trap
]

ignore = [
  # Line length regulated by black
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM108", # Use ternary operator
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # pycodestyle
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105", # Missing docstring in magic method
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  # flake8-todos
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  # tryceratops
  "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.isort]
split-on-trailing-comma = false

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["D100", "D103", "B018", "FBT001"]

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
  "--import-mode=importlib",
  # Default to running fast tests only. To run ALL tests, run: pytest -m ""
  "-m not slow and not hypothesis and not benchmark and not write_disk and not docs",
]
markers = [
  "write_disk: Tests that write to disk",
  "slow: Tests with a longer than average runtime.",
  "benchmark: Tests that should be run on a release build.",
  "docs: Documentation code snippets",
]
filterwarnings = [
  # Fail on warnings...
  "error",
  # ...except where it prevents test debugging in an IPython console
  "ignore:.*unrecognized arguments.*PyDevIPCompleter:DeprecationWarning",
  "ignore:.*is_sparse is deprecated.*:FutureWarning",
  "ignore:FigureCanvasAgg is non-interactive:UserWarning",
]
xfail_strict = true

[tool.coverage.run]
source = ["starframe"]
branch = true

[tool.coverage.report]
fail_under = 85
skip_covered = true
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "except ImportError",
  "if TYPE_CHECKING:",
  "from typing_extensions import ",
]

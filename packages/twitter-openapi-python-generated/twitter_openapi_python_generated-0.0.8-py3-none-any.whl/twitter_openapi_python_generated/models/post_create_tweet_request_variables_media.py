# coding: utf-8

"""
    Twitter OpenAPI

    Twitter OpenAPI(Swagger) specification

    The version of the OpenAPI document: 0.0.1
    Contact: yuki@yuki0311.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, conlist
from twitter_openapi_python_generated.models.post_create_tweet_request_variables_media_media_entities_inner import PostCreateTweetRequestVariablesMediaMediaEntitiesInner

class PostCreateTweetRequestVariablesMedia(BaseModel):
    """
    PostCreateTweetRequestVariablesMedia
    """
    media_entities: conlist(PostCreateTweetRequestVariablesMediaMediaEntitiesInner) = Field(...)
    possibly_sensitive: StrictBool = Field(...)
    __properties = ["media_entities", "possibly_sensitive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostCreateTweetRequestVariablesMedia:
        """Create an instance of PostCreateTweetRequestVariablesMedia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in media_entities (list)
        _items = []
        if self.media_entities:
            for _item in self.media_entities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['media_entities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostCreateTweetRequestVariablesMedia:
        """Create an instance of PostCreateTweetRequestVariablesMedia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostCreateTweetRequestVariablesMedia.parse_obj(obj)

        _obj = PostCreateTweetRequestVariablesMedia.parse_obj({
            "media_entities": [PostCreateTweetRequestVariablesMediaMediaEntitiesInner.from_dict(_item) for _item in obj.get("media_entities")] if obj.get("media_entities") is not None else None,
            "possibly_sensitive": obj.get("possibly_sensitive") if obj.get("possibly_sensitive") is not None else False
        })
        return _obj



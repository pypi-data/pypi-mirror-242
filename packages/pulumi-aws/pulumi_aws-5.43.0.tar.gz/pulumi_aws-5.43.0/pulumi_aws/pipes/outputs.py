# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PipeSourceParameters',
    'PipeSourceParametersFilterCriteria',
    'PipeSourceParametersFilterCriteriaFilter',
    'PipeTargetParameters',
]

@pulumi.output_type
class PipeSourceParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterCriteria":
            suggest = "filter_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipeSourceParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipeSourceParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipeSourceParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_criteria: Optional['outputs.PipeSourceParametersFilterCriteria'] = None):
        """
        :param 'PipeSourceParametersFilterCriteriaArgs' filter_criteria: The collection of event patterns used to filter events. Detailed below.
        """
        if filter_criteria is not None:
            pulumi.set(__self__, "filter_criteria", filter_criteria)

    @property
    @pulumi.getter(name="filterCriteria")
    def filter_criteria(self) -> Optional['outputs.PipeSourceParametersFilterCriteria']:
        """
        The collection of event patterns used to filter events. Detailed below.
        """
        return pulumi.get(self, "filter_criteria")


@pulumi.output_type
class PipeSourceParametersFilterCriteria(dict):
    def __init__(__self__, *,
                 filters: Optional[Sequence['outputs.PipeSourceParametersFilterCriteriaFilter']] = None):
        """
        :param Sequence['PipeSourceParametersFilterCriteriaFilterArgs'] filters: An array of up to 5 event patterns. Detailed below.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.PipeSourceParametersFilterCriteriaFilter']]:
        """
        An array of up to 5 event patterns. Detailed below.
        """
        return pulumi.get(self, "filters")


@pulumi.output_type
class PipeSourceParametersFilterCriteriaFilter(dict):
    def __init__(__self__, *,
                 pattern: str):
        """
        :param str pattern: The event pattern. At most 4096 characters.
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        The event pattern. At most 4096 characters.
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class PipeTargetParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputTemplate":
            suggest = "input_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipeTargetParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipeTargetParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipeTargetParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_template: Optional[str] = None):
        """
        :param str input_template: Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
        """
        if input_template is not None:
            pulumi.set(__self__, "input_template", input_template)

    @property
    @pulumi.getter(name="inputTemplate")
    def input_template(self) -> Optional[str]:
        """
        Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
        """
        return pulumi.get(self, "input_template")



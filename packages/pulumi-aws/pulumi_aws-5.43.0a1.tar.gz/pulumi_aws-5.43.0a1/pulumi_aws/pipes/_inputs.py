# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PipeSourceParametersArgs',
    'PipeSourceParametersFilterCriteriaArgs',
    'PipeSourceParametersFilterCriteriaFilterArgs',
    'PipeTargetParametersArgs',
]

@pulumi.input_type
class PipeSourceParametersArgs:
    def __init__(__self__, *,
                 filter_criteria: Optional[pulumi.Input['PipeSourceParametersFilterCriteriaArgs']] = None):
        """
        :param pulumi.Input['PipeSourceParametersFilterCriteriaArgs'] filter_criteria: The collection of event patterns used to filter events. Detailed below.
        """
        if filter_criteria is not None:
            pulumi.set(__self__, "filter_criteria", filter_criteria)

    @property
    @pulumi.getter(name="filterCriteria")
    def filter_criteria(self) -> Optional[pulumi.Input['PipeSourceParametersFilterCriteriaArgs']]:
        """
        The collection of event patterns used to filter events. Detailed below.
        """
        return pulumi.get(self, "filter_criteria")

    @filter_criteria.setter
    def filter_criteria(self, value: Optional[pulumi.Input['PipeSourceParametersFilterCriteriaArgs']]):
        pulumi.set(self, "filter_criteria", value)


@pulumi.input_type
class PipeSourceParametersFilterCriteriaArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['PipeSourceParametersFilterCriteriaFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PipeSourceParametersFilterCriteriaFilterArgs']]] filters: An array of up to 5 event patterns. Detailed below.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeSourceParametersFilterCriteriaFilterArgs']]]]:
        """
        An array of up to 5 event patterns. Detailed below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeSourceParametersFilterCriteriaFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class PipeSourceParametersFilterCriteriaFilterArgs:
    def __init__(__self__, *,
                 pattern: pulumi.Input[str]):
        """
        :param pulumi.Input[str] pattern: The event pattern. At most 4096 characters.
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        """
        The event pattern. At most 4096 characters.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class PipeTargetParametersArgs:
    def __init__(__self__, *,
                 input_template: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] input_template: Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
        """
        if input_template is not None:
            pulumi.set(__self__, "input_template", input_template)

    @property
    @pulumi.getter(name="inputTemplate")
    def input_template(self) -> Optional[pulumi.Input[str]]:
        """
        Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target.
        """
        return pulumi.get(self, "input_template")

    @input_template.setter
    def input_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_template", value)



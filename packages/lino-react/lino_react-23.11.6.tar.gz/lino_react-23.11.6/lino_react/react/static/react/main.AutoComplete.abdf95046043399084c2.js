"use strict";(self.webpackChunklino_react=self.webpackChunklino_react||[]).push([[878],{9158:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.linoResolveGetter=e.name=void 0,e.name="AutoComplete",e.linoResolveGetter={resolveGetter:async t=>{const e=await t.resolve("react","default"),s=await t.resolve("primereact/autocomplete","AutoComplete"),i=await t.resolve("./LinoUtils","constants"),o=await t.resolve("./LinoComponentUtils","LeafComponentInput");return{AutoComplete:class extends o{constructor(t){super(t),this.onKeyDown=t=>{"ArrowDown"!==t.key&&"ArrowUp"!==t.key||(this.inputEl&&!this.inputEl.state.overlayVisible&&(this.state.rows.length||this.getChoices(this.state[i.URL_PARAM_FILTER]),this.inputEl.setState({overlayVisible:!0})),t.stopPropagation())},this.itemTemplate=t=>{let s="object"==typeof t?t.text:t;return e.createElement("div",{dangerouslySetInnerHTML:{__html:s||"Â "}})},this.getChoices=(t,e)=>{let s=(e=e||this.state[i.URL_PARAM_LIMIT])===this.state[i.URL_PARAM_LIMIT]?this.state[i.URL_PARAM_START]:this.state[i.URL_PARAM_LIMIT];this.props.urlParams.controller.actionHandler.silentFetch({path:this.choicesURL(t,s,e)}).then((s=>{this.setState({[i.URL_PARAM_FILTER]:t,[i.URL_PARAM_LIMIT]:e,count:s.count,lazyLoading:!1,rows:this.state.rows.concat(s.rows)})}))},this.state={[i.URL_PARAM_FILTER]:"",[i.URL_PARAM_LIMIT]:15,[i.URL_PARAM_START]:0,lazyLoading:!1,rows:[],value:null},this.hasClearButton=!1,this.componentDidMount=this.componentDidMount.bind(this),this.getChoices=this.getChoices.bind(this),this.getInput=this.getInput.bind(this),this.itemTemplate=this.itemTemplate.bind(this),this.onKeyDown=this.onKeyDown.bind(this)}componentDidMount(){if(this.hasClearButton&&!this.clear)throw"clear NotImplemented";let t=this.getValue();this.setState({[i.URL_PARAM_FILTER]:t.text,[i.URL_PARAM_LIMIT]:this.props.urlParams[i.URL_PARAM_LIMIT],value:t})}getInput(t={}){return null===this.state.value?null:e.createElement(e.Fragment,null,e.createElement(s,{completeMethod:t=>this.getChoices(t.query,this.state[i.URL_PARAM_LIMIT]),dropdown:!0,field:"text",itemTemplate:this.itemTemplate,onChange:t=>this.setState({value:Object.assign(this.state.value,{text:t.value,value:null}),rows:[],[i.URL_PARAM_LIMIT]:this.props.urlParams[i.URL_PARAM_LIMIT]}),onSelect:this.onSelect,onShowLoader:()=>{this.clearButton&&(this.clearButton.style.visibility="hidden")},ref:t=>this.inputEl=t,suggestions:this.state.rows,tabIndex:this.props.tabIndex,value:this.state.value.text,virtualScrollerOptions:{itemSize:this.props.urlParams[i.URL_PARAM_LIMIT],lazy:!0,loading:this.state.lazyLoading,onScrollIndexChange:t=>{let e=this.state[i.URL_PARAM_LIMIT];e-t.first<15&&!this.state.lazyLoading&&this.state.count>e&&(this.setState({lazyLoading:!0}),this.getChoices(this.state[i.URL_PARAM_FILTER],e+15))},ref:t=>this.scroller=t,scrollHeight:"200px"},...t}),this.hasClearButton&&this.props.elem.field_options.allowBlank&&this.state.value.text&&e.createElement("i",{key:this.state.touch,ref:t=>this.clearButton=t,className:"pi pi-times l-fk-clear",onClick:this.clear,style:{visibility:"visible",cursor:"pointer"}}))}}}},resolveNames:["AutoComplete"]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
from _typeshed import Incomplete
from typing import Final, Sequence

class _Naming:
    __name: Incomplete
    __tags: Incomplete
    def __init__(self, _name: str) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def tags(self) -> set[str]: ...

class Naming(_Naming):
    __DATABASE: Final[dict[str, Sequence[str]]]
    @classmethod
    def get_database(cls) -> dict[str, Sequence[str]]: ...
    def equal(self, otherNameData: _Naming | str, must_be_the_same: bool = ...) -> bool: ...

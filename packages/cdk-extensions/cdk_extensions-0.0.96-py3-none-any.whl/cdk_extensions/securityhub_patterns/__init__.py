import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from .._jsii import *

import aws_cdk as _aws_cdk_ceddda9d
import constructs as _constructs_77d1e7e8
from ..securityhub import IHub as _IHub_c090373a


@jsii.data_type(
    jsii_type="cdk-extensions.securityhub_patterns.SecurityHubOptions",
    jsii_struct_bases=[],
    name_mapping={"enabled": "enabled", "hub": "hub"},
)
class SecurityHubOptions:
    def __init__(
        self,
        *,
        enabled: typing.Optional[builtins.bool] = None,
        hub: typing.Optional[_IHub_c090373a] = None,
    ) -> None:
        '''
        :param enabled: 
        :param hub: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1663d58d90fd023e1a2f3c12bb9a7b2b06799f0a3d04877a32183a7535e6da69)
            check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
            check_type(argname="argument hub", value=hub, expected_type=type_hints["hub"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if enabled is not None:
            self._values["enabled"] = enabled
        if hub is not None:
            self._values["hub"] = hub

    @builtins.property
    def enabled(self) -> typing.Optional[builtins.bool]:
        result = self._values.get("enabled")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def hub(self) -> typing.Optional[_IHub_c090373a]:
        result = self._values.get("hub")
        return typing.cast(typing.Optional[_IHub_c090373a], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SecurityHubOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SecurityManager(
    _aws_cdk_ceddda9d.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="cdk-extensions.securityhub_patterns.SecurityManager",
):
    def __init__(
        self,
        scope: _constructs_77d1e7e8.IConstruct,
        id: builtins.str,
        *,
        auto_remediate: typing.Optional[builtins.bool] = None,
        security_hub: typing.Optional[typing.Union[SecurityHubOptions, typing.Dict[builtins.str, typing.Any]]] = None,
        account: typing.Optional[builtins.str] = None,
        environment_from_arn: typing.Optional[builtins.str] = None,
        physical_name: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param scope: -
        :param id: -
        :param auto_remediate: 
        :param security_hub: 
        :param account: The AWS account ID this resource belongs to. Default: - the resource is in the same account as the stack it belongs to
        :param environment_from_arn: ARN to deduce region and account from. The ARN is parsed and the account and region are taken from the ARN. This should be used for imported resources. Cannot be supplied together with either ``account`` or ``region``. Default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        :param physical_name: The value passed in by users to the physical name prop of the resource. - ``undefined`` implies that a physical name will be allocated by CloudFormation during deployment. - a concrete value implies a specific physical name - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation. Default: - The physical name will be allocated by CloudFormation at deployment time
        :param region: The AWS region this resource belongs to. Default: - the resource is in the same region as the stack it belongs to
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f97772d436e39f086c425069ca6480530e5bb71069af6e994fcd05273712dcee)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        props = SecurityManagerProps(
            auto_remediate=auto_remediate,
            security_hub=security_hub,
            account=account,
            environment_from_arn=environment_from_arn,
            physical_name=physical_name,
            region=region,
        )

        jsii.create(self.__class__, self, [scope, id, props])

    @builtins.property
    @jsii.member(jsii_name="autoRemediate")
    def auto_remediate(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "autoRemediate"))

    @builtins.property
    @jsii.member(jsii_name="hub")
    def hub(self) -> typing.Optional[_IHub_c090373a]:
        return typing.cast(typing.Optional[_IHub_c090373a], jsii.get(self, "hub"))


@jsii.data_type(
    jsii_type="cdk-extensions.securityhub_patterns.SecurityManagerProps",
    jsii_struct_bases=[_aws_cdk_ceddda9d.ResourceProps],
    name_mapping={
        "account": "account",
        "environment_from_arn": "environmentFromArn",
        "physical_name": "physicalName",
        "region": "region",
        "auto_remediate": "autoRemediate",
        "security_hub": "securityHub",
    },
)
class SecurityManagerProps(_aws_cdk_ceddda9d.ResourceProps):
    def __init__(
        self,
        *,
        account: typing.Optional[builtins.str] = None,
        environment_from_arn: typing.Optional[builtins.str] = None,
        physical_name: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
        auto_remediate: typing.Optional[builtins.bool] = None,
        security_hub: typing.Optional[typing.Union[SecurityHubOptions, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param account: The AWS account ID this resource belongs to. Default: - the resource is in the same account as the stack it belongs to
        :param environment_from_arn: ARN to deduce region and account from. The ARN is parsed and the account and region are taken from the ARN. This should be used for imported resources. Cannot be supplied together with either ``account`` or ``region``. Default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        :param physical_name: The value passed in by users to the physical name prop of the resource. - ``undefined`` implies that a physical name will be allocated by CloudFormation during deployment. - a concrete value implies a specific physical name - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation. Default: - The physical name will be allocated by CloudFormation at deployment time
        :param region: The AWS region this resource belongs to. Default: - the resource is in the same region as the stack it belongs to
        :param auto_remediate: 
        :param security_hub: 
        '''
        if isinstance(security_hub, dict):
            security_hub = SecurityHubOptions(**security_hub)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c977761c2087076ddb4a102a1a2073c90264723759d7291eb7f1a9806aeeb935)
            check_type(argname="argument account", value=account, expected_type=type_hints["account"])
            check_type(argname="argument environment_from_arn", value=environment_from_arn, expected_type=type_hints["environment_from_arn"])
            check_type(argname="argument physical_name", value=physical_name, expected_type=type_hints["physical_name"])
            check_type(argname="argument region", value=region, expected_type=type_hints["region"])
            check_type(argname="argument auto_remediate", value=auto_remediate, expected_type=type_hints["auto_remediate"])
            check_type(argname="argument security_hub", value=security_hub, expected_type=type_hints["security_hub"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if account is not None:
            self._values["account"] = account
        if environment_from_arn is not None:
            self._values["environment_from_arn"] = environment_from_arn
        if physical_name is not None:
            self._values["physical_name"] = physical_name
        if region is not None:
            self._values["region"] = region
        if auto_remediate is not None:
            self._values["auto_remediate"] = auto_remediate
        if security_hub is not None:
            self._values["security_hub"] = security_hub

    @builtins.property
    def account(self) -> typing.Optional[builtins.str]:
        '''The AWS account ID this resource belongs to.

        :default: - the resource is in the same account as the stack it belongs to
        '''
        result = self._values.get("account")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def environment_from_arn(self) -> typing.Optional[builtins.str]:
        '''ARN to deduce region and account from.

        The ARN is parsed and the account and region are taken from the ARN.
        This should be used for imported resources.

        Cannot be supplied together with either ``account`` or ``region``.

        :default: - take environment from ``account``, ``region`` parameters, or use Stack environment.
        '''
        result = self._values.get("environment_from_arn")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def physical_name(self) -> typing.Optional[builtins.str]:
        '''The value passed in by users to the physical name prop of the resource.

        - ``undefined`` implies that a physical name will be allocated by
          CloudFormation during deployment.
        - a concrete value implies a specific physical name
        - ``PhysicalName.GENERATE_IF_NEEDED`` is a marker that indicates that a physical will only be generated
          by the CDK if it is needed for cross-environment references. Otherwise, it will be allocated by CloudFormation.

        :default: - The physical name will be allocated by CloudFormation at deployment time
        '''
        result = self._values.get("physical_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def region(self) -> typing.Optional[builtins.str]:
        '''The AWS region this resource belongs to.

        :default: - the resource is in the same region as the stack it belongs to
        '''
        result = self._values.get("region")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def auto_remediate(self) -> typing.Optional[builtins.bool]:
        result = self._values.get("auto_remediate")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def security_hub(self) -> typing.Optional[SecurityHubOptions]:
        result = self._values.get("security_hub")
        return typing.cast(typing.Optional[SecurityHubOptions], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SecurityManagerProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "SecurityHubOptions",
    "SecurityManager",
    "SecurityManagerProps",
]

publication.publish()

def _typecheckingstub__1663d58d90fd023e1a2f3c12bb9a7b2b06799f0a3d04877a32183a7535e6da69(
    *,
    enabled: typing.Optional[builtins.bool] = None,
    hub: typing.Optional[_IHub_c090373a] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f97772d436e39f086c425069ca6480530e5bb71069af6e994fcd05273712dcee(
    scope: _constructs_77d1e7e8.IConstruct,
    id: builtins.str,
    *,
    auto_remediate: typing.Optional[builtins.bool] = None,
    security_hub: typing.Optional[typing.Union[SecurityHubOptions, typing.Dict[builtins.str, typing.Any]]] = None,
    account: typing.Optional[builtins.str] = None,
    environment_from_arn: typing.Optional[builtins.str] = None,
    physical_name: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c977761c2087076ddb4a102a1a2073c90264723759d7291eb7f1a9806aeeb935(
    *,
    account: typing.Optional[builtins.str] = None,
    environment_from_arn: typing.Optional[builtins.str] = None,
    physical_name: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
    auto_remediate: typing.Optional[builtins.bool] = None,
    security_hub: typing.Optional[typing.Union[SecurityHubOptions, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

Metadata-Version: 2.1
Name: apsystems-ez1
Version: 0.1.1
Summary: The APsystems EZ1 Python library can be used to interact with APsystems EZ1 Microinverters.
Home-page: https://apsystems-ez1.readthedocs.io/
Author: Leo Tiedt, Sonnenladen GmbH
Author-email: l.tiedt@sonnenladen.de
License: MIT
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: requests

# APsystems EZ1 -  Python Library

## Overview
The APsystems EZ1 Python library can be used to interact with APsystems EZ1 Microinverters. It provides a convenient way to communicate with the microinverter over your **local network**, allowing you to read and set various device parameters like power status, alarm information, device information, and power limits.

---

## About Sonnenladen GmbH
**This library is proudly published, maintained, and developed by Sonnenladen GmbH. Our collaboration with the APsystems R&D Team has been instrumental in making this API a reality. At Sonnenladen GmbH, we are committed to providing top-notch solar energy solutions and are excited to offer this library to enhance the experience of using APsystems inverters.**

## Purchase APsystems Inverters
For those interested in purchasing APsystems inverters, please visit our German online shop at [Sonnenladen](https://www.sonnenladen.de/). We offer a range of APsystems products, backed by our expertise in solar energy solutions.

---
## Features
- **Get detailed device information**
- **Retrieve alarm status information**
- **Fetch output data** (power output, energy readings)
- **Set and get maximum power limits** (30 W up to 800 W)
- **Manage device power status** (sleep_mode/on/off)
- **Calculate combined power output and total energy generated**
- and much more...

## Device Compatibility
- This table includes all micro-inverters we tested and can confirm 100 % compatbility with this library.
<table>
<tbody>
<tr>
<th>Device</th>
<th>Name</th>
<th>Support / Compatibility</th>
<th>Available to purchase at:</th>
</tr>
<tr>
<td align="center"><img src="images/APsystems-EZ1-M.png" alt="APsystems EZ1-M Inverter" width="150" /></td>
<td align="center">
<p><strong>APsystems EZ1-M</strong></p>
<p>(Firmware: V1.17)</p>
</td>
<td align="center"><img src="https://img.icons8.com/color/48/000000/checkmark.png" alt="Compatible-Checkmark" width="30" /></td>
<td align="center"><a href="https://www.sonnenladen.de/APsystems-EZ1-M-600-800-W-Mikrowechselrichter-ohne-Anschlusskabel/AP-07-000-0" target="_blank" rel="noopener"><strong>Sonnenladen GmbH - Online Shop</strong></a><br /><a href="https://www.sonnenladen.de/APsystems-EZ1-M-600-800-W-Mikrowechselrichter-ohne-Anschlusskabel/AP-07-000-0" target="_blank" rel="noopener">IN STOCK | AUF LAGER</a></td>
</tr>
</tbody>
</table>

## Installation
- To use the APsystemsEZ1 library, you need to have Python 3.10 installed on your system. 
- You can easily install the `apsystems_ez1m` library via pip. The package is hosted on PyPI, making it straightforward to install and update. To install, run the following command:


```bash
pip install apsystems_ez1m
```

## Usage
Here's a quick example of how to use the APsystemsEZ1 library:

```python
from APsystems_EZ1 import APsystemsEZ1M

# Initialize the connection to the inverter
inverter = APsystemsEZ1M("192.168.1.100", 8050)

# Get device information
device_info = inverter.get_device_info()
print("Device Information:", device_info)

# Get alarm information
alarm_info = inverter.get_alarm_info()
print("Alarm Information:", alarm_info)

# Get output data
output_data = inverter.get_output_data()
print("Output Data:", output_data)

# Set maximum power limit
inverter.set_max_power(500)

# Get current power status
power_status = inverter.get_device_power_status()
print("Power Status:", power_status)
```

## Methods
The library includes several methods to interact with the microinverter:

- `get_device_info()`: Retrieves detailed information about the device.
- `get_alarm_info()`: Fetches the alarm status information for various components of the device.
- `get_output_data()`: Retrieves the output data from the device.
- `get_p1_output()`, `get_p2_output()`: Get the power output status of inverter inputs.
- `get_total_output()`: Calculates the combined power output status of inverter inputs.
- `get_p1_energy_today()`, `get_p2_energy_today()`, `get_total_energy_today()`: Retrieves the total energy generated today by inverter inputs.
- `get_p1_energy_lifetime()`, `get_p2_energy_lifetime()`, `get_total_energy_lifetime()`: Retrieves the total lifetime energy generated by inverter inputs.
- `get_max_power()`: Retrieves the set maximum power setting of the device.
- `set_max_power(power_limit)`: Sets the maximum power limit of the device.
- `get_device_power_status()`: Retrieves the current power status of the device.
- `set_device_power_status(power_status)`: Sets the power status of the device.

## Recommendations
- We highly recommend to set a **static IP** for the inverter you want to interact with. This can be achieved be accessing your local router, searching for the inverters IP and setting it to "static ip" or similar. A quick Google search will tell you how to do it exactly for your specific router model.
## Error Handling
The library includes basic error handling for HTTP and connection errors. Error messages are printed to the console.

## Contribute to this project
- Everyone is invited to commit changes to this library. This is considered a community project to realise countless projects that may need very specific new functionality. We're happy to see your ideas ;)
- You're also welcome to request new features to be built natively into the inverters API. We're in close contact with APsystems and happy to add new features in the future.
## License
This library is released under the MIT License.

---



[project]
name = "pytest-litter"
description = "Pytest plugin which verifies that tests do not modify file trees."
authors = [
  {name="Anton VikstrÃ¶m"}
]
readme = "README.md"
license = {file = "LICENSE"}
urls = {repo = "https://github.com/mam-dev/pytest-litter"}
requires-python = ">=3.9"
dependencies = ["pytest >= 6.1"]
dynamic = ["version"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Testing :: Unit",
  "Framework :: Pytest",
  "License :: OSI Approved :: Apache Software License",
]

[project.entry-points.pytest11]
pytest-litter = "pytest_litter.plugin.plugin"

[build-system]
requires = ["setuptools>=51", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.pytest.ini_options]
addopts = "--random-order -p no:pytest-litter -p pytester -vv"
testpaths = ["tests"]
pytester_example_dir = "tests/suite"

[tool.coverage.run]
branch = true
source_pkgs = ["pytest_litter"]

[tool.coverage.report]
show_missing = true
fail_under = 100

[tool.mypy]
files = ["src", "tests"]
warn_no_return = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
check_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
extra_checks = true

[tool.ruff]
src = ["src", "tests"]
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "UP",  # pyupgrade
  "S",   # flake8-bandit
  "D",   # pydocstyle
  "PT",  # flake8-pytest-style
  "I",   # isort
  "RUF", # Ruff-specific rules
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  "PL",  # pylint
  "FBT", # flake8-boolean-trap
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "ISC", # flake8-implicit-str-concat
  "INP", # flake8-no-pep420
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "ARG", # flake8-unused-arguments
  "TRY", # tryceratops
  "FLY",  # flynt
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "FIX",  # flake8-fixme
  "Q",    # flake8-quotes
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TCH",  # flake8-type-checking
]
ignore = [
  "D100", "D102", "D103", "D104", "D105", "D107",
  "PTH123",
  "TRY003", "TRY301",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
  "S101", "S105",
  "D103",
  "FBT001",
  "SLF001",
  "PLR2004", "PLR0913",
  "ARG001",
  "INP001",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"
parametrize-values-type = "list"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

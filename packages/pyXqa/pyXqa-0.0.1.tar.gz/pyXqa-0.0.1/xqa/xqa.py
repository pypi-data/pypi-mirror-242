from datetime import date, datetime
from typing import List, Literal, Optional

from pykx import QConnection


class Xqa:
    def __init__(self, q: QConnection) -> None:
        self.q = q

    def sync(self, api: str, **args):
        filtered_args = {}
        for key, value in args.items():
            if value is not None:
                filtered_args[key] = value
        return self.q(api, filtered_args).pd()

    def getBinnedMetrics(self,symList:List[str],columns:Literal['volume','meantradesize','mediantradesize','aggrbidvolume','aggraskvolume','neutralvolume','bidvolume','askvolume','midvolume','inspreadvolume','outspreadvolume','tradecount','meanspread','medianspread','meanspreadticks','medianspreadticks','meanbidsize','meanasksize','meandepthbidasksize','mediandepthbidasksize','meanordersize','medianordersize','levelcount','highlowdiff','turnover','vwap','high','low','meanbidasksize','medianbidasksize','firstprice','lastprice','lastbid','lastask','lastmid','pricevolatility','meanimbalance','medianimbalance','tradeimbalance','depthimbalance','meanprice','pctvolume','cumulativevwap','cumulativevolume'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,startTime:Optional[List[datetime]] = None,endTime:Optional[List[datetime]] = None,binUnit:Optional[Literal['minute','second','time']] = None,binSize:Optional[int] = None,numBins:Optional[int] = None,timeZone:Optional[List[str]] = None,noDays:Optional[int] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,ccy:Optional[str] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,adjustDate:Optional[date] = None,limitCol:Optional[str] = None,limitSide:Optional[List[str]] = None,limitValue:Optional[List[float]] = None,offsetBins:Optional[bool] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getBinnedMetrics',symList=symList,columns=columns,startDate=startDate,endDate=endDate,startTime=startTime,endTime=endTime,binUnit=binUnit,binSize=binSize,numBins=numBins,timeZone=timeZone,noDays=noDays,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,ccy=ccy,excludeAuctions=excludeAuctions,adjustDate=adjustDate,limitCol=limitCol,limitSide=limitSide,limitValue=limitValue,offsetBins=offsetBins,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getDailyMetrics(self,symList:List[str],columns:Literal['volume','fragmentation','meantradesize','mediantradesize','aggrbidvolume','aggraskvolume','neutralvolume','bidvolume','askvolume','midvolume','inspreadvolume','outspreadvolume','tradeimbalance','openauctvolume','closeauctvolume','pctopenauctvolume','pctcloseauctvolume','auctvolume','tradecount','meanspread','medianspread','meanspreadticks','medianspreadticks','meandepthbidasksize','mediandepthbidasksize','meanordersize','medianordersize','levelcount','highlowmove','close','prevclose','turnover','vwap','high','low','meanbidasksize','medianbidasksize','meanasksize','meanbidsize','open','meanimbalance','medianimbalance','meanintradayvolatility','maxintradayvolatility','timeweightedspread','timeweightedspreadticks'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,ccy:Optional[str] = None,noDays:Optional[int] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,dateList:Optional[List[date]] = None,adjustDate:Optional[date] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getDailyMetrics',symList=symList,columns=columns,startDate=startDate,endDate=endDate,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,ccy=ccy,noDays=noDays,excludeAuctions=excludeAuctions,dateList=dateList,adjustDate=adjustDate,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getIntervalMetrics(self,symList:List[str],columns:Literal['volume','meantradesize','mediantradesize','aggrbidvolume','aggraskvolume','neutralvolume','bidvolume','askvolume','midvolume','bidvwap','askvwap','midvwap','inspreadvolume','outspreadvolume','tradecount','meanspread','medianspread','meanspreadticks','medianspreadticks','timewavgspread','timewavgbidasksize','meandepthbidasksize','meanordersize','medianordersize','levelcount','highlowmove','lastprice','turnover','vwap','high','low','meanbidasksize','medianbidasksize','firstprice','meanimbalance','medianimbalance','tradeimbalance','tradeimbalanceratio','meanprice','lastmid','firstmid','lastbid','lastask'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,startTime:Optional[List[datetime]] = None,endTime:Optional[List[datetime]] = None,timeZone:Optional[List[str]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,ccy:Optional[str] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,adjustDate:Optional[date] = None,limitCol:Optional[str] = None,limitSide:Optional[List[str]] = None,limitValue:Optional[List[float]] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getIntervalMetrics',symList=symList,columns=columns,startDate=startDate,endDate=endDate,startTime=startTime,endTime=endTime,timeZone=timeZone,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,ccy=ccy,excludeAuctions=excludeAuctions,adjustDate=adjustDate,limitCol=limitCol,limitSide=limitSide,limitValue=limitValue,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getMetricsByPrice(self,symList:List[str],columns:Literal['volume','meantradesize','mediantradesize','tradecount','firsttradetime','lasttradetime'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,startTime:Optional[List[datetime]] = None,endTime:Optional[List[datetime]] = None,timeZone:Optional[List[str]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getMetricsByPrice',symList=symList,columns=columns,startDate=startDate,endDate=endDate,startTime=startTime,endTime=endTime,timeZone=timeZone,tradeRule=tradeRule,multiVenue=multiVenue,excludeAuctions=excludeAuctions,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getOrderBreakdown(self,columns:Literal['Exec Size','Value Traded','Perf vs Interval Vwap (bps)','Avg Price','US$Value Traded'],criteria:Literal['venue','counterparty','price','orderid'],orderId:Optional[List[str]] = None,startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,reformatColNames:Optional[bool] = None,venueList:Optional[List[str]] = None,reportType:Optional[Literal['desk','street']] = None):
        return self.sync('getOrderBreakdown',columns=columns,criteria=criteria,orderId=orderId,startDate=startDate,endDate=endDate,reformatColNames=reformatColNames,venueList=venueList,reportType=reportType)

    def getOrderSummaryMetrics(self,columns:Literal['Date','Order ID','Instrument','Side','Venue','Client','Broker','Algo Strategy','Order Size','Exec Size','% Executed','Num Orders','Value Traded','Strategy Start Time','Strategy End Time','Order Duration','% Market Volume','Market Volume','% Full Day Volume','Full Day Volume','% Available Volume','Available Volume','Perf vs PWP 10','PWP 10','Perf vs PWP 15','PWP 15','Perf vs PWP 20','PWP 20','PWP 25','Perf vs PWP 25','Perf vs PWP 5','PWP 5','PWP 30','Perf vs PWP 30','PWP 33','Perf vs PWP 33','Perf vs Close (bps)','Prev Close','Perf vs Prev Close (bps)','Close','Open','Perf vs Open (bps)','Open to Close Move','Prev Close to Open Move','Prev Close to Close Move','Vwap','Perf vs Interval Vwap (bps)','Perf vs High (bps)','Perf vs Last (bps)','Perf vs Low (bps)','Perf vs Simple Avg Price (bps)','EBEX','RPM','Perf vs Full Day Vwap (bps)','Full Day Vwap','Arrival','Perf vs Arrival (bps)','Perf vs Arrival Mid (bps)','Arrival Mid','% Arrival Far Touch Size','Mid at EndTime','Perf vs Arrival Near Touch (bps)','Perf vs Arrival Far Touch (bps)','Close vs Arrival (bps)','Perf vs Available Vwap (bps)','Available Vwap','Avg Child Mid Reversion (Next Quote)','Avg Child Mid Reversion (1s)','Avg Child Mid Reversion (5s)','Avg Child Mid Reversion (10s)','Avg Child Mid Reversion (30s)','Avg Child Passive Reversion (Next Quote)','Avg Child Passive Reversion (1s)','Avg Child Passive Reversion (5s)','Avg Child Passive Reversion (10s)','Avg Child Passive Reversion (30s)','Avg Child Reversion (50% Quantity)','Avg Child Reversion (100% Quantity)','Avg Child Reversion (200% Quantity)','Avg Close Volume','Close Volume','Close Volume Deviation','Close Volume Hist Error','% ADV','ADV 20D','% RDV','Avg Bid-Ask Queue','% Avg Bid-Ask Size','Avg High Low Range','Avg Value Traded','Volume Deviation','Avg Open Volume','Open Volume','Open Volume Deviation','Avg Spread','Avg Num Trades','Avg Trade Size','Normalised Price Range','Price Range','Daily Price Range','% Market Trades','Trade Imbalance Ratio','Avg Price','Move From Arrival (bps)','Mid Move From Arrival (bps)','Move From Open (bps)','Move From Prev Close (bps)','T+1 Open','Perf vs T+1 Open (bps)','T+1 Vwap','Perf vs T+1 Vwap (bps)','T+1 Close','Perf vs T+1 Close (bps)','Perf vs Vwap (% Spread)','Perf vs Arrival (% Spread)','Notional Vwap Cost','Notional Arrival Cost','Performance Scale','Available Performance Scale','Full Day Performance Scale','Performance Range','Available Performance Range','Full Day Performance Range','Index Adj Perf vs Arrival','Beta Adj Perf vs Arrival','Index Adj Move From Arrival','Beta Adj Move From Arrival','In Limit Volume','% In Limit Volume','% Time In Limit','Perf vs In Limit Vwap (bps)','Limit Contribution (bps)','In Limit Vwap','% Passive Volume','% Aggressive Volume','% Mid Volume','% Dark Volume','Perf vs Relaxation 1 Min (bps)','Perf vs Relaxation 5 Min (bps)','Perf vs Relaxation 10 Min (bps)','Perf vs Relaxation 15 Min (bps)','Perf vs Relaxation 20 Min (bps)','Perf vs Relaxation 30 Min (bps)','Perf vs Relaxation Half-Life (bps)','Profile Deviation','Exec Deviation','Tracking Deviation','Microstructure Deviation','Vwap Breakdown Deviation','TWAP','Perf vs TWAP','Perf vs Full Day TWAP','Full Day TWAP','Avg Spread (Ticks)','Passive VWAP','Aggressive VWAP','Mid VWAP','Perf vs Passive VWAP (bps)','Perf vs Aggressive VWAP (bps)','Perf vs Mid VWAP (bps)','US$Value Traded','% Continuous Volume','% Auction Volume','Pre-Traded Order','% Historical Close Volume','% Order Volume traded in Close','% Order Volume traded in Continuous','% Order Value traded in Close','% Order Value traded in Continuous','First Execution Price to Close','% Exec Close Volume to Hist Close','% Close Volume Ratio','Mid Price 1 Minute Prior','Mid Price 5 Minutes Prior','Mid Price 10 Minutes Prior','Mid Price 1 Minute Post','Mid Price 5 Minutes Post','Mid Price 10 Minutes Post','Mid 1 Minute Prior from Arrival (bps)','Mid 5 Minutes Prior from Arrival (bps)','Mid 10 Minutes Prior from Arrival (bps)','Mid 1 Minute Post from Last Mid (bps)','Mid 5 Minute Post from Last Mid (bps)','Mid 10 Minute Post from Last Mid (bps)','1 Minute Post Traded Volume','5 Minutes Post Traded Volume','10 Minutes Post Traded Volume','1 Minute Pre Traded Volume','5 Minutes Pre Traded Volume','10 Minutes Pre Traded Volume','Last Cns Price to Close','Last Cns Mid to Close','30 Seconds Prior Mid to Close','1 Minute Prior Mid to Close','2 Minutes Prior Mid to Close','5 Minutes Prior Mid to Close'],orderId:Optional[List[str]] = None,dateList:Optional[List[date]] = None,clientCode:Optional[List[str]] = None,brokerCode:Optional[List[str]] = None,startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,summary:Optional[Literal['Date','Side','Venue','Client','Broker','Algo Strategy','% Market Volume','% ADV','% RDV','Avg Bid-Ask Queue','% Avg Bid-Ask Size','Avg High Low Range','Avg Spread','Avg Trade Size','Normalised Price Range','Price Range','Performance Scale','Performance Range','Avg Spread (Ticks)','US$Bin Value Traded','US$Value Traded','date','side','venue','client','broker','algorithm','pctvolume','pctadv','pctrdv','meanbidaskfactor','pctavgbidasksize','meanhighlowmove','histspread','meantradesize','normpricerange','highlowmove','perfscale','perfrange','meanspreadticks','usdbinexecvalue','usdexecvalue']] = None,aggregation:Optional[Literal['weighted','mean','median']] = None,tableType:Optional[Literal['summary','outlier','detail']] = None,venueList:Optional[str] = None,filterRule:Optional[Literal['top','bottom','both','stddev','']] = None,executedOnly:Optional[bool] = None,filterCriteria:Optional[Literal['execvalue','pwp10dev','pwp15dev','pwp20dev','pwp25dev','pwp5dev','pwp33dev','closedev','prevclosedev','opendev','vwapdev','highdev','lastdev','lowdev','meanpricedev','fulldayvwapdev','arrivaldev','arrivalmiddev','neartouchdev','fartouchdev','availvwapdev','closevolumedeviation','t1opendev','t1vwapdev','t1closedev','spreadnormvwapdev','spreadnormarrivaldev','notionalvwapdev','notionalarrivaldev','arrdev25','arrdev50','arrdev75','vwapdev25','vwapdev50','vwapdev75','perfscale','availperfscale','fulldayperfscale','indexadjarrivaldev','betadjarrivaldev','limitvwapdev','relax1mdev','relax5mdev','relax10mdev','relax15mdev','relax20mdev','relax30mdev','relaxhalfdev','profiledev','execdev','trackingdev','twapdev','fulldaytwapdev','fulldaytwap']] = None,filterCutOff:Optional[] = None,reformatColNames:Optional[bool] = None,algoStrategy:Optional[Literal['','INLINE','TWAP','VWAP','MOC']] = None,reportType:Optional[Literal['desk','street']] = None):
        return self.sync('getOrderSummaryMetrics',columns=columns,orderId=orderId,dateList=dateList,clientCode=clientCode,brokerCode=brokerCode,startDate=startDate,endDate=endDate,summary=summary,aggregation=aggregation,tableType=tableType,venueList=venueList,filterRule=filterRule,executedOnly=executedOnly,filterCriteria=filterCriteria,filterCutOff=filterCutOff,reformatColNames=reformatColNames,algoStrategy=algoStrategy,reportType=reportType)

    def getOrderTimeSeries(self,columns:Literal['Date','Time','Order ID','Instrument','Order Size','Exec Size','Bin Exec Size','% Executed','Bin % Executed','Value Traded','Bin Value Traded','% Market Volume','Bin % Market Volume','Market Volume','Cumulative Volume','Full Day Volume','Perf vs PWP 10','PWP 10','Perf vs PWP 15','PWP 15','Perf vs PWP 20','PWP 20','PWP 25','Perf vs PWP 25','Perf vs PWP 5','PWP 5','PWP 30','Perf vs PWP 30','PWP 33','Perf vs PWP 33','Perf vs Close (bps)','Prev Close','Perf vs Prev Close (bps)','Close','Open','Perf vs Open (bps)','Vwap','Bin Vwap','Perf vs Interval Vwap (bps)','Perf vs Last (bps)','Perf vs Simple Avg Price (bps)','Perf vs Arrival (bps)','Perf vs Arrival Mid (bps)','Perf vs Arrival Near Touch (bps)','Perf vs Arrival Far Touch (bps)','Avg Child Mid Reversion (Next Quote)','Avg Child Mid Reversion (1s)','Avg Child Mid Reversion (5s)','Avg Child Mid Reversion (10s)','Avg Child Mid Reversion (30s)','Avg Child Passive Reversion (Next Quote)','Avg Child Passive Reversion (1s)','Avg Child Passive Reversion (5s)','Avg Child Passive Reversion (10s)','Avg Child Passive Reversion (30s)','Historical Volume','Volume Deviation','Avg Spread','Avg Price','Bin Exec Price','Perf vs Vwap (% Spread)','Perf vs Arrival (% Spread)','Index Adj Perf vs Arrival','Last Bid','Last Ask','Avg Spread (Ticks)','US$Bin Value Traded','US$Value Traded'],orderId:Optional[List[str]] = None,dateList:Optional[List[date]] = None,clientCode:Optional[List[str]] = None,brokerCode:Optional[List[str]] = None,startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,tableType:Optional[Literal['detail','summary']] = None,timeZone:Optional[List[str]] = None,summaryType:Optional[List[str]] = None,venueList:Optional[List[str]] = None,binType:Optional[Literal['Time','EqualBins','ExecProgress','OffsetTime']] = None,binUnit:Optional[Literal['minute','second','time']] = None,binSize:Optional[int] = None,numBins:Optional[int] = None,pctExecs:Optional[int] = None,dataType:Optional[str] = None,duration:Optional[Literal['FullDay','OrderActive','ArrivalToEnd']] = None,reformatColNames:Optional[bool] = None,algoStrategy:Optional[Literal['','INLINE','TWAP','VWAP','MOC']] = None,executedOnly:Optional[bool] = None,reportType:Optional[Literal['desk','street']] = None):
        return self.sync('getOrderTimeSeries',columns=columns,orderId=orderId,dateList=dateList,clientCode=clientCode,brokerCode=brokerCode,startDate=startDate,endDate=endDate,tableType=tableType,timeZone=timeZone,summaryType=summaryType,venueList=venueList,binType=binType,binUnit=binUnit,binSize=binSize,numBins=numBins,pctExecs=pctExecs,dataType=dataType,duration=duration,reformatColNames=reformatColNames,algoStrategy=algoStrategy,executedOnly=executedOnly,reportType=reportType)

    def getPWPMetrics(self,symList:List[str],columns:Literal['vwap','volume','turnover','endTime','lastprice'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,startTime:Optional[List[datetime]] = None,endTime:Optional[List[datetime]] = None,povRate:Optional[List[float]] = None,quantity:Optional[List[int]] = None,timeZone:Optional[List[str]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,calcDirection:Optional[Literal['forward','backward']] = None,ccy:Optional[str] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,adjustDate:Optional[date] = None,limitCol:Optional[str] = None,limitSide:Optional[List[str]] = None,limitValue:Optional[List[float]] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getPWPMetrics',symList=symList,columns=columns,startDate=startDate,endDate=endDate,startTime=startTime,endTime=endTime,povRate=povRate,quantity=quantity,timeZone=timeZone,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,calcDirection=calcDirection,ccy=ccy,excludeAuctions=excludeAuctions,adjustDate=adjustDate,limitCol=limitCol,limitSide=limitSide,limitValue=limitValue,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getPointInTimeMetrics(self,symList:List[str],columns:Literal['size','price','bidsize','bid','asksize','ask','tradetime','quotetime','mid'],snapDate:Optional[List[date]] = None,snapTime:Optional[List[datetime]] = None,timeZone:Optional[List[str]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,ccy:Optional[str] = None,snapAfter:Optional[bool] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getPointInTimeMetrics',symList=symList,columns=columns,snapDate=snapDate,snapTime=snapTime,timeZone=timeZone,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,ccy=ccy,snapAfter=snapAfter,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getPriceCorrelations(self,symList:List[str],columns:Literal['beta','covariance','correlation','trackingerror'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,adjustDate:Optional[date] = None,ccy:Optional[str] = None,noDays:Optional[int] = None,symList2:Optional[List[str]] = None,priceToCorrelate:Optional[str] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getPriceCorrelations',symList=symList,columns=columns,startDate=startDate,endDate=endDate,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,adjustDate=adjustDate,ccy=ccy,noDays=noDays,symList2=symList2,priceToCorrelate=priceToCorrelate,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getProfileMetrics(self,symList:List[str],columns:Literal['meanvolume','medianvolume','meanpctvolume','medianpctvolume','meansumpctvolume','meanspread','medianspread','meantradesize','mediantradesize','meanpricevolatility','meanbidasksize','meanvwap','pctmedianvolume','cumulativemeanpctvolume','meanspreadticks'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,startTime:Optional[List[datetime]] = None,endTime:Optional[List[datetime]] = None,binSize:Optional[int] = None,binUnit:Optional[Literal['minute','second','time']] = None,numBins:Optional[int] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,ccy:Optional[str] = None,noDays:Optional[int] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,dateList:Optional[List[date]] = None,adjustDate:Optional[date] = None,limitCol:Optional[str] = None,limitSide:Optional[List[str]] = None,limitValue:Optional[List[float]] = None,offsetBins:Optional[bool] = None,timeZone:Optional[List[str]] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getProfileMetrics',symList=symList,columns=columns,startDate=startDate,endDate=endDate,startTime=startTime,endTime=endTime,binSize=binSize,binUnit=binUnit,numBins=numBins,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,ccy=ccy,noDays=noDays,excludeAuctions=excludeAuctions,dateList=dateList,adjustDate=adjustDate,limitCol=limitCol,limitSide=limitSide,limitValue=limitValue,offsetBins=offsetBins,timeZone=timeZone,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getRawData(self,symList:List[str],columns:Literal['trade','quote','aligntradequote','depth'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,startTime:Optional[List[datetime]] = None,endTime:Optional[List[datetime]] = None,timeZone:Optional[List[str]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getRawData',symList=symList,columns=columns,startDate=startDate,endDate=endDate,startTime=startTime,endTime=endTime,timeZone=timeZone,tradeRule=tradeRule,multiVenue=multiVenue,includeDateType=includeDateType,excludeDateType=excludeDateType)

    def getSummaryMetrics(self,symList:List[str],columns:Literal['meanvolume','volume','medianvolume','stddevvolume','minvolume','maxvolume','meantradesize','meanfragmentation','mediantradesize','meantradecount','mediantradecount','meanlevelcount','medianlevelcount','meanhighlowmove','medianhighlowmove','closevolatility','meanturnover','medianturnover','meanspread','medianspread','meanbidasksize','meanclosevolume','meanopenvolume','meanpctclosevolume','meanpctopenvolume','meanspreadticks','meantimeweightedspread','meantimeweightedspreadticks'],startDate:Optional[List[date]] = None,endDate:Optional[List[date]] = None,tradeRule:Optional[Literal['OB','ALL','CNS']] = None,multiVenue:Optional[Literal['primary','multi']] = None,corpAction:Optional[bool] = None,ccy:Optional[str] = None,noDays:Optional[int] = None,excludeAuctions:Optional[Literal['opening','closing','none','all']] = None,dateList:Optional[List[date]] = None,adjustDate:Optional[date] = None,includeDateType:Optional[Literal['','HALF','REBAL','DISRUPT']] = None,excludeDateType:Optional[Literal['NONE','HALF','REBAL','DISRUPT']] = None):
        return self.sync('getSummaryMetrics',symList=symList,columns=columns,startDate=startDate,endDate=endDate,tradeRule=tradeRule,multiVenue=multiVenue,corpAction=corpAction,ccy=ccy,noDays=noDays,excludeAuctions=excludeAuctions,dateList=dateList,adjustDate=adjustDate,includeDateType=includeDateType,excludeDateType=excludeDateType)


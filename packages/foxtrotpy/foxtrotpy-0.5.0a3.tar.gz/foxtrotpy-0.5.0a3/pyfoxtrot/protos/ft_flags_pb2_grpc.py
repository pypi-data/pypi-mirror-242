# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ft_flags_pb2 as ft__flags__pb2
import ft_types_pb2 as ft__types__pb2


class flagsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetServerFlag = channel.unary_unary(
                '/foxtrot.flags/SetServerFlag',
                request_serializer=ft__flags__pb2.serverflag.SerializeToString,
                response_deserializer=ft__flags__pb2.serverflag.FromString,
                )
        self.GetServerFlag = channel.unary_unary(
                '/foxtrot.flags/GetServerFlag',
                request_serializer=ft__flags__pb2.serverflag.SerializeToString,
                response_deserializer=ft__flags__pb2.serverflag.FromString,
                )
        self.ListServerFlags = channel.unary_unary(
                '/foxtrot.flags/ListServerFlags',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__flags__pb2.serverflaglist.FromString,
                )
        self.DropServerFlag = channel.unary_unary(
                '/foxtrot.flags/DropServerFlag',
                request_serializer=ft__flags__pb2.serverflag.SerializeToString,
                response_deserializer=ft__flags__pb2.serverflag.FromString,
                )


class flagsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetServerFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListServerFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropServerFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_flagsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetServerFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.SetServerFlag,
                    request_deserializer=ft__flags__pb2.serverflag.FromString,
                    response_serializer=ft__flags__pb2.serverflag.SerializeToString,
            ),
            'GetServerFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerFlag,
                    request_deserializer=ft__flags__pb2.serverflag.FromString,
                    response_serializer=ft__flags__pb2.serverflag.SerializeToString,
            ),
            'ListServerFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListServerFlags,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__flags__pb2.serverflaglist.SerializeToString,
            ),
            'DropServerFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.DropServerFlag,
                    request_deserializer=ft__flags__pb2.serverflag.FromString,
                    response_serializer=ft__flags__pb2.serverflag.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foxtrot.flags', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class flags(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetServerFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.flags/SetServerFlag',
            ft__flags__pb2.serverflag.SerializeToString,
            ft__flags__pb2.serverflag.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.flags/GetServerFlag',
            ft__flags__pb2.serverflag.SerializeToString,
            ft__flags__pb2.serverflag.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListServerFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.flags/ListServerFlags',
            ft__types__pb2.empty.SerializeToString,
            ft__flags__pb2.serverflaglist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropServerFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.flags/DropServerFlag',
            ft__flags__pb2.serverflag.SerializeToString,
            ft__flags__pb2.serverflag.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

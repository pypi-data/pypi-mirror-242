# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ft_auth_pb2 as ft__auth__pb2
import ft_types_pb2 as ft__types__pb2


class authStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestAuthChallenge = channel.unary_unary(
                '/foxtrot.auth/RequestAuthChallenge',
                request_serializer=ft__auth__pb2.auth_request.SerializeToString,
                response_deserializer=ft__auth__pb2.auth_challenge.FromString,
                )
        self.RespondAuthChallenge = channel.unary_unary(
                '/foxtrot.auth/RespondAuthChallenge',
                request_serializer=ft__auth__pb2.auth_response.SerializeToString,
                response_deserializer=ft__auth__pb2.auth_confirm.FromString,
                )
        self.GetSupportedAuthMechanisms = channel.unary_unary(
                '/foxtrot.auth/GetSupportedAuthMechanisms',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__auth__pb2.auth_type_list.FromString,
                )
        self.SaslAuthProcess = channel.stream_stream(
                '/foxtrot.auth/SaslAuthProcess',
                request_serializer=ft__auth__pb2.sasl_auth_data.SerializeToString,
                response_deserializer=ft__auth__pb2.sasl_auth_data.FromString,
                )
        self.VerifyToken = channel.unary_unary(
                '/foxtrot.auth/VerifyToken',
                request_serializer=ft__auth__pb2.sasl_auth_data.SerializeToString,
                response_deserializer=ft__auth__pb2.sasl_auth_data.FromString,
                )


class authServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestAuthChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondAuthChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedAuthMechanisms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaslAuthProcess(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_authServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestAuthChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAuthChallenge,
                    request_deserializer=ft__auth__pb2.auth_request.FromString,
                    response_serializer=ft__auth__pb2.auth_challenge.SerializeToString,
            ),
            'RespondAuthChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondAuthChallenge,
                    request_deserializer=ft__auth__pb2.auth_response.FromString,
                    response_serializer=ft__auth__pb2.auth_confirm.SerializeToString,
            ),
            'GetSupportedAuthMechanisms': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedAuthMechanisms,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__auth__pb2.auth_type_list.SerializeToString,
            ),
            'SaslAuthProcess': grpc.stream_stream_rpc_method_handler(
                    servicer.SaslAuthProcess,
                    request_deserializer=ft__auth__pb2.sasl_auth_data.FromString,
                    response_serializer=ft__auth__pb2.sasl_auth_data.SerializeToString,
            ),
            'VerifyToken': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyToken,
                    request_deserializer=ft__auth__pb2.sasl_auth_data.FromString,
                    response_serializer=ft__auth__pb2.sasl_auth_data.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foxtrot.auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestAuthChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.auth/RequestAuthChallenge',
            ft__auth__pb2.auth_request.SerializeToString,
            ft__auth__pb2.auth_challenge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondAuthChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.auth/RespondAuthChallenge',
            ft__auth__pb2.auth_response.SerializeToString,
            ft__auth__pb2.auth_confirm.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSupportedAuthMechanisms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.auth/GetSupportedAuthMechanisms',
            ft__types__pb2.empty.SerializeToString,
            ft__auth__pb2.auth_type_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaslAuthProcess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/foxtrot.auth/SaslAuthProcess',
            ft__auth__pb2.sasl_auth_data.SerializeToString,
            ft__auth__pb2.sasl_auth_data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.auth/VerifyToken',
            ft__auth__pb2.sasl_auth_data.SerializeToString,
            ft__auth__pb2.sasl_auth_data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

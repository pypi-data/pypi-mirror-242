Metadata-Version: 2.1
Name: jsonmodipy
Version: 0.0.6
Summary: Converts Python code into modular JSON and back.
Home-page: https://github.com/Hiveminds/jsonmodipy
Author: a-t-0
Author-email: no-email@no-email.org
Maintainer: a-t-0
Maintainer-email: no-email@no-email.org
License: AGPLv3
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Internet :: WWW/HTTP :: Browsers
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: pyannotate >=1.2.0
Requires-Dist: pytest-cov >=4.0.0
Requires-Dist: typeguard >=2.13.3

# jsonmodipy

[![Python 3.10][python_badge]](https://www.python.org/downloads/release/python-3100/)
[![License: AGPL v3][agpl3_badge]](https://www.gnu.org/licenses/agpl-3.0)
[![Code Style: Black][black_badge]](https://github.com/ambv/black)

Deconstructs Python code into modular JSON format and back. The JSON consists
of the following modular components:

- Docstring of a .py file
- Classes
- Class documentation
- Methods
- Method documentation
- Raw code

Before it outputs a Python file to a `.json` file, it verifies that it is able
to reconstruct the `.json` file back to its original file. It runs `pip`
package `black` to wash out any formatting differences between the original and
reconstructed Python files. This however, does not fix new line spacing.

## Usage

First build and install this pip package with:

```bash
conda env create --file environment.yml
rm -r dist
rm -r build
python -m build
pip install -e .
```

Or for a more lightweight installation procedure:

```sh
# Run the code
pip install typeguard
pip install libcst
pip install playwright
pip install playwright_stealth
pip install browsercontroller>=0.0.12
pip install selenium

# Install requirements to build pip package.
pip install setuptools
pip install wheel
pip install build

# Build and install the pip package.
rm -r dist
rm -r build
python -m build
pip install -e .
playwright install
```

### Login

Since this package currently uses ChatGPT as LLM, you need to login, you can do this in the browser that is launched. *After* your first login to ChatGPT, this python code may not recognise the environment directly, and fail. If so, please try calling this package once more, it stores your browser context, so after your first login, it should enter the expected environment and work.

Then a typical workflow consists of: `--get` target file source code, `--ask`
question about improving e.g. docstring of a function inside a class inside
that target file. Followed by `--apply` the parsed LLM output to that source
code, and verify it is ok.

### Get source code

This outputs the source code of a function to the terminal.

```sh
python -m jsonmodipy \
  --engine chatgpt3.5 \
  --channel browser \
  --get src_code \
  --filepath "/home/name/git/Hiveminds/Documentation-and-Test-Writing-Bot/testrepos/doctestbot/src/pythontemplate/class_and_classmethods.py" \
  --func-location .class.MyClass.function.class_method
```

### Ask

Then run (for example):

```sh
python -m jsonmodipy \
  --engine chatgpt3.5 \
  --channel browser \
  --ask docstring \
  --filepath \
  ../D*/doctestbot/src/pythontemplate/adder.py \
  --func-location .class.MyClass.function.class_method \
  --question-filepath example_questions/function_docstring.txt

python -m jsonmodipy \
--ask docstring \
--engine chatgpt3.5 \
--channel browser \
--filepath "/home/name/git/Hiveminds/Documentation-and-Test-Writing-Bot/testrepos/doctestbot/src/pythontemplate/class_and_classmethods.py" \
--func-location .class.MyClass.function.class_method \
--question-filepath /tmp/tempDir8174273976045778817/tempFile3376763204402042543.txt

```

## Apply

```
python -m jsonmodipy \
  --engine chatgpt3.5 \
  --channel browser \
  --apply docstring \
  --filepath \
  ../D*/testrepos/doctestbot/src/pythontemplate/adder.py \
  --function add_two \
  --iteration 1
```

## Get File Structures

```
python -m jsonmodipy --engine chatgpt3.5 \
--channel browser \
--set structure_json \
--structure-json-filepath "/home/name/git/Hiveminds/Documentation-and-Test-Writing-Bot/json_structures/=home=name=git=Hiveminds=Documentation-and-Test-Writing-Bot=testrepos=doctestbot.json" \
--filepaths "/home/name/git/Hiveminds/Documentation-and-Test-Writing-Bot/testrepos/doctestbot/setup.py;/home/name/git/Hiveminds/Documentation-and-Test-Writing-Bot/testrepos/doctestbot/src/pythontemplate/methods.py;/home/name/git/Hiveminds/Documentation-and-Test-Writing-Bot/testrepos/doctestbot/src/pythontemplate/parses_correctly.py"

```

Or:

```
python -m jsonmodipy \
  --engine chatgpt3.5 \
  --channel browser \
  --get func_names \
  --filepath \
  ../D*/testrepos/doctestbot/src/pythontemplate/adder.py
```

## Developer

```bash
pre-commit install
pre-commit autoupdate
pre-commit run --all
```

## Publish pip package

Build the pip package with:

```bash
pip install --upgrade pip setuptools wheel
pip install twine
```

Install the pip package locally with:

```bash
pip install -e .
```

Upload the pip package to the world with:

```bash
rm -r dist
rm -r build
python -m build
python3 -m twine upload dist/\*
```

## Sphinx Documentation

To auto-generate the Sphinx documentation for your Python project look into the
`/docs` folder.

- The `conf.py` is the configuration that is used to build your
  Sphinx documentation. Followed by:

```
make html
```

- The index.rst contains the main page and documentation file-structure.
- You can include other `.rst` files that automatically include the
  documentation of a Python file, for example in `docs/source/example.rst`. In
  this `.rst` file, you refer to a "module"=`.py` file in a path relative to the
  root of this project.

### Include .py file example

To add a file in `src/jsonmodipy/helper.py` you
create a `docs/source/some_name.rst` file with content:

```rst
.. _helper-module:

Helper Module
===============

.. automodule:: jsonmodipy.helper
  :members:
  :undoc-members:
  :show-inheritance:

And here you can just type additional text that will be displayed on the site.
```

and to the `index.rst` you add it like:

```rst
.. jsonmodipy documentation master file, created by

Welcome to jsonmodipy's documentation!
=========================================

.. toctree::
   :maxdepth: 2

   example
   some_name
```

### Generate Sphinx Documentation

Then to generate/update the Sphinx documentation you can run from the root dir:

```sh
cd docs
 [ -d "_build" ] && rm -r "_build" ; [ -d "html" ] && rm -r "html" ; \
  clear ; \
  python -m sphinx -T -E -b html -d _build/doctrees -D language=en . html
```

<!-- Un-wrapped URL's below (Mostly for Badges) -->

[agpl3_badge]: https://img.shields.io/badge/License-AGPL_v3-blue.svg
[black_badge]: https://img.shields.io/badge/code%20style-black-000000.svg
[python_badge]: https://img.shields.io/badge/python-3.6-blue.svg

# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-11-21T15:46:14+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Fylkesnavn(BaseModel):
    description: str
    type: str


class Fylkesnummer(BaseModel):
    description: str
    type: str


class Properties(BaseModel):
    fylkesnavn: Fylkesnavn
    fylkesnummer: Fylkesnummer


class FylkerEnkel(BaseModel):
    properties: Properties
    type: str


class Omrade(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties1(BaseModel):
    fylkesnavn: Fylkesnavn
    fylkesnummer: Fylkesnummer
    omrade: Omrade


class FylkerEnkelOmrade(BaseModel):
    properties: Properties1
    type: str


class Avgrensningsboks(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Items(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Kommuner(BaseModel):
    items: Items
    type: str


class Properties2(BaseModel):
    avgrensningsboks: Avgrensningsboks
    fylkesnavn: Fylkesnavn
    fylkesnummer: Fylkesnummer
    kommuner: Kommuner


class FylkerKommunerEnkel(BaseModel):
    properties: Properties2
    type: str


class Kommuner1(BaseModel):
    items: Items
    type: str


class Properties3(BaseModel):
    avgrensningsboks: Avgrensningsboks
    fylkesnavn: Fylkesnavn
    fylkesnummer: Fylkesnummer
    kommuner: Kommuner1


class FylkerKommunerFull(BaseModel):
    properties: Properties3
    type: str


class Kommunenavn(BaseModel):
    type: str


class Kommunenummer(BaseModel):
    description: str
    type: str


class Properties4(BaseModel):
    kommunenavn: Kommunenavn
    kommunenummer: Kommunenummer


class KomEnkel(BaseModel):
    properties: Properties4
    type: str


class KommunenavnNorsk(BaseModel):
    type: str


class Properties5(BaseModel):
    kommunenavn: Kommunenavn
    kommunenavnNorsk: KommunenavnNorsk
    kommunenummer: Kommunenummer


class KomEnkelNorskNavn(BaseModel):
    properties: Properties5
    type: str


class Properties6(BaseModel):
    kommunenavn: Kommunenavn
    kommunenummer: Kommunenummer
    omrade: Omrade


class KomEnkelOmrade(BaseModel):
    properties: Properties6
    type: str


class GyldigeNavn(BaseModel):
    items: Items
    type: str


class PunktIOmrade(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class SamiskForvaltningsomrade(BaseModel):
    type: str


class Properties7(BaseModel):
    avgrensningsboks: Avgrensningsboks
    fylkesnavn: Fylkesnavn
    fylkesnummer: Fylkesnummer
    gyldigeNavn: GyldigeNavn
    kommunenavn: Kommunenavn
    kommunenavnNorsk: KommunenavnNorsk
    kommunenummer: Kommunenummer
    punktIOmrade: PunktIOmrade
    samiskForvaltningsomrade: SamiskForvaltningsomrade


class KomFull(BaseModel):
    properties: Properties7
    type: str


class Properties8(BaseModel):
    fylkesnavn: Fylkesnavn
    fylkesnummer: Fylkesnummer
    kommunenavn: Kommunenavn
    kommunenummer: Kommunenummer


class KommuneFylkeEnkel(BaseModel):
    properties: Properties8
    type: str


class Navn(BaseModel):
    type: str


class Prioritet(BaseModel):
    format: str
    type: str


class Sprak(BaseModel):
    type: str


class Properties9(BaseModel):
    navn: Navn
    prioritet: Prioritet
    sprak: Sprak


class NavnFull(BaseModel):
    properties: Properties9
    type: str


class AntallTreff(BaseModel):
    format: str
    type: str


class Kommuner2(BaseModel):
    items: Items
    type: str


class Properties10(BaseModel):
    antallTreff: AntallTreff
    kommuner: Kommuner2


class NavnSokKommune(BaseModel):
    properties: Properties10
    type: str


class Items4(BaseModel):
    format: str
    type: str


class Coordinates(BaseModel):
    items: Items4
    type: str


class Crs(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Type(BaseModel):
    type: str


class Properties11(BaseModel):
    coordinates: Coordinates
    crs: Crs
    type: Type


class GeoJson(BaseModel):
    properties: Properties11
    type: str


class Properties13(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties12(BaseModel):
    properties: Properties13
    type: Type


class GeoJsonCrs(BaseModel):
    properties: Properties12
    type: str


class Name(BaseModel):
    type: str


class Properties14(BaseModel):
    name: Name


class GeoJsonEpsg(BaseModel):
    properties: Properties14
    type: str


class Geometry(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties16(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Properties15(BaseModel):
    geometry: Geometry
    properties: Properties16
    type: Type


class GeoJsonFeature(BaseModel):
    properties: Properties15
    type: str


class Items5(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Features(BaseModel):
    items: Items5
    type: str


class Properties17(BaseModel):
    features: Features
    type: Type


class GeoJsonFeatureCollection(BaseModel):
    properties: Properties17
    type: str


class Items8(BaseModel):
    format: str
    type: str


class Items7(BaseModel):
    items: Items8
    type: str


class Items6(BaseModel):
    items: Items7
    type: str


class Coordinates1(BaseModel):
    items: Items6
    type: str


class Properties18(BaseModel):
    coordinates: Coordinates1
    crs: Crs
    type: Type


class GeoJsonPoly(BaseModel):
    properties: Properties18
    type: str


class Coordinates2(BaseModel):
    items: Dict[str, Any]
    type: str


class Properties19(BaseModel):
    coordinates: Coordinates2
    crs: Crs
    type: Type


class GeoJsonRaw(BaseModel):
    properties: Properties19
    type: str


class Definitions(BaseModel):
    FylkerEnkel: FylkerEnkel
    FylkerEnkelOmrade: FylkerEnkelOmrade
    FylkerKommunerEnkel: FylkerKommunerEnkel
    FylkerKommunerFull: FylkerKommunerFull
    KomEnkel: KomEnkel
    KomEnkelNorskNavn: KomEnkelNorskNavn
    KomEnkelOmrade: KomEnkelOmrade
    KomFull: KomFull
    KommuneFylkeEnkel: KommuneFylkeEnkel
    NavnFull: NavnFull
    NavnSokKommune: NavnSokKommune
    geoJson: GeoJson
    geoJsonCrs: GeoJsonCrs
    geoJsonEpsg: GeoJsonEpsg
    geoJsonFeature: GeoJsonFeature
    geoJsonFeatureCollection: GeoJsonFeatureCollection
    geoJsonPoly: GeoJsonPoly
    geoJsonRaw: GeoJsonRaw


class Info(BaseModel):
    description: str
    title: str
    version: str


class Parameter(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str


class Schema(BaseModel):
    field_ref: str = Field(..., alias='$ref')


class Field200(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias='200')


class Get(BaseModel):
    description: str
    parameters: List[Parameter]
    responses: Responses
    summary: str


class FieldFylker(BaseModel):
    get: Get


class Parameter1(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str
    format: Optional[str] = None


class Field2001(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses1(BaseModel):
    field_200: Field2001 = Field(..., alias='200')


class Get1(BaseModel):
    description: str
    parameters: List[Parameter1]
    responses: Responses1
    summary: str


class FieldFylkerFylkesnummer(BaseModel):
    get: Get1


class Field2002(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses2(BaseModel):
    field_200: Field2002 = Field(..., alias='200')


class Get2(BaseModel):
    description: str
    parameters: List[Parameter1]
    responses: Responses2
    summary: str


class FieldFylkerFylkesnummerOmrade(BaseModel):
    get: Get2


class Field2003(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses3(BaseModel):
    field_200: Field2003 = Field(..., alias='200')


class Get3(BaseModel):
    description: str
    parameters: List[Parameter1]
    responses: Responses3
    summary: str


class FieldFylkerkommuner(BaseModel):
    get: Get3


class Parameter4(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str


class Field2004(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses4(BaseModel):
    field_200: Field2004 = Field(..., alias='200')


class Get4(BaseModel):
    description: str
    parameters: List[Parameter4]
    responses: Responses4
    summary: str


class FieldKommuner(BaseModel):
    get: Get4


class Parameter5(BaseModel):
    description: str
    format: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str


class Field2005(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses5(BaseModel):
    field_200: Field2005 = Field(..., alias='200')


class Get5(BaseModel):
    description: str
    parameters: List[Parameter5]
    responses: Responses5
    summary: str


class FieldKommunerIllustrasjonskart(BaseModel):
    get: Get5


class Parameter6(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str
    format: Optional[str] = None


class Field2006(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses6(BaseModel):
    field_200: Field2006 = Field(..., alias='200')


class Get6(BaseModel):
    description: str
    parameters: List[Parameter6]
    responses: Responses6
    summary: str


class FieldKommunerKommunenummer(BaseModel):
    get: Get6


class Parameter7(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str


class Field2007(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses7(BaseModel):
    field_200: Field2007 = Field(..., alias='200')


class Get7(BaseModel):
    description: str
    parameters: List[Parameter7]
    responses: Responses7
    summary: str


class FieldKommunerKommunenummerNabokommuner(BaseModel):
    get: Get7


class Parameter8(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str
    format: Optional[str] = None


class Field2008(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses8(BaseModel):
    field_200: Field2008 = Field(..., alias='200')


class Get8(BaseModel):
    description: str
    parameters: List[Parameter8]
    responses: Responses8
    summary: str


class FieldKommunerKommunenummerOmrade(BaseModel):
    get: Get8


class Parameter9(BaseModel):
    description: str
    format: Optional[str] = None
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str


class Field2009(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses9(BaseModel):
    field_200: Field2009 = Field(..., alias='200')


class Get9(BaseModel):
    description: str
    parameters: List[Parameter9]
    responses: Responses9
    summary: str


class FieldPunkt(BaseModel):
    get: Get9


class Parameter10(BaseModel):
    description: str
    in_: str = Field(..., alias='in')
    name: str
    required: bool
    type: str
    format: Optional[str] = None


class Field20010(BaseModel):
    description: str
    schema_: Schema = Field(..., alias='schema')


class Responses10(BaseModel):
    field_200: Field20010 = Field(..., alias='200')


class Get10(BaseModel):
    description: str
    parameters: List[Parameter10]
    responses: Responses10
    summary: str


class FieldSok(BaseModel):
    get: Get10


class Paths(BaseModel):
    field_fylker: FieldFylker = Field(..., alias='/fylker')
    field_fylker__fylkesnummer_: FieldFylkerFylkesnummer = Field(
        ..., alias='/fylker/{fylkesnummer}'
    )
    field_fylker__fylkesnummer__omrade: FieldFylkerFylkesnummerOmrade = Field(
        ..., alias='/fylker/{fylkesnummer}/omrade'
    )
    field_fylkerkommuner: FieldFylkerkommuner = Field(..., alias='/fylkerkommuner')
    field_kommuner: FieldKommuner = Field(..., alias='/kommuner')
    field_kommuner_illustrasjonskart: FieldKommunerIllustrasjonskart = Field(
        ..., alias='/kommuner/illustrasjonskart'
    )
    field_kommuner__kommunenummer_: FieldKommunerKommunenummer = Field(
        ..., alias='/kommuner/{kommunenummer}'
    )
    field_kommuner__kommunenummer__nabokommuner: FieldKommunerKommunenummerNabokommuner = Field(
        ..., alias='/kommuner/{kommunenummer}/nabokommuner'
    )
    field_kommuner__kommunenummer__omrade: FieldKommunerKommunenummerOmrade = Field(
        ..., alias='/kommuner/{kommunenummer}/omrade'
    )
    field_punkt: FieldPunkt = Field(..., alias='/punkt')
    field_sok: FieldSok = Field(..., alias='/sok')


class Model(BaseModel):
    basePath: str
    consumes: List[str]
    definitions: Definitions
    host: str
    info: Info
    paths: Paths
    produces: List[str]
    schemes: List[str]
    swagger: str

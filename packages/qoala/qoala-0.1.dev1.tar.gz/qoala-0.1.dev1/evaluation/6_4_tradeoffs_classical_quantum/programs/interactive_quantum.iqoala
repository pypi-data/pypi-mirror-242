META_START
    name: bob
    parameters: prepare_state, measure_state
    csockets: 0 -> alice
    epr_sockets: 
META_END

^b0 {type = CL}:
    csocket = assign_cval() : 0
    ack = assign_cval() : 42

^b1 {type = QL, deadlines = [b0: 1]}:
    tuple<> = run_subroutine(tuple<prepare_state>) : prepare

^b2 {type = CL, deadlines = [b0: 1]}:
    send_cmsg(csocket, ack)

^b3 {type = CC, deadlines = [b0: 1]}:
    angle = recv_cmsg(csocket)

^b10 {type = QL, deadlines = [b0: 1]}:
    tuple<outcome> = run_subroutine(tuple<measure_state>) : measure

^b11 {type = CL, deadlines = [b0: 1]}:
    return_result(outcome)


SUBROUTINE prepare
    params: state
    returns: 
    uses: 0
    keeps: 0
    request: 
  NETQASM_START
    // get state
    // 0: |+>, 1: |->
    // 2: |+i>, 3: |-i>
    // 4: |0>, 5: |1>
    load C0 @input[0]

    set Q0 0
    init Q0

    set C1 0
    bne C0 C1 3  // check state == 0
    // rotate to |+>
    rot_y Q0 8 4
    jmp 19

    set C1 1
    bne C0 C1 3  // check state == 1
    // rotate to |->
    rot_y Q0 24 4
    jmp 15

    set C1 2
    bne C0 C1 3  // check state == 2
    // rotate to |+i>
    rot_x Q0 24 4
    jmp 11

    set C1 3
    bne C0 C1 3  // check state == 3
    // rotate to |-i>
    rot_x Q0 8 4
    jmp 7

    set C1 4
    bne C0 C1 2  // check state == 4
    // rotate to |0>, i.e. no rotation
    jmp 4

    set C1 5
    bne C0 C1 2  // check state == 5
    // rotate to |1>
    rot_x Q0 16 4

    // no-op used as final instr to jump to
    jmp 1
  NETQASM_END

SUBROUTINE measure
    params: state
    returns: outcome
    uses: 0
    keeps: 
    request:
  NETQASM_START
    // get state
    // 0: |+>, 1: |->
    // 2: |+i>, 3: |-i>
    // 4: |0>, 5: |1>
    load C0 @input[0]

    set Q0 0

    set C1 0
    bne C0 C1 3  // check state == 0
    // measure +X
    rot_y Q1 24 4
    jmp 19

    set C1 1
    bne C0 C1 3  // check state == 1
    // measure -X
    rot_y Q1 8 4
    jmp 15

    set C1 2
    bne C0 C1 3  // check state == 2
    // measure +Y
    rot_x Q1 8 4
    jmp 11

    set C1 3
    bne C0 C1 3  // check state == 3
    // measure -Y
    rot_x Q1 24 4
    jmp 7

    set C1 4
    bne C0 C1 2  // check state == 4
    // measure +Z, i.e. no rotation
    jmp 4

    set C1 5
    bne C0 C1 2  // check state == 5
    // measure -Z
    rot_x Q1 16 4

    meas Q0 M0
    store M0 @output[0]
  NETQASM_END

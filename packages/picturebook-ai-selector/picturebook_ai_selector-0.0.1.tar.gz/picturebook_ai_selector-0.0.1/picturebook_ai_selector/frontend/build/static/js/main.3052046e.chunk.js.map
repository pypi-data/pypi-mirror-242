{"version":3,"sources":["../../../picturebookai_textselect/frontend/src/Annotation.tsx","../../../picturebookai_textselect/frontend/src/index.tsx"],"names":["Annotation","StreamlitComponentBase","constructor","arguments","state","text","actual_text","annotations","selectedReference","getCharactersCountUntilNode","node","parent","walker","document","createTreeWalker","body","NodeFilter","SHOW_TEXT","charCount","nextNode","_walker$currentNode$t","currentNode","textContent","length","handleMouseUp","async","_document$getSelectio","selection","getSelection","getRangeAt","toString","trim","_document$querySelect","selectedText","startIndex","startOffset","endIndex","endOffset","startAdjustment","endAdjustment","container","getElementById","this","startContainer","endContainer","querySelector","reStartIndex","charAt","match","undefined","reEndIndex","slice","finalStartIndex","finalEndIndex","isAnnotated","newAnnotations","removeAnnotation","setState","push","start","end","label","Streamlit","setComponentValue","renderText","componentDidMount","props","args","i","splice","addReference","index","selectReference","removeReference","_jsx","children","sort","a","b","forEach","annotation","substring","className","render","id","onMouseUp","oldrender","_jsxs","onClick","map","reference","_reference$","xmlns","viewBox","fill","fillRule","d","withStreamlitConnection","createRoot","MyComponent"],"mappings":"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","file":"static/js/main.3052046e.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from \"react\"\n\ninterface Reference {\n  start: number,\n  end: number,\n  label: string\n}\n\ninterface State {\n  text: string\n  actual_text: JSX.Element[]\n  selectedReference: number\n  annotations: Reference[][]\n}\n\nclass Annotation extends StreamlitComponentBase<State> {\n  state: State = {\n    text: \"\",\n    actual_text: [],\n    annotations: [],\n    selectedReference: 0\n  }\n\n  async componentDidMount(): Promise<void> {\n    const { text, annotations } = this.props.args\n\n    await this.setState({ text, annotations })\n    await this.setState({ actual_text: this.renderText() })\n    Streamlit.setComponentValue(annotations)\n  }\n\n  isAnnotated(start: number, end: number): boolean {\n    const { annotations, selectedReference } = this.state\n    \n    if (!annotations[selectedReference]) {\n      return false\n    }\n\n    for (let i = 0; i < annotations[selectedReference].length; i++) {\n      if (\n        (start >= annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end >= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end > annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start >= annotations[selectedReference][i].start && start < annotations[selectedReference][i].end && end >= annotations[selectedReference][i].end)\n        ) {\n        return true\n      }\n    }\n    return false\n  }\n\n  removeAnnotation(start: number, end: number): Reference[][] {\n    const { annotations, selectedReference } = this.state\n\n    for (let i = 0; i < annotations[selectedReference].length; i++) {\n      if (\n        (start >= annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end >= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end > annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start >= annotations[selectedReference][i].start && start < annotations[selectedReference][i].end && end >= annotations[selectedReference][i].end)\n        ) {\n        annotations[selectedReference].splice(i, 1)\n        break\n      }\n    }\n\n    if (annotations[selectedReference].length === 0) {\n      annotations.splice(selectedReference, 1)\n    }\n\n    return annotations\n  }\n\n  getCharactersCountUntilNode = (node: Node, parent: HTMLElement | null) => {\n    const walker = document.createTreeWalker(\n      parent || document.body,\n      NodeFilter.SHOW_TEXT,\n      null,\n    );\n    \n    let charCount = 0;\n    while (walker.nextNode()) {\n      if (walker.currentNode === node) {\n        break;\n      }\n      charCount += walker.currentNode.textContent?.length || 0;\n    }\n\n    return charCount;\n  }\n\n  handleMouseUp = async () => {\n    const selection = document.getSelection()?.getRangeAt(0)\n\n    if (selection && selection.toString().trim() !== \"\") {\n      let selectedText = selection.toString()\n\n      let startIndex = selection.startOffset\n      let endIndex = selection.endOffset\n      let startAdjustment = 0\n      let endAdjustment = 0\n\n      const container = document.getElementById(\"actual-text\")\n      const charsBeforeStart = this.getCharactersCountUntilNode(selection.startContainer, container);\n      const charsBeforeEnd = this.getCharactersCountUntilNode(selection.endContainer, container);\n\n      startIndex += charsBeforeStart\n      endIndex += charsBeforeEnd\n\n      const textContent = document.querySelector(\"#actual-text\")?.textContent || \"\"\n\n      const reStartIndex = /^[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g\n      while (!(textContent.charAt(startIndex + startAdjustment - 1) === \" \" || textContent.charAt(startIndex + startAdjustment - 1).match(reStartIndex)) && textContent?.charAt(startIndex + startAdjustment - 1) !== undefined) {\n        if (textContent.charAt(startIndex + startAdjustment - 1) === '') {\n          break\n        }\n\n        startAdjustment -= 1\n      }\n\n      const reEndIndex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]$/g\n      while (!(textContent.charAt(endIndex + endAdjustment) === \" \" || textContent.charAt(endIndex + endAdjustment).match(reEndIndex)) && textContent.charAt(endIndex + endAdjustment) !== undefined) {\n        if (textContent.charAt(endIndex + endAdjustment) === '') {\n          break\n        }\n\n        endAdjustment += 1\n      }\n\n      selectedText = textContent.slice(startIndex + startAdjustment, endIndex + endAdjustment) || \"\"\n\n      const { annotations, selectedReference } = this.state\n\n      if (!annotations[selectedReference]) {\n        annotations[selectedReference] = []\n      }\n\n      const finalStartIndex = startIndex + startAdjustment\n      const finalEndIndex = endIndex + endAdjustment\n\n      if (this.isAnnotated(finalStartIndex, finalEndIndex)) {\n        const newAnnotations = this.removeAnnotation(finalStartIndex, finalEndIndex)\n        await this.setState({ annotations: newAnnotations })\n      } else {\n        annotations[selectedReference].push({ start: finalStartIndex, end: finalEndIndex, label: selectedText })\n        await this.setState({ annotations })\n      }\n\n      Streamlit.setComponentValue(annotations)\n    }\n\n    this.setState({ actual_text: this.renderText() })\n  }\n\n  async addReference(): Promise<void> {\n    const { annotations } = this.state\n\n    // if selected annotation is empty do not add a new one\n    if (annotations[this.state.selectedReference] && annotations[this.state.selectedReference].length === 0) {\n      return\n    }\n\n    const index = annotations.length + 1\n    \n    if (!annotations[index]) {\n      annotations[index] = []\n    }\n\n    await this.setState({ \n      selectedReference: index,\n      annotations\n    })\n\n    this.setState({ actual_text: this.renderText() })\n  }\n\n  async selectReference(index: number): Promise<void> {\n    if (this.state.selectedReference === index || !this.state.annotations[index]) {\n      return\n    }\n\n    await this.setState({ selectedReference: index })\n    this.setState({ actual_text: this.renderText() })\n  }\n\n  async removeReference(index: number): Promise<void> {\n    const { annotations } = this.state\n\n    annotations.splice(index, 1)\n\n    await this.setState({ annotations, selectedReference: 0 })\n    this.setState({ actual_text: this.renderText() })\n    Streamlit.setComponentValue(annotations)\n  }\n\n  renderText(): JSX.Element[] {\n    const { text, annotations, selectedReference } = this.state\n    const actual_text: JSX.Element[] = []\n\n    if (!annotations[selectedReference]) {\n      return [<span>{text}</span>]\n    }\n\n\n    let start = 0\n\n    if (annotations[selectedReference].length > 0) {\n      annotations[selectedReference].sort((a, b) => a.start - b.start)\n    }\n\n    annotations[selectedReference].forEach((annotation, index) => {\n      actual_text.push(<span>{text.substring(start, annotation.start)}</span>)\n      actual_text.push(<span className=\"annotated bg-blue-500 text-gray-100\">{text.substring(annotation.start, annotation.end)}</span>)\n      start = annotation.end\n    })\n\n    actual_text.push(<span>{text.substring(start, text.length)}</span>)\n\n    return actual_text\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div>\n        {/* Remove or comment out the section that renders individual annotation spans */}\n  \n        {/* This is the main text area where annotated text is displayed */}\n        <div id=\"actual-text\" className=\"mt-5 h-full\" onMouseUp={this.handleMouseUp}>\n          {this.state.actual_text}\n        </div>\n      </div>\n    )\n  }\n\n  oldrender(): React.ReactNode {\n    return (\n      <div>\n        <div className=\"flex flex-row flex-wrap\">\n          <div\n            className=\"flex flex-wrap px-4 py-2 m-1 justify-between items-center text-sm font-medium cursor-pointer hover:bg-blue-600 hover:text-gray-100 bg-blue-500 text-gray-100\"\n            onClick={ () => this.addReference() }\n            >\n            <span>Add</span>\n          </div>\n          {this.state.annotations.map((reference, index) => (\n            <span\n              key={index}\n              className={\"flex flex-wrap pl-4 pr-2 py-2 m-1 justify-between items-center text-sm font-medium cursor-pointer hover:bg-blue-600 hover:text-gray-100\" + (this.state.selectedReference === index ? \" bg-blue-500 text-gray-100\" : \" bg-blue-900 text-gray-200\")}\n              onClick={() => { this.selectReference(index) }}\n            >\n              {reference[0]?.label}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5 ml-3 hover:text-gray-300\" viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                onClick={() => { this.removeReference(index) }}\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                />\n              </svg>\n            </span>\n          ))}\n        </div>\n        <div id=\"actual-text\" className=\"mt-5 h-full\" onMouseUp={this.handleMouseUp}>\n          {this.state.actual_text}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default withStreamlitConnection(Annotation)\n\n","import { createRoot } from 'react-dom/client';\nimport MyComponent from \"./Annotation\"\nimport React from 'react';\n\nconst container = document.getElementById(\"root\")\nconst root = createRoot(container)\n\nroot.render(<MyComponent />)\n"],"sourceRoot":""}
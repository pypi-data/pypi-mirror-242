# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: datatunerservice.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16\x64\x61tatunerservice.proto\x12\tdatatuner\"7\n\x0c\x44\x61taTunerDTO\x12\'\n\x08ruleSets\x18\x01 \x03(\x0b\x32\x15.datatuner.RuleSetDTO\"B\n\nRuleSetDTO\x12\x11\n\ttableName\x18\x01 \x01(\t\x12!\n\x05rules\x18\x02 \x03(\x0b\x32\x12.datatuner.RuleDTO\"\x80\x01\n\x07RuleDTO\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x13\n\x0boutputRatio\x18\x02 \x01(\x01\x12\x14\n\x0coutputAmount\x18\x03 \x01(\x05\x12%\n\x07\x63lauses\x18\x04 \x03(\x0b\x32\x14.datatuner.ClauseDTO\x12\x17\n\x0fgeneratedAmount\x18\x05 \x01(\x05\"\xe7\x01\n\tClauseDTO\x12\x12\n\ncolumnName\x18\x01 \x01(\t\x12<\n\x11\x63\x61tegoricalClause\x18\x14 \x01(\x0b\x32\x1f.datatuner.CategoricalClauseDTOH\x00\x12\x30\n\x0brangeClause\x18\x15 \x01(\x0b\x32\x19.datatuner.RangeClauseDTOH\x00\x12H\n\x17numericNormalDistClause\x18\x16 \x01(\x0b\x32%.datatuner.NumericNormalDistClauseDTOH\x00\x42\x0c\n\nClauseType\"-\n\x14\x43\x61tegoricalClauseDTO\x12\x15\n\rcategoryValue\x18\x01 \x01(\t\"4\n\x0eRangeClauseDTO\x12\x10\n\x08minValue\x18\x01 \x01(\t\x12\x10\n\x08maxValue\x18\x02 \x01(\t\"e\n\x1aNumericNormalDistClauseDTO\x12\x11\n\tmeanValue\x18\x01 \x01(\t\x12\x10\n\x08stdValue\x18\x02 \x01(\t\x12\x10\n\x08minValue\x18\x03 \x01(\t\x12\x10\n\x08maxValue\x18\x04 \x01(\t\"E\n\x11\x44TResultSchemaDTO\x12\x30\n\x0bresultTable\x18\x01 \x03(\x0b\x32\x1b.datatuner.DTResultTableDTO\"\x99\x01\n\x10\x44TResultTableDTO\x12\x11\n\ttableName\x18\x01 \x01(\t\x12)\n\x05rules\x18\x02 \x03(\x0b\x32\x1a.datatuner.DTResultRuleDTO\x12\r\n\x05score\x18\x03 \x01(\x01\x12\x38\n\x0crealMetaData\x18\x04 \x01(\x0b\x32\".datatuner.EffectedColHistMetaData\"\xd1\x03\n\x0f\x44TResultRuleDTO\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x37\n\x0esynthHistogram\x18\x02 \x03(\x0b\x32\x1f.datatuner.DTResultHistogramDTO\x12;\n\x12originalHistograms\x18\x03 \x03(\x0b\x32\x1f.datatuner.DTResultHistogramDTO\x12\r\n\x05score\x18\x04 \x01(\x01\x12\x14\n\x0coutputAmount\x18\x06 \x01(\x05\x12\x44\n\x12numEffectedColHist\x18\x07 \x01(\x0b\x32(.datatuner.DTEffectedColumnsHistogramDTO\x12\x41\n\x0f\x65\x66\x66\x65\x63tedColHist\x18\x08 \x01(\x0b\x32(.datatuner.DTEffectedColumnsHistogramDTO\x12%\n\x07\x63lauses\x18\t \x03(\x0b\x32\x14.datatuner.ClauseDTO\x12<\n\x12ifColumnHypothesis\x18\n \x03(\x0b\x32 .datatuner.IfColumnHypothesisDTO\x12\x13\n\x0bwhatColumns\x18\x0b \x03(\t\x12\x14\n\x0cgivenColumns\x18\x0c \x03(\t\"\x80\x01\n\x14\x44TResultHistogramDTO\x12\x32\n\thistogram\x18\x01 \x03(\x0b\x32\x1f.datatuner.DTColumnHistogramDTO\x12\r\n\x05score\x18\x02 \x01(\x01\x12%\n\x07\x63lauses\x18\x03 \x03(\x0b\x32\x14.datatuner.ClauseDTO\"e\n\x14\x44TColumnHistogramDTO\x12\x12\n\ncolumnName\x18\x01 \x01(\t\x12\x13\n\x0bxTickLabels\x18\x02 \x03(\t\x12\r\n\x05yData\x18\x03 \x03(\x01\x12\x15\n\risCategorical\x18\x04 \x01(\x08\"y\n\x1d\x44TEffectedColumnsHistogramDTO\x12\x10\n\x08xColName\x18\x01 \x03(\t\x12\r\n\x05yData\x18\x02 \x03(\x01\x12\x37\n\x0bsynMetaData\x18\x07 \x01(\x0b\x32\".datatuner.EffectedColHistMetaData\"\x87\x01\n\x17\x45\x66\x66\x65\x63tedColHistMetaData\x12\x13\n\x0b\x63olumnNames\x18\x01 \x03(\t\x12\x0c\n\x04mean\x18\x02 \x03(\x01\x12\x0b\n\x03std\x18\x03 \x03(\x01\x12\x0b\n\x03min\x18\x04 \x03(\x01\x12\x0b\n\x03max\x18\x05 \x03(\x01\x12\n\n\x02q1\x18\x06 \x03(\x01\x12\n\n\x02q2\x18\x07 \x03(\x01\x12\n\n\x02q3\x18\x08 \x03(\x01\"D\n\x0eWhatIfTunerDTO\x12\x32\n\rhypothesisSet\x18\x01 \x03(\x0b\x32\x1b.datatuner.HypothesisSetDTO\"\x80\x01\n\x10HypothesisSetDTO\x12\x11\n\ttableName\x18\x01 \x01(\t\x12\x14\n\x0cgivenColumns\x18\x02 \x03(\t\x12\x13\n\x0bwhatColumns\x18\x03 \x03(\t\x12.\n\nhypothesis\x18\x04 \x03(\x0b\x32\x1a.datatuner.IfHypothesisDTO\"t\n\x0fIfHypothesisDTO\x12\n\n\x02id\x18\x01 \x01(\x05\x12<\n\x12ifColumnHypothesis\x18\x02 \x03(\x0b\x32 .datatuner.IfColumnHypothesisDTO\x12\x17\n\x0fgeneratedAmount\x18\x03 \x01(\x05\"\x93\x03\n\x15IfColumnHypothesisDTO\x12\x12\n\ncolumnName\x18\x01 \x01(\t\x12J\n\x18\x63\x61tegoricalMapHypothesis\x18\x14 \x01(\x0b\x32&.datatuner.CategoricalHypothesisMapDTOH\x00\x12N\n\x1a\x63\x61tegoricalConstHypothesis\x18\x15 \x01(\x0b\x32(.datatuner.CategoricalHypothesisConstDTOH\x00\x12>\n\x11numericHypothesis\x18\x16 \x01(\x0b\x32!.datatuner.NumericalHypothesisDTOH\x00\x12\x36\n\x0e\x64\x61teHypothesis\x18\x17 \x01(\x0b\x32\x1c.datatuner.DateHypothesisDTOH\x00\x12@\n\x13\x64\x61teConstHypothesis\x18\x18 \x01(\x0b\x32!.datatuner.DateConstHypothesisDTOH\x00\x42\x10\n\x0eHypothesisType\".\n\x1d\x43\x61tegoricalHypothesisConstDTO\x12\r\n\x05value\x18\x01 \x01(\t\"M\n\x1b\x43\x61tegoricalHypothesisMapDTO\x12.\n\x0b\x63\x61tegoryMap\x18\x01 \x03(\x0b\x32\x19.datatuner.CategoryMapDTO\"I\n\x0e\x43\x61tegoryMapDTO\x12\x1d\n\x15originalCategoryValue\x18\x01 \x01(\t\x12\x18\n\x10newCategoryValue\x18\x02 \x01(\t\"}\n\x16NumericalHypothesisDTO\x12\r\n\x05value\x18\x01 \x01(\x01\x12\x30\n\tnumericOp\x18\x02 \x01(\x0e\x32\x1d.datatuner.NumericalOperation\x12\x10\n\x08minValue\x18\x03 \x01(\x01\x12\x10\n\x08maxValue\x18\x04 \x01(\x01\";\n\x11\x44\x61teHypothesisDTO\x12&\n\x07\x64\x61teMap\x18\x01 \x03(\x0b\x32\x15.datatuner.DateMapDTO\"B\n\nDateMapDTO\x12\r\n\x05value\x18\x01 \x01(\x01\x12%\n\x08\x64\x61teUnit\x18\x02 \x01(\x0e\x32\x13.datatuner.DateUnit\"\'\n\x16\x44\x61teConstHypothesisDTO\x12\r\n\x05value\x18\x01 \x01(\t\"[\n\x17TunerGroupsHistogramDTO\x12\x0c\n\x04\x63ols\x18\x01 \x03(\t\x12\x32\n\x07\x65ntries\x18\x02 \x03(\x0b\x32!.datatuner.TunerHistogramEntryDTO\"Q\n\x16TunerHistogramEntryDTO\x12\x0e\n\x06values\x18\x01 \x03(\t\x12\r\n\x05\x63ount\x18\x02 \x01(\x05\x12\x18\n\x10\x63ount_percentage\x18\x03 \x01(\x01*D\n\x12NumericalOperation\x12\x0c\n\x08\x41\x44\x44ITION\x10\x00\x12\x12\n\x0eMULTIPLICATION\x10\x01\x12\x0c\n\x08\x43ONSTANT\x10\x02*9\n\x08\x44\x61teUnit\x12\x08\n\x04\x44\x41YS\x10\x00\x12\t\n\x05HOURS\x10\x01\x12\x0b\n\x07MINUTES\x10\x02\x12\x0b\n\x07SECONDS\x10\x03\x42\x63\nIcom.datomize.datomizer.backend.components.management.dto.datatunerserviceB\x16\x44\x61taTunerServiceProtosb\x06proto3')

_NUMERICALOPERATION = DESCRIPTOR.enum_types_by_name['NumericalOperation']
NumericalOperation = enum_type_wrapper.EnumTypeWrapper(_NUMERICALOPERATION)
_DATEUNIT = DESCRIPTOR.enum_types_by_name['DateUnit']
DateUnit = enum_type_wrapper.EnumTypeWrapper(_DATEUNIT)
ADDITION = 0
MULTIPLICATION = 1
CONSTANT = 2
DAYS = 0
HOURS = 1
MINUTES = 2
SECONDS = 3


_DATATUNERDTO = DESCRIPTOR.message_types_by_name['DataTunerDTO']
_RULESETDTO = DESCRIPTOR.message_types_by_name['RuleSetDTO']
_RULEDTO = DESCRIPTOR.message_types_by_name['RuleDTO']
_CLAUSEDTO = DESCRIPTOR.message_types_by_name['ClauseDTO']
_CATEGORICALCLAUSEDTO = DESCRIPTOR.message_types_by_name['CategoricalClauseDTO']
_RANGECLAUSEDTO = DESCRIPTOR.message_types_by_name['RangeClauseDTO']
_NUMERICNORMALDISTCLAUSEDTO = DESCRIPTOR.message_types_by_name['NumericNormalDistClauseDTO']
_DTRESULTSCHEMADTO = DESCRIPTOR.message_types_by_name['DTResultSchemaDTO']
_DTRESULTTABLEDTO = DESCRIPTOR.message_types_by_name['DTResultTableDTO']
_DTRESULTRULEDTO = DESCRIPTOR.message_types_by_name['DTResultRuleDTO']
_DTRESULTHISTOGRAMDTO = DESCRIPTOR.message_types_by_name['DTResultHistogramDTO']
_DTCOLUMNHISTOGRAMDTO = DESCRIPTOR.message_types_by_name['DTColumnHistogramDTO']
_DTEFFECTEDCOLUMNSHISTOGRAMDTO = DESCRIPTOR.message_types_by_name['DTEffectedColumnsHistogramDTO']
_EFFECTEDCOLHISTMETADATA = DESCRIPTOR.message_types_by_name['EffectedColHistMetaData']
_WHATIFTUNERDTO = DESCRIPTOR.message_types_by_name['WhatIfTunerDTO']
_HYPOTHESISSETDTO = DESCRIPTOR.message_types_by_name['HypothesisSetDTO']
_IFHYPOTHESISDTO = DESCRIPTOR.message_types_by_name['IfHypothesisDTO']
_IFCOLUMNHYPOTHESISDTO = DESCRIPTOR.message_types_by_name['IfColumnHypothesisDTO']
_CATEGORICALHYPOTHESISCONSTDTO = DESCRIPTOR.message_types_by_name['CategoricalHypothesisConstDTO']
_CATEGORICALHYPOTHESISMAPDTO = DESCRIPTOR.message_types_by_name['CategoricalHypothesisMapDTO']
_CATEGORYMAPDTO = DESCRIPTOR.message_types_by_name['CategoryMapDTO']
_NUMERICALHYPOTHESISDTO = DESCRIPTOR.message_types_by_name['NumericalHypothesisDTO']
_DATEHYPOTHESISDTO = DESCRIPTOR.message_types_by_name['DateHypothesisDTO']
_DATEMAPDTO = DESCRIPTOR.message_types_by_name['DateMapDTO']
_DATECONSTHYPOTHESISDTO = DESCRIPTOR.message_types_by_name['DateConstHypothesisDTO']
_TUNERGROUPSHISTOGRAMDTO = DESCRIPTOR.message_types_by_name['TunerGroupsHistogramDTO']
_TUNERHISTOGRAMENTRYDTO = DESCRIPTOR.message_types_by_name['TunerHistogramEntryDTO']
DataTunerDTO = _reflection.GeneratedProtocolMessageType('DataTunerDTO', (_message.Message,), {
  'DESCRIPTOR' : _DATATUNERDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DataTunerDTO)
  })
_sym_db.RegisterMessage(DataTunerDTO)

RuleSetDTO = _reflection.GeneratedProtocolMessageType('RuleSetDTO', (_message.Message,), {
  'DESCRIPTOR' : _RULESETDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.RuleSetDTO)
  })
_sym_db.RegisterMessage(RuleSetDTO)

RuleDTO = _reflection.GeneratedProtocolMessageType('RuleDTO', (_message.Message,), {
  'DESCRIPTOR' : _RULEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.RuleDTO)
  })
_sym_db.RegisterMessage(RuleDTO)

ClauseDTO = _reflection.GeneratedProtocolMessageType('ClauseDTO', (_message.Message,), {
  'DESCRIPTOR' : _CLAUSEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.ClauseDTO)
  })
_sym_db.RegisterMessage(ClauseDTO)

CategoricalClauseDTO = _reflection.GeneratedProtocolMessageType('CategoricalClauseDTO', (_message.Message,), {
  'DESCRIPTOR' : _CATEGORICALCLAUSEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.CategoricalClauseDTO)
  })
_sym_db.RegisterMessage(CategoricalClauseDTO)

RangeClauseDTO = _reflection.GeneratedProtocolMessageType('RangeClauseDTO', (_message.Message,), {
  'DESCRIPTOR' : _RANGECLAUSEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.RangeClauseDTO)
  })
_sym_db.RegisterMessage(RangeClauseDTO)

NumericNormalDistClauseDTO = _reflection.GeneratedProtocolMessageType('NumericNormalDistClauseDTO', (_message.Message,), {
  'DESCRIPTOR' : _NUMERICNORMALDISTCLAUSEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.NumericNormalDistClauseDTO)
  })
_sym_db.RegisterMessage(NumericNormalDistClauseDTO)

DTResultSchemaDTO = _reflection.GeneratedProtocolMessageType('DTResultSchemaDTO', (_message.Message,), {
  'DESCRIPTOR' : _DTRESULTSCHEMADTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DTResultSchemaDTO)
  })
_sym_db.RegisterMessage(DTResultSchemaDTO)

DTResultTableDTO = _reflection.GeneratedProtocolMessageType('DTResultTableDTO', (_message.Message,), {
  'DESCRIPTOR' : _DTRESULTTABLEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DTResultTableDTO)
  })
_sym_db.RegisterMessage(DTResultTableDTO)

DTResultRuleDTO = _reflection.GeneratedProtocolMessageType('DTResultRuleDTO', (_message.Message,), {
  'DESCRIPTOR' : _DTRESULTRULEDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DTResultRuleDTO)
  })
_sym_db.RegisterMessage(DTResultRuleDTO)

DTResultHistogramDTO = _reflection.GeneratedProtocolMessageType('DTResultHistogramDTO', (_message.Message,), {
  'DESCRIPTOR' : _DTRESULTHISTOGRAMDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DTResultHistogramDTO)
  })
_sym_db.RegisterMessage(DTResultHistogramDTO)

DTColumnHistogramDTO = _reflection.GeneratedProtocolMessageType('DTColumnHistogramDTO', (_message.Message,), {
  'DESCRIPTOR' : _DTCOLUMNHISTOGRAMDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DTColumnHistogramDTO)
  })
_sym_db.RegisterMessage(DTColumnHistogramDTO)

DTEffectedColumnsHistogramDTO = _reflection.GeneratedProtocolMessageType('DTEffectedColumnsHistogramDTO', (_message.Message,), {
  'DESCRIPTOR' : _DTEFFECTEDCOLUMNSHISTOGRAMDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DTEffectedColumnsHistogramDTO)
  })
_sym_db.RegisterMessage(DTEffectedColumnsHistogramDTO)

EffectedColHistMetaData = _reflection.GeneratedProtocolMessageType('EffectedColHistMetaData', (_message.Message,), {
  'DESCRIPTOR' : _EFFECTEDCOLHISTMETADATA,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.EffectedColHistMetaData)
  })
_sym_db.RegisterMessage(EffectedColHistMetaData)

WhatIfTunerDTO = _reflection.GeneratedProtocolMessageType('WhatIfTunerDTO', (_message.Message,), {
  'DESCRIPTOR' : _WHATIFTUNERDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.WhatIfTunerDTO)
  })
_sym_db.RegisterMessage(WhatIfTunerDTO)

HypothesisSetDTO = _reflection.GeneratedProtocolMessageType('HypothesisSetDTO', (_message.Message,), {
  'DESCRIPTOR' : _HYPOTHESISSETDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.HypothesisSetDTO)
  })
_sym_db.RegisterMessage(HypothesisSetDTO)

IfHypothesisDTO = _reflection.GeneratedProtocolMessageType('IfHypothesisDTO', (_message.Message,), {
  'DESCRIPTOR' : _IFHYPOTHESISDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.IfHypothesisDTO)
  })
_sym_db.RegisterMessage(IfHypothesisDTO)

IfColumnHypothesisDTO = _reflection.GeneratedProtocolMessageType('IfColumnHypothesisDTO', (_message.Message,), {
  'DESCRIPTOR' : _IFCOLUMNHYPOTHESISDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.IfColumnHypothesisDTO)
  })
_sym_db.RegisterMessage(IfColumnHypothesisDTO)

CategoricalHypothesisConstDTO = _reflection.GeneratedProtocolMessageType('CategoricalHypothesisConstDTO', (_message.Message,), {
  'DESCRIPTOR' : _CATEGORICALHYPOTHESISCONSTDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.CategoricalHypothesisConstDTO)
  })
_sym_db.RegisterMessage(CategoricalHypothesisConstDTO)

CategoricalHypothesisMapDTO = _reflection.GeneratedProtocolMessageType('CategoricalHypothesisMapDTO', (_message.Message,), {
  'DESCRIPTOR' : _CATEGORICALHYPOTHESISMAPDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.CategoricalHypothesisMapDTO)
  })
_sym_db.RegisterMessage(CategoricalHypothesisMapDTO)

CategoryMapDTO = _reflection.GeneratedProtocolMessageType('CategoryMapDTO', (_message.Message,), {
  'DESCRIPTOR' : _CATEGORYMAPDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.CategoryMapDTO)
  })
_sym_db.RegisterMessage(CategoryMapDTO)

NumericalHypothesisDTO = _reflection.GeneratedProtocolMessageType('NumericalHypothesisDTO', (_message.Message,), {
  'DESCRIPTOR' : _NUMERICALHYPOTHESISDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.NumericalHypothesisDTO)
  })
_sym_db.RegisterMessage(NumericalHypothesisDTO)

DateHypothesisDTO = _reflection.GeneratedProtocolMessageType('DateHypothesisDTO', (_message.Message,), {
  'DESCRIPTOR' : _DATEHYPOTHESISDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DateHypothesisDTO)
  })
_sym_db.RegisterMessage(DateHypothesisDTO)

DateMapDTO = _reflection.GeneratedProtocolMessageType('DateMapDTO', (_message.Message,), {
  'DESCRIPTOR' : _DATEMAPDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DateMapDTO)
  })
_sym_db.RegisterMessage(DateMapDTO)

DateConstHypothesisDTO = _reflection.GeneratedProtocolMessageType('DateConstHypothesisDTO', (_message.Message,), {
  'DESCRIPTOR' : _DATECONSTHYPOTHESISDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.DateConstHypothesisDTO)
  })
_sym_db.RegisterMessage(DateConstHypothesisDTO)

TunerGroupsHistogramDTO = _reflection.GeneratedProtocolMessageType('TunerGroupsHistogramDTO', (_message.Message,), {
  'DESCRIPTOR' : _TUNERGROUPSHISTOGRAMDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.TunerGroupsHistogramDTO)
  })
_sym_db.RegisterMessage(TunerGroupsHistogramDTO)

TunerHistogramEntryDTO = _reflection.GeneratedProtocolMessageType('TunerHistogramEntryDTO', (_message.Message,), {
  'DESCRIPTOR' : _TUNERHISTOGRAMENTRYDTO,
  '__module__' : 'datatunerservice_pb2'
  # @@protoc_insertion_point(class_scope:datatuner.TunerHistogramEntryDTO)
  })
_sym_db.RegisterMessage(TunerHistogramEntryDTO)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\nIcom.datomize.datomizer.backend.components.management.dto.datatunerserviceB\026DataTunerServiceProtos'
  _NUMERICALOPERATION._serialized_start=3321
  _NUMERICALOPERATION._serialized_end=3389
  _DATEUNIT._serialized_start=3391
  _DATEUNIT._serialized_end=3448
  _DATATUNERDTO._serialized_start=37
  _DATATUNERDTO._serialized_end=92
  _RULESETDTO._serialized_start=94
  _RULESETDTO._serialized_end=160
  _RULEDTO._serialized_start=163
  _RULEDTO._serialized_end=291
  _CLAUSEDTO._serialized_start=294
  _CLAUSEDTO._serialized_end=525
  _CATEGORICALCLAUSEDTO._serialized_start=527
  _CATEGORICALCLAUSEDTO._serialized_end=572
  _RANGECLAUSEDTO._serialized_start=574
  _RANGECLAUSEDTO._serialized_end=626
  _NUMERICNORMALDISTCLAUSEDTO._serialized_start=628
  _NUMERICNORMALDISTCLAUSEDTO._serialized_end=729
  _DTRESULTSCHEMADTO._serialized_start=731
  _DTRESULTSCHEMADTO._serialized_end=800
  _DTRESULTTABLEDTO._serialized_start=803
  _DTRESULTTABLEDTO._serialized_end=956
  _DTRESULTRULEDTO._serialized_start=959
  _DTRESULTRULEDTO._serialized_end=1424
  _DTRESULTHISTOGRAMDTO._serialized_start=1427
  _DTRESULTHISTOGRAMDTO._serialized_end=1555
  _DTCOLUMNHISTOGRAMDTO._serialized_start=1557
  _DTCOLUMNHISTOGRAMDTO._serialized_end=1658
  _DTEFFECTEDCOLUMNSHISTOGRAMDTO._serialized_start=1660
  _DTEFFECTEDCOLUMNSHISTOGRAMDTO._serialized_end=1781
  _EFFECTEDCOLHISTMETADATA._serialized_start=1784
  _EFFECTEDCOLHISTMETADATA._serialized_end=1919
  _WHATIFTUNERDTO._serialized_start=1921
  _WHATIFTUNERDTO._serialized_end=1989
  _HYPOTHESISSETDTO._serialized_start=1992
  _HYPOTHESISSETDTO._serialized_end=2120
  _IFHYPOTHESISDTO._serialized_start=2122
  _IFHYPOTHESISDTO._serialized_end=2238
  _IFCOLUMNHYPOTHESISDTO._serialized_start=2241
  _IFCOLUMNHYPOTHESISDTO._serialized_end=2644
  _CATEGORICALHYPOTHESISCONSTDTO._serialized_start=2646
  _CATEGORICALHYPOTHESISCONSTDTO._serialized_end=2692
  _CATEGORICALHYPOTHESISMAPDTO._serialized_start=2694
  _CATEGORICALHYPOTHESISMAPDTO._serialized_end=2771
  _CATEGORYMAPDTO._serialized_start=2773
  _CATEGORYMAPDTO._serialized_end=2846
  _NUMERICALHYPOTHESISDTO._serialized_start=2848
  _NUMERICALHYPOTHESISDTO._serialized_end=2973
  _DATEHYPOTHESISDTO._serialized_start=2975
  _DATEHYPOTHESISDTO._serialized_end=3034
  _DATEMAPDTO._serialized_start=3036
  _DATEMAPDTO._serialized_end=3102
  _DATECONSTHYPOTHESISDTO._serialized_start=3104
  _DATECONSTHYPOTHESISDTO._serialized_end=3143
  _TUNERGROUPSHISTOGRAMDTO._serialized_start=3145
  _TUNERGROUPSHISTOGRAMDTO._serialized_end=3236
  _TUNERHISTOGRAMENTRYDTO._serialized_start=3238
  _TUNERHISTOGRAMENTRYDTO._serialized_end=3319
# @@protoc_insertion_point(module_scope)

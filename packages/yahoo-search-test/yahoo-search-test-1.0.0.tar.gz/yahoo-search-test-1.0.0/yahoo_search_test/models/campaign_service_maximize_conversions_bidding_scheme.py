# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class CampaignServiceMaximizeConversionsBiddingScheme(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_cpa': 'int',
        'is_remove_target_cpa': 'CampaignServiceIsRemove'
    }

    attribute_map = {
        'target_cpa': 'targetCpa',
        'is_remove_target_cpa': 'isRemoveTargetCpa'
    }

    def __init__(self, target_cpa=None, is_remove_target_cpa=None, local_vars_configuration=None):  # noqa: E501
        """CampaignServiceMaximizeConversionsBiddingScheme - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._target_cpa = None
        self._is_remove_target_cpa = None
        self.discriminator = None

        self.target_cpa = target_cpa
        self.is_remove_target_cpa = is_remove_target_cpa

    @property
    def target_cpa(self):
        """Gets the target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.  # noqa: E501

        <div lang=\"ja\">コンバージョン単価の目標値です。<br> ※制限値：1 ～ 800000<br> ※日本円のみの設定です。</div> <div lang=\"en\">Target CPA (JPY).<br> * Range limit: 1 - 800000</div>   # noqa: E501

        :return: The target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.  # noqa: E501
        :rtype: int
        """
        return self._target_cpa

    @target_cpa.setter
    def target_cpa(self, target_cpa):
        """Sets the target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.

        <div lang=\"ja\">コンバージョン単価の目標値です。<br> ※制限値：1 ～ 800000<br> ※日本円のみの設定です。</div> <div lang=\"en\">Target CPA (JPY).<br> * Range limit: 1 - 800000</div>   # noqa: E501

        :param target_cpa: The target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.  # noqa: E501
        :type: int
        """

        self._target_cpa = target_cpa

    @property
    def is_remove_target_cpa(self):
        """Gets the is_remove_target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.  # noqa: E501


        :return: The is_remove_target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.  # noqa: E501
        :rtype: CampaignServiceIsRemove
        """
        return self._is_remove_target_cpa

    @is_remove_target_cpa.setter
    def is_remove_target_cpa(self, is_remove_target_cpa):
        """Sets the is_remove_target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.


        :param is_remove_target_cpa: The is_remove_target_cpa of this CampaignServiceMaximizeConversionsBiddingScheme.  # noqa: E501
        :type: CampaignServiceIsRemove
        """

        self._is_remove_target_cpa = is_remove_target_cpa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignServiceMaximizeConversionsBiddingScheme):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignServiceMaximizeConversionsBiddingScheme):
            return True

        return self.to_dict() != other.to_dict()

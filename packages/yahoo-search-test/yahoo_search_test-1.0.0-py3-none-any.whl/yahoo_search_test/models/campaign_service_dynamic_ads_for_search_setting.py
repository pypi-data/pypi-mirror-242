# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class CampaignServiceDynamicAdsForSearchSetting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feed_ids': 'list[int]',
        'page_feed_asset_set_ids': 'list[int]',
        'domain': 'str',
        'das_use_urls_type': 'CampaignServiceDasUseUrlsType'
    }

    attribute_map = {
        'feed_ids': 'feedIds',
        'page_feed_asset_set_ids': 'pageFeedAssetSetIds',
        'domain': 'domain',
        'das_use_urls_type': 'dasUseUrlsType'
    }

    def __init__(self, feed_ids=None, page_feed_asset_set_ids=None, domain=None, das_use_urls_type=None, local_vars_configuration=None):  # noqa: E501
        """CampaignServiceDynamicAdsForSearchSetting - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feed_ids = None
        self._page_feed_asset_set_ids = None
        self._domain = None
        self._das_use_urls_type = None
        self.discriminator = None

        self.feed_ids = feed_ids
        self.page_feed_asset_set_ids = page_feed_asset_set_ids
        self.domain = domain
        self.das_use_urls_type = das_use_urls_type

    @property
    def feed_ids(self):
        """Gets the feed_ids of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501

        <div lang=\"ja\">   キャンペーンで使用するページフィードIDです。<br>   ※現在このフィールドは参照のみ可能です。ページフィードを設定する場合は、pageFeedAssetSetIdsをご利用ください。 </div> <div lang=\"en\">   Page Feed ID for campaign.<br>   *Currently, this field is read-only. To set up page feeds, please use pageFeedAssetSetIds. </div>   # noqa: E501

        :return: The feed_ids of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :rtype: list[int]
        """
        return self._feed_ids

    @feed_ids.setter
    def feed_ids(self, feed_ids):
        """Sets the feed_ids of this CampaignServiceDynamicAdsForSearchSetting.

        <div lang=\"ja\">   キャンペーンで使用するページフィードIDです。<br>   ※現在このフィールドは参照のみ可能です。ページフィードを設定する場合は、pageFeedAssetSetIdsをご利用ください。 </div> <div lang=\"en\">   Page Feed ID for campaign.<br>   *Currently, this field is read-only. To set up page feeds, please use pageFeedAssetSetIds. </div>   # noqa: E501

        :param feed_ids: The feed_ids of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :type: list[int]
        """

        self._feed_ids = feed_ids

    @property
    def page_feed_asset_set_ids(self):
        """Gets the page_feed_asset_set_ids of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501

        <div lang=\"ja\">   キャンペーンで使用するページフィードアセットセットIDです。<br>   ADD時およびSET時、DasUseUrlsTypeがUSE_SUPPLIED_URLS_ONLYまたはDOMAIN_AND_SUPPLIED_URLSの場合、このフィールドは必須となります。 </div> <div lang=\"en\">   PageFeedAssetSet ID for campaign.<br>   In ADD and SET operation, If DasUseUrlsType is USE_SUPPLIED_URLS_ONLY or DOMAIN_AND_SUPPLIED_URLS, this field is required. </div>   # noqa: E501

        :return: The page_feed_asset_set_ids of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :rtype: list[int]
        """
        return self._page_feed_asset_set_ids

    @page_feed_asset_set_ids.setter
    def page_feed_asset_set_ids(self, page_feed_asset_set_ids):
        """Sets the page_feed_asset_set_ids of this CampaignServiceDynamicAdsForSearchSetting.

        <div lang=\"ja\">   キャンペーンで使用するページフィードアセットセットIDです。<br>   ADD時およびSET時、DasUseUrlsTypeがUSE_SUPPLIED_URLS_ONLYまたはDOMAIN_AND_SUPPLIED_URLSの場合、このフィールドは必須となります。 </div> <div lang=\"en\">   PageFeedAssetSet ID for campaign.<br>   In ADD and SET operation, If DasUseUrlsType is USE_SUPPLIED_URLS_ONLY or DOMAIN_AND_SUPPLIED_URLS, this field is required. </div>   # noqa: E501

        :param page_feed_asset_set_ids: The page_feed_asset_set_ids of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :type: list[int]
        """

        self._page_feed_asset_set_ids = page_feed_asset_set_ids

    @property
    def domain(self):
        """Gets the domain of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501

        <div lang=\"ja\">   ドメインです。<br>   ADDおよびSET時、DasUseUrlsTypeがTOP_DOMAIN_ONLYまたはDOMAIN_AND_SUPPLIED_URLSの場合、このフィールドは必須となります。 </div> <div lang=\"en\">   Domain.<br>   If DasUseUrlsType is TOP_DOMAIN_ONLY or DOMAIN_AND_SUPPLIED_URLS, this field is required in ADD and SET operation. </div>   # noqa: E501

        :return: The domain of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CampaignServiceDynamicAdsForSearchSetting.

        <div lang=\"ja\">   ドメインです。<br>   ADDおよびSET時、DasUseUrlsTypeがTOP_DOMAIN_ONLYまたはDOMAIN_AND_SUPPLIED_URLSの場合、このフィールドは必須となります。 </div> <div lang=\"en\">   Domain.<br>   If DasUseUrlsType is TOP_DOMAIN_ONLY or DOMAIN_AND_SUPPLIED_URLS, this field is required in ADD and SET operation. </div>   # noqa: E501

        :param domain: The domain of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def das_use_urls_type(self):
        """Gets the das_use_urls_type of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501


        :return: The das_use_urls_type of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :rtype: CampaignServiceDasUseUrlsType
        """
        return self._das_use_urls_type

    @das_use_urls_type.setter
    def das_use_urls_type(self, das_use_urls_type):
        """Sets the das_use_urls_type of this CampaignServiceDynamicAdsForSearchSetting.


        :param das_use_urls_type: The das_use_urls_type of this CampaignServiceDynamicAdsForSearchSetting.  # noqa: E501
        :type: CampaignServiceDasUseUrlsType
        """

        self._das_use_urls_type = das_use_urls_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignServiceDynamicAdsForSearchSetting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignServiceDynamicAdsForSearchSetting):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class CampaignTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'bid_multiplier': 'float',
        'campaign_id': 'int',
        'campaign_name': 'str',
        'target': 'CampaignTargetServiceTarget'
    }

    attribute_map = {
        'account_id': 'accountId',
        'bid_multiplier': 'bidMultiplier',
        'campaign_id': 'campaignId',
        'campaign_name': 'campaignName',
        'target': 'target'
    }

    def __init__(self, account_id=None, bid_multiplier=None, campaign_id=None, campaign_name=None, target=None, local_vars_configuration=None):  # noqa: E501
        """CampaignTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._bid_multiplier = None
        self._campaign_id = None
        self._campaign_name = None
        self._target = None
        self.discriminator = None

        self.account_id = account_id
        self.bid_multiplier = bid_multiplier
        self.campaign_id = campaign_id
        self.campaign_name = campaign_name
        self.target = target

    @property
    def account_id(self):
        """Gets the account_id of this CampaignTarget.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。<br> このフィールドは、いずれの場合でも必須となります。</div> <div lang=\"en\">Account ID.<br> This field is required in any cases.</div>   # noqa: E501

        :return: The account_id of this CampaignTarget.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CampaignTarget.

        <div lang=\"ja\">アカウントIDです。<br> このフィールドは、いずれの場合でも必須となります。</div> <div lang=\"en\">Account ID.<br> This field is required in any cases.</div>   # noqa: E501

        :param account_id: The account_id of this CampaignTarget.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def bid_multiplier(self):
        """Gets the bid_multiplier of this CampaignTarget.  # noqa: E501

        <div lang=\"ja\">   入札価格調整率です。0.10～10.00まで指定できます。<br>   0を指定した場合、広告は配信されません。<br>   また、入札価格調整率の値は小数点第二位まで指定可能です。<br>   このフィールドは省略可能となります。その際、デフォルト設定値は1.0となります。 </div> <div lang=\"en\">   Bid adjustment rate.<br>   Can be specified between  0.10 to 10.00.<br>   When specified &#39;0&#39;, the ad will not be delivered.<br>   Bid adjustment rate can be specified up to two decimal places.<br>   This field is optional. The default value will be 1.0. </div>   # noqa: E501

        :return: The bid_multiplier of this CampaignTarget.  # noqa: E501
        :rtype: float
        """
        return self._bid_multiplier

    @bid_multiplier.setter
    def bid_multiplier(self, bid_multiplier):
        """Sets the bid_multiplier of this CampaignTarget.

        <div lang=\"ja\">   入札価格調整率です。0.10～10.00まで指定できます。<br>   0を指定した場合、広告は配信されません。<br>   また、入札価格調整率の値は小数点第二位まで指定可能です。<br>   このフィールドは省略可能となります。その際、デフォルト設定値は1.0となります。 </div> <div lang=\"en\">   Bid adjustment rate.<br>   Can be specified between  0.10 to 10.00.<br>   When specified &#39;0&#39;, the ad will not be delivered.<br>   Bid adjustment rate can be specified up to two decimal places.<br>   This field is optional. The default value will be 1.0. </div>   # noqa: E501

        :param bid_multiplier: The bid_multiplier of this CampaignTarget.  # noqa: E501
        :type: float
        """

        self._bid_multiplier = bid_multiplier

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CampaignTarget.  # noqa: E501

        <div lang=\"ja\">キャンペーンIDです。<br> このフィールドは、いずれの場合でも必須となります。</div> <div lang=\"en\">Campaign ID.<br> This field is required in any cases.</div>   # noqa: E501

        :return: The campaign_id of this CampaignTarget.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CampaignTarget.

        <div lang=\"ja\">キャンペーンIDです。<br> このフィールドは、いずれの場合でも必須となります。</div> <div lang=\"en\">Campaign ID.<br> This field is required in any cases.</div>   # noqa: E501

        :param campaign_id: The campaign_id of this CampaignTarget.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this CampaignTarget.  # noqa: E501

        <div lang=\"ja\">キャンペーン名です。</div> <div lang=\"en\">Campaign name.</div>   # noqa: E501

        :return: The campaign_name of this CampaignTarget.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this CampaignTarget.

        <div lang=\"ja\">キャンペーン名です。</div> <div lang=\"en\">Campaign name.</div>   # noqa: E501

        :param campaign_name: The campaign_name of this CampaignTarget.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def target(self):
        """Gets the target of this CampaignTarget.  # noqa: E501


        :return: The target of this CampaignTarget.  # noqa: E501
        :rtype: CampaignTargetServiceTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CampaignTarget.


        :param target: The target of this CampaignTarget.  # noqa: E501
        :type: CampaignTargetServiceTarget
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignTarget):
            return True

        return self.to_dict() != other.to_dict()

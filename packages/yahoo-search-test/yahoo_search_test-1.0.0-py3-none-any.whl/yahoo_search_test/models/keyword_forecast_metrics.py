# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api_v12.configuration import Configuration


class KeywordForecastMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keyword': 'str',
        'impressions': 'float',
        'ctr': 'float',
        'average_cpc': 'float',
        'clicks': 'float',
        'cost': 'float'
    }

    attribute_map = {
        'keyword': 'keyword',
        'impressions': 'impressions',
        'ctr': 'ctr',
        'average_cpc': 'averageCpc',
        'clicks': 'clicks',
        'cost': 'cost'
    }

    def __init__(self, keyword=None, impressions=None, ctr=None, average_cpc=None, clicks=None, cost=None, local_vars_configuration=None):  # noqa: E501
        """KeywordForecastMetrics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._keyword = None
        self._impressions = None
        self._ctr = None
        self._average_cpc = None
        self._clicks = None
        self._cost = None
        self.discriminator = None

        self.keyword = keyword
        self.impressions = impressions
        self.ctr = ctr
        self.average_cpc = average_cpc
        self.clicks = clicks
        self.cost = cost

    @property
    def keyword(self):
        """Gets the keyword of this KeywordForecastMetrics.  # noqa: E501

        <div lang=\"ja\">キーワードです。</div> <div lang=\"en\">Keywords.</div>   # noqa: E501

        :return: The keyword of this KeywordForecastMetrics.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this KeywordForecastMetrics.

        <div lang=\"ja\">キーワードです。</div> <div lang=\"en\">Keywords.</div>   # noqa: E501

        :param keyword: The keyword of this KeywordForecastMetrics.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def impressions(self):
        """Gets the impressions of this KeywordForecastMetrics.  # noqa: E501

        <div lang=\"ja\">インプレッション数です。</div> <div lang=\"en\">Number of impression.</div>   # noqa: E501

        :return: The impressions of this KeywordForecastMetrics.  # noqa: E501
        :rtype: float
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this KeywordForecastMetrics.

        <div lang=\"ja\">インプレッション数です。</div> <div lang=\"en\">Number of impression.</div>   # noqa: E501

        :param impressions: The impressions of this KeywordForecastMetrics.  # noqa: E501
        :type: float
        """

        self._impressions = impressions

    @property
    def ctr(self):
        """Gets the ctr of this KeywordForecastMetrics.  # noqa: E501

        <div lang=\"ja\">クリック率です。</div> <div lang=\"en\">Click rate.</div>   # noqa: E501

        :return: The ctr of this KeywordForecastMetrics.  # noqa: E501
        :rtype: float
        """
        return self._ctr

    @ctr.setter
    def ctr(self, ctr):
        """Sets the ctr of this KeywordForecastMetrics.

        <div lang=\"ja\">クリック率です。</div> <div lang=\"en\">Click rate.</div>   # noqa: E501

        :param ctr: The ctr of this KeywordForecastMetrics.  # noqa: E501
        :type: float
        """

        self._ctr = ctr

    @property
    def average_cpc(self):
        """Gets the average_cpc of this KeywordForecastMetrics.  # noqa: E501

        <div lang=\"ja\">平均CPCです。</div> <div lang=\"en\">Average CPC.</div>   # noqa: E501

        :return: The average_cpc of this KeywordForecastMetrics.  # noqa: E501
        :rtype: float
        """
        return self._average_cpc

    @average_cpc.setter
    def average_cpc(self, average_cpc):
        """Sets the average_cpc of this KeywordForecastMetrics.

        <div lang=\"ja\">平均CPCです。</div> <div lang=\"en\">Average CPC.</div>   # noqa: E501

        :param average_cpc: The average_cpc of this KeywordForecastMetrics.  # noqa: E501
        :type: float
        """

        self._average_cpc = average_cpc

    @property
    def clicks(self):
        """Gets the clicks of this KeywordForecastMetrics.  # noqa: E501

        <div lang=\"ja\">クリック数です。</div> <div lang=\"en\">Number of click.</div>   # noqa: E501

        :return: The clicks of this KeywordForecastMetrics.  # noqa: E501
        :rtype: float
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this KeywordForecastMetrics.

        <div lang=\"ja\">クリック数です。</div> <div lang=\"en\">Number of click.</div>   # noqa: E501

        :param clicks: The clicks of this KeywordForecastMetrics.  # noqa: E501
        :type: float
        """

        self._clicks = clicks

    @property
    def cost(self):
        """Gets the cost of this KeywordForecastMetrics.  # noqa: E501

        <div lang=\"ja\">コストです。</div> <div lang=\"en\">Cost.</div>   # noqa: E501

        :return: The cost of this KeywordForecastMetrics.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this KeywordForecastMetrics.

        <div lang=\"ja\">コストです。</div> <div lang=\"en\">Cost.</div>   # noqa: E501

        :param cost: The cost of this KeywordForecastMetrics.  # noqa: E501
        :type: float
        """

        self._cost = cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordForecastMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeywordForecastMetrics):
            return True

        return self.to_dict() != other.to_dict()

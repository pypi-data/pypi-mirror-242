# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.user_id import UserId
from ...tasks.resources.commons.types.task_category import TaskCategory
from ...tasks.resources.commons.types.task_type import TaskType


class CreateTaskConfig(pydantic.BaseModel):
    """
    Configuration for creating a task when moving a claim to a work queue
    """

    category: typing.Optional[TaskCategory]
    task_type: TaskType
    assignee: typing.Optional[UserId]
    context: str
    action_required: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}

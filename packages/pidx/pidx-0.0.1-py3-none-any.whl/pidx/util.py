# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_util.ipynb.

# %% auto 0
__all__ = ['shiftcycle', 'dummydf', 'dfds', 'dfdsidx', 'getdfdsloc', 'getdfdsiloc', 'safeidx', 'safeloc', 'safeiloc', 'wrapidx',
           'filtidx', 'mergebools']

# %% ../nbs/01_util.ipynb 6
import string
from inspect import signature as getsig, getfullargspec as getspec
from itertools import islice, cycle

# %% ../nbs/01_util.ipynb 8
from typing import Optional

# %% ../nbs/01_util.ipynb 11
#| export

# %% ../nbs/01_util.ipynb 13
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/01_util.ipynb 15
#| export


# %% ../nbs/01_util.ipynb 17
#| export


# %% ../nbs/01_util.ipynb 19
from atyp import (DataFrame, DataFrameQ, DatasetQ, IndexQ, IndexLike, IterBool, NPArray, IndexLikeQ, )
from chck import isnone, notnone, isboolidx, isidxlike, isiter, istuple
from atup import argtup

# %% ../nbs/01_util.ipynb 21
# from pidx.grds import isboolidx

# %% ../nbs/01_util.ipynb 23
def shiftcycle(c: str = 'x', chars: str = string.ascii_lowercase):
    shift = len(chars) - chars.index(c)
    beg = 1 * len(chars) - shift
    end = 2 * len(chars) - shift  
    return ''.join(islice(cycle(chars), beg, end))

def dummydf(
    nrecs: int = 10,
    ncols: int = 3,
    ncats: int = 3,
    colchars: str = shiftcycle('x'),
    catchars: str = string.ascii_lowercase,
) -> DataFrame:
    cols = list(colchars[:ncols])
    cats = list(catchars[:ncats])
    data = np.random.randint(0, ncats, (nrecs, len(cols)))
    index = np.random.choice(cats, nrecs)
    return pd.DataFrame(data, index=index, columns=cols)

# %% ../nbs/01_util.ipynb 26
def dfds(df: DataFrameQ = None, ds: DatasetQ = None) -> DataFrameQ:
    '''Get the df from either `df` or `ds.df`'''
    return getattr(ds, 'df', df)

def dfdsidx(df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Get the df's index from either `df` or `ds.df`'''
    return getattr(dfds(df, ds), 'index', None)

def getdfdsloc(df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Get the df's `LocIndexer` from either `df` or `ds.df`'''
    return getattr(dfds(df, ds), 'loc', None)

def getdfdsiloc(df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Get the df's `iLocIndexer` from either `df` or `ds.df`'''
    return getattr(dfds(df, ds), 'iloc', None)

# %% ../nbs/01_util.ipynb 28
def safeidx(idx: IndexLikeQ = None, df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Check that idx exists or get the df's index from either `df` or `ds.df`'''
    if isnone(idx) or not isidxlike(idx): return dfdsidx(df, ds)
    return idx

def safeloc(idx: IndexLikeQ = None, df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Check that idx exists then apply it to the `LocIndexer` from either `df` or `ds.df`'''
    idx = safeidx(idx, df, ds) if isnone(idx) else idx
    return getdfdsloc(df, ds)[idx]

def safeiloc(idx: IndexLikeQ = None, df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Check that idx exists then apply it to the `iLocIndexer` from either `df` or `ds.df`'''
    idx = safeidx(idx, df, ds) if isnone(idx) else idx
    return getdfdsiloc(df, ds)[idx]


# %% ../nbs/01_util.ipynb 30
def wrapidx(idx: IndexLikeQ = None) -> IndexLike:
    '''Wrap idx in a tuple if it's not already a tuple or an index-like object'''
    idxlen = len(argtup(idx))
    if idxlen == 1 and not (isidxlike(idx) or istuple(idx)):
        idx = list((idx, ))
    return idx

def filtidx(vals: IndexLikeQ = None, df: DataFrameQ = None, didx: IndexLikeQ = None, ds: DatasetQ = None) -> IndexLike:
    '''Filter vals by didx or df's index'''
    vals = wrapidx(vals)    
    if didx is None: didx = dfdsidx(df := dfds(df, ds))
    return type(vals)(filter(lambda x: x in didx, vals))

# %% ../nbs/01_util.ipynb 32
def mergebools(idx: IterBool, df: DataFrameQ = None, ds: DatasetQ = None) -> NPArray:
    '''Merge boolean indexes.'''
    if not isiter(idx):  return np.zeros_like(dfdsidx(df, ds), dtype=bool)
    elif isboolidx(idx): return np.logical_or.reduce(np.vstack(idx))
    return np.logical_or.reduce(idx)

# %% ../nbs/01_util.ipynb 34
#| export

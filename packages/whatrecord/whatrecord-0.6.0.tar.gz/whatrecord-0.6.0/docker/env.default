# This is the port the vue.js frontend listens on. When run with docker, you
# can access it via http://localhost:${FRONTEND_PORT}.
WHATRECORD_FRONTEND_PORT=8896

# This is the container name, so the frontend can communicate with the backend
WHATRECORD_API_HOST=whatrecord

# Alternatively, if run locally or on a different host, you could make this
# the hostname/IP address:
# WHATRECORD_API_HOST=127.0.0.1
# This is the port the backend (whatrecord server) listens on. You can
# access it via localhost:${API_PORT}.
WHATRECORD_API_PORT=8895

# Finally, as an alternative mode for the vue frontend you can run in a
# backend-less mode (i.e., no Python API server process).  It requires that
# WHATRECORD_CACHE_FILE_URL point to the gzipped JSON object generated first by
# the whatrecord server. This will override WHATRECORD_API_HOST.
# WHATRECORD_CACHE_FILE_URL=/cache.json.gz

# These are the default plugins to enable.  This is used by the server
# to selectively enable the plugins, and the frontend to selectively
# display them to the user. Other plugins include:
# twincat_pytmc epicsarch netconfig
WHATRECORD_PLUGINS="happi twincat_pytmc"

# The default version to use for IOCs
WHATRECORD_BASE_VERSION=3.15

# Maximum number of records to return in a match query:
WHATRECORD_MAX_RECORDS=200

# The path to gdb, for binary introspection:
WHATRECORD_GDB_PATH=gdb

# The path for caching IOC information (a docker volume):
WHATRECORD_CACHE_PATH=/var/lib/whatrecord/cache

# How quickly to scan the startup scripts / files for changes:
WHATRECORD_SERVER_SCAN_PERIOD=600
# Threshold for autosave file reloading (on demand, not all the time):
WHATRECORD_AUTOSAVE_RELOAD_PERIOD=60

# These are optional to show off the plugins:
HAPPI_CFG=/usr/share/whatrecord/support/happi.cfg

# A placeholder for the archiver appliance viewer URL (not supported in this
# demo):
WHATRECORD_ARCHIVER_URL=http://localhost/

# PLC source code location:
BLARK_TWINCAT_ROOT=/usr/local/src/whatrecord/whatrecord/tests/blark_root

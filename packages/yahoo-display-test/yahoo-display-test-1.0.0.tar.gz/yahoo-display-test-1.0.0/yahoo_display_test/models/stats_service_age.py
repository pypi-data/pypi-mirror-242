# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class StatsServiceAge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    OLD_GT_RANGE13_14 = "OLD_GT_RANGE13_14"
    OLD_GT_RANGE15_17 = "OLD_GT_RANGE15_17"
    OLD_GT_RANGE18_19 = "OLD_GT_RANGE18_19"
    OLD_GT_RANGE20_21 = "OLD_GT_RANGE20_21"
    OLD_GT_RANGE22_29 = "OLD_GT_RANGE22_29"
    OLD_GT_RANGE30_39 = "OLD_GT_RANGE30_39"
    OLD_GT_RANGE40_49 = "OLD_GT_RANGE40_49"
    OLD_GT_RANGE50_59 = "OLD_GT_RANGE50_59"
    OLD_GT_RANGE60_69 = "OLD_GT_RANGE60_69"
    OLD_GT_RANGE70_UL = "OLD_GT_RANGE70_UL"
    OLD_GT_UNKNOWN = "OLD_GT_UNKNOWN"
    GT_RANGE18_19 = "GT_RANGE18_19"
    GT_RANGE20_24 = "GT_RANGE20_24"
    GT_RANGE25_29 = "GT_RANGE25_29"
    GT_RANGE30_34 = "GT_RANGE30_34"
    GT_RANGE35_39 = "GT_RANGE35_39"
    GT_RANGE40_44 = "GT_RANGE40_44"
    GT_RANGE45_49 = "GT_RANGE45_49"
    GT_RANGE50_54 = "GT_RANGE50_54"
    GT_RANGE55_59 = "GT_RANGE55_59"
    GT_RANGE60_64 = "GT_RANGE60_64"
    GT_RANGE65_69 = "GT_RANGE65_69"
    GT_RANGE70_UL2 = "GT_RANGE70_UL2"
    GT_UNKNOWN2 = "GT_UNKNOWN2"
    UNKNOWN = "UNKNOWN"

    allowable_values = [OLD_GT_RANGE13_14, OLD_GT_RANGE15_17, OLD_GT_RANGE18_19, OLD_GT_RANGE20_21, OLD_GT_RANGE22_29, OLD_GT_RANGE30_39, OLD_GT_RANGE40_49, OLD_GT_RANGE50_59, OLD_GT_RANGE60_69, OLD_GT_RANGE70_UL, OLD_GT_UNKNOWN, GT_RANGE18_19, GT_RANGE20_24, GT_RANGE25_29, GT_RANGE30_34, GT_RANGE35_39, GT_RANGE40_44, GT_RANGE45_49, GT_RANGE50_54, GT_RANGE55_59, GT_RANGE60_64, GT_RANGE65_69, GT_RANGE70_UL2, GT_UNKNOWN2, UNKNOWN]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """StatsServiceAge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsServiceAge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatsServiceAge):
            return True

        return self.to_dict() != other.to_dict()

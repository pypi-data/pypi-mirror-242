# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class AbTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'ab_test_id': 'int',
        'ab_test_name': 'str',
        'description': 'str',
        'a_campaign_id': 'int',
        'a_campaign_name': 'str',
        'a_campaign_user_status': 'AbTestServiceCampaignUserStatus',
        'b_campaign_id': 'int',
        'b_campaign_name': 'str',
        'b_campaign_user_status': 'AbTestServiceCampaignUserStatus',
        'end_date': 'str',
        'is_remove_description': 'AbTestServiceIsRemoveFlg',
        'start_date': 'str',
        'status': 'AbTestServiceStatus'
    }

    attribute_map = {
        'account_id': 'accountId',
        'ab_test_id': 'abTestId',
        'ab_test_name': 'abTestName',
        'description': 'description',
        'a_campaign_id': 'aCampaignId',
        'a_campaign_name': 'aCampaignName',
        'a_campaign_user_status': 'aCampaignUserStatus',
        'b_campaign_id': 'bCampaignId',
        'b_campaign_name': 'bCampaignName',
        'b_campaign_user_status': 'bCampaignUserStatus',
        'end_date': 'endDate',
        'is_remove_description': 'isRemoveDescription',
        'start_date': 'startDate',
        'status': 'status'
    }

    def __init__(self, account_id=None, ab_test_id=None, ab_test_name=None, description=None, a_campaign_id=None, a_campaign_name=None, a_campaign_user_status=None, b_campaign_id=None, b_campaign_name=None, b_campaign_user_status=None, end_date=None, is_remove_description=None, start_date=None, status=None, local_vars_configuration=None):  # noqa: E501
        """AbTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._ab_test_id = None
        self._ab_test_name = None
        self._description = None
        self._a_campaign_id = None
        self._a_campaign_name = None
        self._a_campaign_user_status = None
        self._b_campaign_id = None
        self._b_campaign_name = None
        self._b_campaign_user_status = None
        self._end_date = None
        self._is_remove_description = None
        self._start_date = None
        self._status = None
        self.discriminator = None

        self.account_id = account_id
        self.ab_test_id = ab_test_id
        self.ab_test_name = ab_test_name
        self.description = description
        self.a_campaign_id = a_campaign_id
        self.a_campaign_name = a_campaign_name
        self.a_campaign_user_status = a_campaign_user_status
        self.b_campaign_id = b_campaign_id
        self.b_campaign_name = b_campaign_name
        self.b_campaign_user_status = b_campaign_user_status
        self.end_date = end_date
        self.is_remove_description = is_remove_description
        self.start_date = start_date
        self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this AbTest.  # noqa: E501

        <div lang=\"ja\"> アカウントIDです。<br> このフィールドは、リクエストの場合は必須です。 </div> <div lang=\"en\"> Account ID.<br> This field is required in requests. </div>   # noqa: E501

        :return: The account_id of this AbTest.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AbTest.

        <div lang=\"ja\"> アカウントIDです。<br> このフィールドは、リクエストの場合は必須です。 </div> <div lang=\"en\"> Account ID.<br> This field is required in requests. </div>   # noqa: E501

        :param account_id: The account_id of this AbTest.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def ab_test_id(self):
        """Gets the ab_test_id of this AbTest.  # noqa: E501

        <div lang=\"ja\"> A/BテストIDです。<br> このフィールドは、ADD時は無視され、SETおよびREMOVE時は必須となります。 </div> <div lang=\"en\"> A/B test ID.<br> This field will be ignored in ADD operation, and will be required in SET and REMOVE operation. </div>   # noqa: E501

        :return: The ab_test_id of this AbTest.  # noqa: E501
        :rtype: int
        """
        return self._ab_test_id

    @ab_test_id.setter
    def ab_test_id(self, ab_test_id):
        """Sets the ab_test_id of this AbTest.

        <div lang=\"ja\"> A/BテストIDです。<br> このフィールドは、ADD時は無視され、SETおよびREMOVE時は必須となります。 </div> <div lang=\"en\"> A/B test ID.<br> This field will be ignored in ADD operation, and will be required in SET and REMOVE operation. </div>   # noqa: E501

        :param ab_test_id: The ab_test_id of this AbTest.  # noqa: E501
        :type: int
        """

        self._ab_test_id = ab_test_id

    @property
    def ab_test_name(self):
        """Gets the ab_test_name of this AbTest.  # noqa: E501

        <div lang=\"ja\"> A/Bテスト名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> A/B test name.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :return: The ab_test_name of this AbTest.  # noqa: E501
        :rtype: str
        """
        return self._ab_test_name

    @ab_test_name.setter
    def ab_test_name(self, ab_test_name):
        """Sets the ab_test_name of this AbTest.

        <div lang=\"ja\"> A/Bテスト名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> A/B test name.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :param ab_test_name: The ab_test_name of this AbTest.  # noqa: E501
        :type: str
        """

        self._ab_test_name = ab_test_name

    @property
    def description(self):
        """Gets the description of this AbTest.  # noqa: E501

        <div lang=\"ja\"> 説明文です。<br> ADDおよびSET時、このフィールドは省略可能となります。 </div> <div lang=\"en\"> Description text.<br> This field is optional in ADD and SET operation. </div>   # noqa: E501

        :return: The description of this AbTest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbTest.

        <div lang=\"ja\"> 説明文です。<br> ADDおよびSET時、このフィールドは省略可能となります。 </div> <div lang=\"en\"> Description text.<br> This field is optional in ADD and SET operation. </div>   # noqa: E501

        :param description: The description of this AbTest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def a_campaign_id(self):
        """Gets the a_campaign_id of this AbTest.  # noqa: E501

        <div lang=\"ja\"> キャンペーンAのキャンペーンIDです。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Campaign ID of Campaign A.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :return: The a_campaign_id of this AbTest.  # noqa: E501
        :rtype: int
        """
        return self._a_campaign_id

    @a_campaign_id.setter
    def a_campaign_id(self, a_campaign_id):
        """Sets the a_campaign_id of this AbTest.

        <div lang=\"ja\"> キャンペーンAのキャンペーンIDです。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Campaign ID of Campaign A.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :param a_campaign_id: The a_campaign_id of this AbTest.  # noqa: E501
        :type: int
        """

        self._a_campaign_id = a_campaign_id

    @property
    def a_campaign_name(self):
        """Gets the a_campaign_name of this AbTest.  # noqa: E501

        <div lang=\"ja\"> キャンペーンAのキャンペーン名です。<br> このフィールドはリクエストの際には無視されます。<br> GET時のみレスポンスの際に返却されます。 </div> <div lang=\"en\"> Campaign name of Campaign A.<br> This field will be ignored on input.<br> This field will be returned in the GET response only. </div>   # noqa: E501

        :return: The a_campaign_name of this AbTest.  # noqa: E501
        :rtype: str
        """
        return self._a_campaign_name

    @a_campaign_name.setter
    def a_campaign_name(self, a_campaign_name):
        """Sets the a_campaign_name of this AbTest.

        <div lang=\"ja\"> キャンペーンAのキャンペーン名です。<br> このフィールドはリクエストの際には無視されます。<br> GET時のみレスポンスの際に返却されます。 </div> <div lang=\"en\"> Campaign name of Campaign A.<br> This field will be ignored on input.<br> This field will be returned in the GET response only. </div>   # noqa: E501

        :param a_campaign_name: The a_campaign_name of this AbTest.  # noqa: E501
        :type: str
        """

        self._a_campaign_name = a_campaign_name

    @property
    def a_campaign_user_status(self):
        """Gets the a_campaign_user_status of this AbTest.  # noqa: E501


        :return: The a_campaign_user_status of this AbTest.  # noqa: E501
        :rtype: AbTestServiceCampaignUserStatus
        """
        return self._a_campaign_user_status

    @a_campaign_user_status.setter
    def a_campaign_user_status(self, a_campaign_user_status):
        """Sets the a_campaign_user_status of this AbTest.


        :param a_campaign_user_status: The a_campaign_user_status of this AbTest.  # noqa: E501
        :type: AbTestServiceCampaignUserStatus
        """

        self._a_campaign_user_status = a_campaign_user_status

    @property
    def b_campaign_id(self):
        """Gets the b_campaign_id of this AbTest.  # noqa: E501

        <div lang=\"ja\"> キャンペーンBのキャンペーンIDです。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Campaign ID of Campaign B.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :return: The b_campaign_id of this AbTest.  # noqa: E501
        :rtype: int
        """
        return self._b_campaign_id

    @b_campaign_id.setter
    def b_campaign_id(self, b_campaign_id):
        """Sets the b_campaign_id of this AbTest.

        <div lang=\"ja\"> キャンペーンBのキャンペーンIDです。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Campaign ID of Campaign B.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :param b_campaign_id: The b_campaign_id of this AbTest.  # noqa: E501
        :type: int
        """

        self._b_campaign_id = b_campaign_id

    @property
    def b_campaign_name(self):
        """Gets the b_campaign_name of this AbTest.  # noqa: E501

        <div lang=\"ja\"> キャンペーンBのキャンペーン名です。<br> このフィールドはリクエストの際には無視されます。<br> GET時のみレスポンスの際に返却されます。 </div> <div lang=\"en\"> Campaign name of Campaign B.<br> This field will be ignored on input.<br> This field will be returned in the GET response only. </div>   # noqa: E501

        :return: The b_campaign_name of this AbTest.  # noqa: E501
        :rtype: str
        """
        return self._b_campaign_name

    @b_campaign_name.setter
    def b_campaign_name(self, b_campaign_name):
        """Sets the b_campaign_name of this AbTest.

        <div lang=\"ja\"> キャンペーンBのキャンペーン名です。<br> このフィールドはリクエストの際には無視されます。<br> GET時のみレスポンスの際に返却されます。 </div> <div lang=\"en\"> Campaign name of Campaign B.<br> This field will be ignored on input.<br> This field will be returned in the GET response only. </div>   # noqa: E501

        :param b_campaign_name: The b_campaign_name of this AbTest.  # noqa: E501
        :type: str
        """

        self._b_campaign_name = b_campaign_name

    @property
    def b_campaign_user_status(self):
        """Gets the b_campaign_user_status of this AbTest.  # noqa: E501


        :return: The b_campaign_user_status of this AbTest.  # noqa: E501
        :rtype: AbTestServiceCampaignUserStatus
        """
        return self._b_campaign_user_status

    @b_campaign_user_status.setter
    def b_campaign_user_status(self, b_campaign_user_status):
        """Sets the b_campaign_user_status of this AbTest.


        :param b_campaign_user_status: The b_campaign_user_status of this AbTest.  # noqa: E501
        :type: AbTestServiceCampaignUserStatus
        """

        self._b_campaign_user_status = b_campaign_user_status

    @property
    def end_date(self):
        """Gets the end_date of this AbTest.  # noqa: E501

        <div lang=\"ja\"> 終了日です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。<br> ※フォーマット：yyyyMMdd </div> <div lang=\"en\"> End date.<br> This field is required in ADD operation, and will be optional in SET operation.<br> *format: yyyyMMdd </div>   # noqa: E501

        :return: The end_date of this AbTest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AbTest.

        <div lang=\"ja\"> 終了日です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。<br> ※フォーマット：yyyyMMdd </div> <div lang=\"en\"> End date.<br> This field is required in ADD operation, and will be optional in SET operation.<br> *format: yyyyMMdd </div>   # noqa: E501

        :param end_date: The end_date of this AbTest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def is_remove_description(self):
        """Gets the is_remove_description of this AbTest.  # noqa: E501


        :return: The is_remove_description of this AbTest.  # noqa: E501
        :rtype: AbTestServiceIsRemoveFlg
        """
        return self._is_remove_description

    @is_remove_description.setter
    def is_remove_description(self, is_remove_description):
        """Sets the is_remove_description of this AbTest.


        :param is_remove_description: The is_remove_description of this AbTest.  # noqa: E501
        :type: AbTestServiceIsRemoveFlg
        """

        self._is_remove_description = is_remove_description

    @property
    def start_date(self):
        """Gets the start_date of this AbTest.  # noqa: E501

        <div lang=\"ja\"> 開始日です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。<br> ※フォーマット：yyyyMMdd </div> <div lang=\"en\"> Start date.<br> This field is required in ADD operation, and will be optional in SET operation.<br> *format: yyyyMMdd </div>   # noqa: E501

        :return: The start_date of this AbTest.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AbTest.

        <div lang=\"ja\"> 開始日です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。<br> ※フォーマット：yyyyMMdd </div> <div lang=\"en\"> Start date.<br> This field is required in ADD operation, and will be optional in SET operation.<br> *format: yyyyMMdd </div>   # noqa: E501

        :param start_date: The start_date of this AbTest.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this AbTest.  # noqa: E501


        :return: The status of this AbTest.  # noqa: E501
        :rtype: AbTestServiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AbTest.


        :param status: The status of this AbTest.  # noqa: E501
        :type: AbTestServiceStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbTest):
            return True

        return self.to_dict() != other.to_dict()

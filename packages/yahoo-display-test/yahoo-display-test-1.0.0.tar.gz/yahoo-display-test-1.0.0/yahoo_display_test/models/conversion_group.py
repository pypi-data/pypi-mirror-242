# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class ConversionGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'conversion_group_id': 'int',
        'conversion_group_name': 'str',
        'conversions': 'list[ConversionGroupServiceConversion]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'conversion_group_id': 'conversionGroupId',
        'conversion_group_name': 'conversionGroupName',
        'conversions': 'conversions'
    }

    def __init__(self, account_id=None, conversion_group_id=None, conversion_group_name=None, conversions=None, local_vars_configuration=None):  # noqa: E501
        """ConversionGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._conversion_group_id = None
        self._conversion_group_name = None
        self._conversions = None
        self.discriminator = None

        self.account_id = account_id
        self.conversion_group_id = conversion_group_id
        self.conversion_group_name = conversion_group_name
        self.conversions = conversions

    @property
    def account_id(self):
        """Gets the account_id of this ConversionGroup.  # noqa: E501

        <div lang=\"ja\"> アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Account ID.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :return: The account_id of this ConversionGroup.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConversionGroup.

        <div lang=\"ja\"> アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Account ID.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :param account_id: The account_id of this ConversionGroup.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def conversion_group_id(self):
        """Gets the conversion_group_id of this ConversionGroup.  # noqa: E501

        <div lang=\"ja\"> コンバージョングループIDです。<br> このフィールドは、ADD時は無視され、SETおよびREMOVE時は必須となります。 </div> <div lang=\"en\"> Conversion tracker ID.<br> This field will be ignored in ADD operation, and will be required in SET and REMOVE operation. </div>   # noqa: E501

        :return: The conversion_group_id of this ConversionGroup.  # noqa: E501
        :rtype: int
        """
        return self._conversion_group_id

    @conversion_group_id.setter
    def conversion_group_id(self, conversion_group_id):
        """Sets the conversion_group_id of this ConversionGroup.

        <div lang=\"ja\"> コンバージョングループIDです。<br> このフィールドは、ADD時は無視され、SETおよびREMOVE時は必須となります。 </div> <div lang=\"en\"> Conversion tracker ID.<br> This field will be ignored in ADD operation, and will be required in SET and REMOVE operation. </div>   # noqa: E501

        :param conversion_group_id: The conversion_group_id of this ConversionGroup.  # noqa: E501
        :type: int
        """

        self._conversion_group_id = conversion_group_id

    @property
    def conversion_group_name(self):
        """Gets the conversion_group_name of this ConversionGroup.  # noqa: E501

        <div lang=\"ja\"> コンバージョングループ名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Conversion group name.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :return: The conversion_group_name of this ConversionGroup.  # noqa: E501
        :rtype: str
        """
        return self._conversion_group_name

    @conversion_group_name.setter
    def conversion_group_name(self, conversion_group_name):
        """Sets the conversion_group_name of this ConversionGroup.

        <div lang=\"ja\"> コンバージョングループ名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Conversion group name.<br> This field is required in ADD operation, and will be optional in SET operation. </div>   # noqa: E501

        :param conversion_group_name: The conversion_group_name of this ConversionGroup.  # noqa: E501
        :type: str
        """

        self._conversion_group_name = conversion_group_name

    @property
    def conversions(self):
        """Gets the conversions of this ConversionGroup.  # noqa: E501


        :return: The conversions of this ConversionGroup.  # noqa: E501
        :rtype: list[ConversionGroupServiceConversion]
        """
        return self._conversions

    @conversions.setter
    def conversions(self, conversions):
        """Sets the conversions of this ConversionGroup.


        :param conversions: The conversions of this ConversionGroup.  # noqa: E501
        :type: list[ConversionGroupServiceConversion]
        """

        self._conversions = conversions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversionGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConversionGroup):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class RecommendationServiceType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    DAILY_BUDGET_OVER = "DAILY_BUDGET_OVER"
    IMPRESSION_SHARE_BUDGET_LOSS_OVER = "IMPRESSION_SHARE_BUDGET_LOSS_OVER"
    BID_STRATEGY_TO_TARGET_CPA = "BID_STRATEGY_TO_TARGET_CPA"
    SEARCH_KEYWORD_LIST_IDEA = "SEARCH_KEYWORD_LIST_IDEA"
    MAXIMIZE_CONVERSIONS = "MAXIMIZE_CONVERSIONS"
    MAXIMIZE_CLICKS = "MAXIMIZE_CLICKS"
    MAXIMIZE_VIDEO_VIEWS = "MAXIMIZE_VIDEO_VIEWS"
    ENHANCED_CPC = "ENHANCED_CPC"
    UPDATE_AD_CREATIVE = "UPDATE_AD_CREATIVE"
    DUPLICATE_TARGETING_SETTINGS = "DUPLICATE_TARGETING_SETTINGS"
    NOT_OPTIMAL_AD_COUNT_COMBINED_AD_TYPE_AND_IMAGE_SIZE = "NOT_OPTIMAL_AD_COUNT_COMBINED_AD_TYPE_AND_IMAGE_SIZE"
    ADGROUPS_FOR_ADDING_ADS = "ADGROUPS_FOR_ADDING_ADS"
    DAILY_BUDGET_SMALL = "DAILY_BUDGET_SMALL"
    INSUFFICIENT_TARGETING = "INSUFFICIENT_TARGETING"
    INSUFFICIENT_AD_SCHEDULE_TARGETING = "INSUFFICIENT_AD_SCHEDULE_TARGETING"
    INSUFFICIENT_CONVERSIONS = "INSUFFICIENT_CONVERSIONS"
    INSUFFICIENT_CLICKS = "INSUFFICIENT_CLICKS"
    INSUFFICIENT_VIDEO_VIEWS = "INSUFFICIENT_VIDEO_VIEWS"
    CREATE_CAMPAIGN = "CREATE_CAMPAIGN"
    CREATE_AD_GROUP = "CREATE_AD_GROUP"
    CREATE_AD = "CREATE_AD"
    CREATE_RESPONSIVE_DISPLAY_ADS = "CREATE_RESPONSIVE_DISPLAY_ADS"
    TURN_YOUR_ACCOUNT_ON = "TURN_YOUR_ACCOUNT_ON"
    TURN_YOUR_AD_ON = "TURN_YOUR_AD_ON"
    INSUFFICIENT_ACCOUNT_BALANCE = "INSUFFICIENT_ACCOUNT_BALANCE"
    UNKNOWN = "UNKNOWN"

    allowable_values = [DAILY_BUDGET_OVER, IMPRESSION_SHARE_BUDGET_LOSS_OVER, BID_STRATEGY_TO_TARGET_CPA, SEARCH_KEYWORD_LIST_IDEA, MAXIMIZE_CONVERSIONS, MAXIMIZE_CLICKS, MAXIMIZE_VIDEO_VIEWS, ENHANCED_CPC, UPDATE_AD_CREATIVE, DUPLICATE_TARGETING_SETTINGS, NOT_OPTIMAL_AD_COUNT_COMBINED_AD_TYPE_AND_IMAGE_SIZE, ADGROUPS_FOR_ADDING_ADS, DAILY_BUDGET_SMALL, INSUFFICIENT_TARGETING, INSUFFICIENT_AD_SCHEDULE_TARGETING, INSUFFICIENT_CONVERSIONS, INSUFFICIENT_CLICKS, INSUFFICIENT_VIDEO_VIEWS, CREATE_CAMPAIGN, CREATE_AD_GROUP, CREATE_AD, CREATE_RESPONSIVE_DISPLAY_ADS, TURN_YOUR_ACCOUNT_ON, TURN_YOUR_AD_ON, INSUFFICIENT_ACCOUNT_BALANCE, UNKNOWN]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """RecommendationServiceType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationServiceType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecommendationServiceType):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class BrandLiftServiceQuestion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'question_id': 'int',
        'goal': 'BrandLiftServiceGoal',
        'pre_approve_id': 'str',
        'question': 'str',
        'answer_option1': 'str',
        'answer_option2': 'str',
        'answer_option3': 'str',
        'answer_option4': 'str',
        'answer_option5': 'str'
    }

    attribute_map = {
        'question_id': 'questionId',
        'goal': 'goal',
        'pre_approve_id': 'preApproveId',
        'question': 'question',
        'answer_option1': 'answerOption1',
        'answer_option2': 'answerOption2',
        'answer_option3': 'answerOption3',
        'answer_option4': 'answerOption4',
        'answer_option5': 'answerOption5'
    }

    def __init__(self, question_id=None, goal=None, pre_approve_id=None, question=None, answer_option1=None, answer_option2=None, answer_option3=None, answer_option4=None, answer_option5=None, local_vars_configuration=None):  # noqa: E501
        """BrandLiftServiceQuestion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._question_id = None
        self._goal = None
        self._pre_approve_id = None
        self._question = None
        self._answer_option1 = None
        self._answer_option2 = None
        self._answer_option3 = None
        self._answer_option4 = None
        self._answer_option5 = None
        self.discriminator = None

        self.question_id = question_id
        self.goal = goal
        self.pre_approve_id = pre_approve_id
        self.question = question
        self.answer_option1 = answer_option1
        self.answer_option2 = answer_option2
        self.answer_option3 = answer_option3
        self.answer_option4 = answer_option4
        self.answer_option5 = answer_option5

    @property
    def question_id(self):
        """Gets the question_id of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">調査IDです。</div> <div lang=\"en\">Question ID. </div>   # noqa: E501

        :return: The question_id of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: int
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this BrandLiftServiceQuestion.

        <div lang=\"ja\">調査IDです。</div> <div lang=\"en\">Question ID. </div>   # noqa: E501

        :param question_id: The question_id of this BrandLiftServiceQuestion.  # noqa: E501
        :type: int
        """

        self._question_id = question_id

    @property
    def goal(self):
        """Gets the goal of this BrandLiftServiceQuestion.  # noqa: E501


        :return: The goal of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: BrandLiftServiceGoal
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this BrandLiftServiceQuestion.


        :param goal: The goal of this BrandLiftServiceQuestion.  # noqa: E501
        :type: BrandLiftServiceGoal
        """

        self._goal = goal

    @property
    def pre_approve_id(self):
        """Gets the pre_approve_id of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">事前承認IDです。</div> <div lang=\"en\">Preapprove ID. </div>   # noqa: E501

        :return: The pre_approve_id of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._pre_approve_id

    @pre_approve_id.setter
    def pre_approve_id(self, pre_approve_id):
        """Sets the pre_approve_id of this BrandLiftServiceQuestion.

        <div lang=\"ja\">事前承認IDです。</div> <div lang=\"en\">Preapprove ID. </div>   # noqa: E501

        :param pre_approve_id: The pre_approve_id of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._pre_approve_id = pre_approve_id

    @property
    def question(self):
        """Gets the question of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">設問です。</div> <div lang=\"en\">Question. </div>   # noqa: E501

        :return: The question of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this BrandLiftServiceQuestion.

        <div lang=\"ja\">設問です。</div> <div lang=\"en\">Question. </div>   # noqa: E501

        :param question: The question of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._question = question

    @property
    def answer_option1(self):
        """Gets the answer_option1 of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">回答選択肢1です。</div> <div lang=\"en\">Answer option1. </div>   # noqa: E501

        :return: The answer_option1 of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer_option1

    @answer_option1.setter
    def answer_option1(self, answer_option1):
        """Sets the answer_option1 of this BrandLiftServiceQuestion.

        <div lang=\"ja\">回答選択肢1です。</div> <div lang=\"en\">Answer option1. </div>   # noqa: E501

        :param answer_option1: The answer_option1 of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._answer_option1 = answer_option1

    @property
    def answer_option2(self):
        """Gets the answer_option2 of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">回答選択肢2です。</div> <div lang=\"en\">Answer option2. </div>   # noqa: E501

        :return: The answer_option2 of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer_option2

    @answer_option2.setter
    def answer_option2(self, answer_option2):
        """Sets the answer_option2 of this BrandLiftServiceQuestion.

        <div lang=\"ja\">回答選択肢2です。</div> <div lang=\"en\">Answer option2. </div>   # noqa: E501

        :param answer_option2: The answer_option2 of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._answer_option2 = answer_option2

    @property
    def answer_option3(self):
        """Gets the answer_option3 of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">回答選択肢3です。</div> <div lang=\"en\">Answer option3. </div>   # noqa: E501

        :return: The answer_option3 of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer_option3

    @answer_option3.setter
    def answer_option3(self, answer_option3):
        """Sets the answer_option3 of this BrandLiftServiceQuestion.

        <div lang=\"ja\">回答選択肢3です。</div> <div lang=\"en\">Answer option3. </div>   # noqa: E501

        :param answer_option3: The answer_option3 of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._answer_option3 = answer_option3

    @property
    def answer_option4(self):
        """Gets the answer_option4 of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">回答選択肢4です。</div> <div lang=\"en\">Answer option4. </div>   # noqa: E501

        :return: The answer_option4 of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer_option4

    @answer_option4.setter
    def answer_option4(self, answer_option4):
        """Sets the answer_option4 of this BrandLiftServiceQuestion.

        <div lang=\"ja\">回答選択肢4です。</div> <div lang=\"en\">Answer option4. </div>   # noqa: E501

        :param answer_option4: The answer_option4 of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._answer_option4 = answer_option4

    @property
    def answer_option5(self):
        """Gets the answer_option5 of this BrandLiftServiceQuestion.  # noqa: E501

        <div lang=\"ja\">回答選択肢5です。</div> <div lang=\"en\">Answer option5. </div>   # noqa: E501

        :return: The answer_option5 of this BrandLiftServiceQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer_option5

    @answer_option5.setter
    def answer_option5(self, answer_option5):
        """Sets the answer_option5 of this BrandLiftServiceQuestion.

        <div lang=\"ja\">回答選択肢5です。</div> <div lang=\"en\">Answer option5. </div>   # noqa: E501

        :param answer_option5: The answer_option5 of this BrandLiftServiceQuestion.  # noqa: E501
        :type: str
        """

        self._answer_option5 = answer_option5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandLiftServiceQuestion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrandLiftServiceQuestion):
            return True

        return self.to_dict() != other.to_dict()

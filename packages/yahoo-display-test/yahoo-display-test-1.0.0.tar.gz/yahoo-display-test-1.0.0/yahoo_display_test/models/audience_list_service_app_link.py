# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class AudienceListServiceAppLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_id': 'str',
        'app_vendor': 'AudienceListServiceAppVendor',
        'link_id': 'str',
        'app_platform': 'AudienceListServiceAppPlatform'
    }

    attribute_map = {
        'app_id': 'appId',
        'app_vendor': 'appVendor',
        'link_id': 'linkId',
        'app_platform': 'appPlatform'
    }

    def __init__(self, app_id=None, app_vendor=None, link_id=None, app_platform=None, local_vars_configuration=None):  # noqa: E501
        """AudienceListServiceAppLink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_id = None
        self._app_vendor = None
        self._link_id = None
        self._app_platform = None
        self.discriminator = None

        self.app_id = app_id
        self.app_vendor = app_vendor
        self.link_id = link_id
        self.app_platform = app_platform

    @property
    def app_id(self):
        """Gets the app_id of this AudienceListServiceAppLink.  # noqa: E501

        <div lang=\"ja\"> アプリIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> App ID.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :return: The app_id of this AudienceListServiceAppLink.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AudienceListServiceAppLink.

        <div lang=\"ja\"> アプリIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> App ID.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :param app_id: The app_id of this AudienceListServiceAppLink.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_vendor(self):
        """Gets the app_vendor of this AudienceListServiceAppLink.  # noqa: E501


        :return: The app_vendor of this AudienceListServiceAppLink.  # noqa: E501
        :rtype: AudienceListServiceAppVendor
        """
        return self._app_vendor

    @app_vendor.setter
    def app_vendor(self, app_vendor):
        """Sets the app_vendor of this AudienceListServiceAppLink.


        :param app_vendor: The app_vendor of this AudienceListServiceAppLink.  # noqa: E501
        :type: AudienceListServiceAppVendor
        """

        self._app_vendor = app_vendor

    @property
    def link_id(self):
        """Gets the link_id of this AudienceListServiceAppLink.  # noqa: E501

        <div lang=\"ja\"> リンクIDです。<br> このフィールドは、ADD時は必須となり、SET時は無視されます。 </div> <div lang=\"en\"> Link ID.<br> This field is required in ADD operation, and will be ignored in SET operation. </div>   # noqa: E501

        :return: The link_id of this AudienceListServiceAppLink.  # noqa: E501
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this AudienceListServiceAppLink.

        <div lang=\"ja\"> リンクIDです。<br> このフィールドは、ADD時は必須となり、SET時は無視されます。 </div> <div lang=\"en\"> Link ID.<br> This field is required in ADD operation, and will be ignored in SET operation. </div>   # noqa: E501

        :param link_id: The link_id of this AudienceListServiceAppLink.  # noqa: E501
        :type: str
        """

        self._link_id = link_id

    @property
    def app_platform(self):
        """Gets the app_platform of this AudienceListServiceAppLink.  # noqa: E501


        :return: The app_platform of this AudienceListServiceAppLink.  # noqa: E501
        :rtype: AudienceListServiceAppPlatform
        """
        return self._app_platform

    @app_platform.setter
    def app_platform(self, app_platform):
        """Sets the app_platform of this AudienceListServiceAppLink.


        :param app_platform: The app_platform of this AudienceListServiceAppLink.  # noqa: E501
        :type: AudienceListServiceAppPlatform
        """

        self._app_platform = app_platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceListServiceAppLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudienceListServiceAppLink):
            return True

        return self.to_dict() != other.to_dict()

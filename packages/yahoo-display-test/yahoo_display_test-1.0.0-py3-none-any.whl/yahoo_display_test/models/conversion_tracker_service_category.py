# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class ConversionTrackerServiceCategory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    NONE = "NONE"
    DEFAULT = "DEFAULT"
    PAGE_VIEW = "PAGE_VIEW"
    PURCHASE = "PURCHASE"
    SIGNUP = "SIGNUP"
    LEAD = "LEAD"
    DOWNLOAD = "DOWNLOAD"
    APP_LAUNCH = "APP_LAUNCH"
    APP_UPDATE = "APP_UPDATE"
    SIGN_UP = "SIGN_UP"
    LOGIN = "LOGIN"
    SEARCH = "SEARCH"
    VIEW_LISTING = "VIEW_LISTING"
    VIEW_PRODUCT = "VIEW_PRODUCT"
    VIEW_CART = "VIEW_CART"
    ADD_CART = "ADD_CART"
    ADD_WISHLIST = "ADD_WISHLIST"
    CHECK_OUT = "CHECK_OUT"
    PRODUCT_PURCHASE = "PRODUCT_PURCHASE"
    APP_PURCHASE = "APP_PURCHASE"
    SPENT_CREDITS = "SPENT_CREDITS"
    PAYMENT_INFO = "PAYMENT_INFO"
    REVIEW = "REVIEW"
    SHARE = "SHARE"
    INVITE = "INVITE"
    RESERVATION = "RESERVATION"
    TUTORIAL = "TUTORIAL"
    DEEPLINK = "DEEPLINK"
    START_LEVEL = "START_LEVEL"
    END_LEVEL = "END_LEVEL"
    LEVEL_ACHIEVED = "LEVEL_ACHIEVED"
    UNLOCK_ACHIEVEMENT = "UNLOCK_ACHIEVEMENT"
    CUSTOM1 = "CUSTOM1"
    CUSTOM2 = "CUSTOM2"
    CUSTOM3 = "CUSTOM3"
    UNKNOWN = "UNKNOWN"

    allowable_values = [NONE, DEFAULT, PAGE_VIEW, PURCHASE, SIGNUP, LEAD, DOWNLOAD, APP_LAUNCH, APP_UPDATE, SIGN_UP, LOGIN, SEARCH, VIEW_LISTING, VIEW_PRODUCT, VIEW_CART, ADD_CART, ADD_WISHLIST, CHECK_OUT, PRODUCT_PURCHASE, APP_PURCHASE, SPENT_CREDITS, PAYMENT_INFO, REVIEW, SHARE, INVITE, RESERVATION, TUTORIAL, DEEPLINK, START_LEVEL, END_LEVEL, LEVEL_ACHIEVED, UNLOCK_ACHIEVEMENT, CUSTOM1, CUSTOM2, CUSTOM3, UNKNOWN]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """ConversionTrackerServiceCategory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversionTrackerServiceCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConversionTrackerServiceCategory):
            return True

        return self.to_dict() != other.to_dict()

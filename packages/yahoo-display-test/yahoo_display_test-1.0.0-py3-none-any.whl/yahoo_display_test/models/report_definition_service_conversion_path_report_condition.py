# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class ReportDefinitionServiceConversionPathReportCondition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lookback_window': 'int',
        'include_view_interaction': 'ReportDefinitionServiceIncludeViewInteractionFlg',
        'conversion_path_filters': 'list[ReportDefinitionServiceConversionPathFilter]',
        'conversion_path_account_setting': 'ReportDefinitionServiceConversionPathAccountSetting'
    }

    attribute_map = {
        'lookback_window': 'lookbackWindow',
        'include_view_interaction': 'includeViewInteraction',
        'conversion_path_filters': 'conversionPathFilters',
        'conversion_path_account_setting': 'conversionPathAccountSetting'
    }

    def __init__(self, lookback_window=None, include_view_interaction=None, conversion_path_filters=None, conversion_path_account_setting=None, local_vars_configuration=None):  # noqa: E501
        """ReportDefinitionServiceConversionPathReportCondition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lookback_window = None
        self._include_view_interaction = None
        self._conversion_path_filters = None
        self._conversion_path_account_setting = None
        self.discriminator = None

        self.lookback_window = lookback_window
        self.include_view_interaction = include_view_interaction
        self.conversion_path_filters = conversion_path_filters
        self.conversion_path_account_setting = conversion_path_account_setting

    @property
    def lookback_window(self):
        """Gets the lookback_window of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501

        <div lang=\"ja\">   ルックバック期間（日数）です。<br>   指定できる値の下限は0、上限は90です。<br>   このフィールドは、ADDに必須となります。 </div> <div lang=\"en\">   Look back period (number of days). <br>   The lower limit of the value that can be specified is 0, and the upper limit is 90.<br>   This field is required in ADD operation.  </div>   # noqa: E501

        :return: The lookback_window of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :rtype: int
        """
        return self._lookback_window

    @lookback_window.setter
    def lookback_window(self, lookback_window):
        """Sets the lookback_window of this ReportDefinitionServiceConversionPathReportCondition.

        <div lang=\"ja\">   ルックバック期間（日数）です。<br>   指定できる値の下限は0、上限は90です。<br>   このフィールドは、ADDに必須となります。 </div> <div lang=\"en\">   Look back period (number of days). <br>   The lower limit of the value that can be specified is 0, and the upper limit is 90.<br>   This field is required in ADD operation.  </div>   # noqa: E501

        :param lookback_window: The lookback_window of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :type: int
        """

        self._lookback_window = lookback_window

    @property
    def include_view_interaction(self):
        """Gets the include_view_interaction of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501


        :return: The include_view_interaction of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceIncludeViewInteractionFlg
        """
        return self._include_view_interaction

    @include_view_interaction.setter
    def include_view_interaction(self, include_view_interaction):
        """Sets the include_view_interaction of this ReportDefinitionServiceConversionPathReportCondition.


        :param include_view_interaction: The include_view_interaction of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :type: ReportDefinitionServiceIncludeViewInteractionFlg
        """

        self._include_view_interaction = include_view_interaction

    @property
    def conversion_path_filters(self):
        """Gets the conversion_path_filters of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501


        :return: The conversion_path_filters of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :rtype: list[ReportDefinitionServiceConversionPathFilter]
        """
        return self._conversion_path_filters

    @conversion_path_filters.setter
    def conversion_path_filters(self, conversion_path_filters):
        """Sets the conversion_path_filters of this ReportDefinitionServiceConversionPathReportCondition.


        :param conversion_path_filters: The conversion_path_filters of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :type: list[ReportDefinitionServiceConversionPathFilter]
        """

        self._conversion_path_filters = conversion_path_filters

    @property
    def conversion_path_account_setting(self):
        """Gets the conversion_path_account_setting of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501


        :return: The conversion_path_account_setting of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceConversionPathAccountSetting
        """
        return self._conversion_path_account_setting

    @conversion_path_account_setting.setter
    def conversion_path_account_setting(self, conversion_path_account_setting):
        """Sets the conversion_path_account_setting of this ReportDefinitionServiceConversionPathReportCondition.


        :param conversion_path_account_setting: The conversion_path_account_setting of this ReportDefinitionServiceConversionPathReportCondition.  # noqa: E501
        :type: ReportDefinitionServiceConversionPathAccountSetting
        """

        self._conversion_path_account_setting = conversion_path_account_setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDefinitionServiceConversionPathReportCondition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportDefinitionServiceConversionPathReportCondition):
            return True

        return self.to_dict() != other.to_dict()

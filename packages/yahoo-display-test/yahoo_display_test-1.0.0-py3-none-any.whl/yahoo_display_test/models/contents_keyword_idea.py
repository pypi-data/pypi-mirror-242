# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class ContentsKeywordIdea(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'volume': 'int',
        'created_date': 'str',
        'contents_keyword': 'str',
        'contents_keyword_id': 'int'
    }

    attribute_map = {
        'volume': 'volume',
        'created_date': 'createdDate',
        'contents_keyword': 'contentsKeyword',
        'contents_keyword_id': 'contentsKeywordId'
    }

    def __init__(self, volume=None, created_date=None, contents_keyword=None, contents_keyword_id=None, local_vars_configuration=None):  # noqa: E501
        """ContentsKeywordIdea - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._volume = None
        self._created_date = None
        self._contents_keyword = None
        self._contents_keyword_id = None
        self.discriminator = None

        self.volume = volume
        self.created_date = created_date
        self.contents_keyword = contents_keyword
        self.contents_keyword_id = contents_keyword_id

    @property
    def volume(self):
        """Gets the volume of this ContentsKeywordIdea.  # noqa: E501

        <div lang=\"ja\"> インプレッション数です。 </div> <div lang=\"en\"> Number of impressions. </div>   # noqa: E501

        :return: The volume of this ContentsKeywordIdea.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ContentsKeywordIdea.

        <div lang=\"ja\"> インプレッション数です。 </div> <div lang=\"en\"> Number of impressions. </div>   # noqa: E501

        :param volume: The volume of this ContentsKeywordIdea.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def created_date(self):
        """Gets the created_date of this ContentsKeywordIdea.  # noqa: E501

        <div lang=\"ja\">コンテンツキーワード作成日です。<br> ※フォーマット：yyyyMMdd</div> <div lang=\"en\"> Created date of keyword.<br> * Format: yyyyMMdd</div>   # noqa: E501

        :return: The created_date of this ContentsKeywordIdea.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ContentsKeywordIdea.

        <div lang=\"ja\">コンテンツキーワード作成日です。<br> ※フォーマット：yyyyMMdd</div> <div lang=\"en\"> Created date of keyword.<br> * Format: yyyyMMdd</div>   # noqa: E501

        :param created_date: The created_date of this ContentsKeywordIdea.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def contents_keyword(self):
        """Gets the contents_keyword of this ContentsKeywordIdea.  # noqa: E501

        <div lang=\"ja\">コンテンツキーワードです。</div> <div lang=\"en\">Contents keyword.</div>   # noqa: E501

        :return: The contents_keyword of this ContentsKeywordIdea.  # noqa: E501
        :rtype: str
        """
        return self._contents_keyword

    @contents_keyword.setter
    def contents_keyword(self, contents_keyword):
        """Sets the contents_keyword of this ContentsKeywordIdea.

        <div lang=\"ja\">コンテンツキーワードです。</div> <div lang=\"en\">Contents keyword.</div>   # noqa: E501

        :param contents_keyword: The contents_keyword of this ContentsKeywordIdea.  # noqa: E501
        :type: str
        """

        self._contents_keyword = contents_keyword

    @property
    def contents_keyword_id(self):
        """Gets the contents_keyword_id of this ContentsKeywordIdea.  # noqa: E501

        <div lang=\"ja\">コンテンツキーワードIDです。</div> <div lang=\"en\">Contents keyword ID.</div>   # noqa: E501

        :return: The contents_keyword_id of this ContentsKeywordIdea.  # noqa: E501
        :rtype: int
        """
        return self._contents_keyword_id

    @contents_keyword_id.setter
    def contents_keyword_id(self, contents_keyword_id):
        """Sets the contents_keyword_id of this ContentsKeywordIdea.

        <div lang=\"ja\">コンテンツキーワードIDです。</div> <div lang=\"en\">Contents keyword ID.</div>   # noqa: E501

        :param contents_keyword_id: The contents_keyword_id of this ContentsKeywordIdea.  # noqa: E501
        :type: int
        """

        self._contents_keyword_id = contents_keyword_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentsKeywordIdea):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentsKeywordIdea):
            return True

        return self.to_dict() != other.to_dict()

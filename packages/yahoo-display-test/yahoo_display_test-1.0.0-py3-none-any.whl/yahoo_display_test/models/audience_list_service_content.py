# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class AudienceListServiceContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'combination_audience_list': 'AudienceListServiceCombinationAudienceList',
        'rule_audience_list': 'AudienceListServiceRuleAudienceList',
        'similarity_audience_list': 'AudienceListServiceSimilarityAudienceList',
        'website_visitors_audience_list': 'AudienceListServiceWebsiteVisitorsAudienceList',
        'customer_data_audience_list': 'AudienceListServiceCustomerDataAudienceList',
        'app_user_audience_list': 'AudienceListServiceAppUserAudienceList',
        'yahoo_japan_audience_discovery_audience_list': 'AudienceListServiceYahooJapanAudienceDiscoveryAudienceList',
        'audience_list_type': 'AudienceListServiceType'
    }

    attribute_map = {
        'combination_audience_list': 'combinationAudienceList',
        'rule_audience_list': 'ruleAudienceList',
        'similarity_audience_list': 'similarityAudienceList',
        'website_visitors_audience_list': 'websiteVisitorsAudienceList',
        'customer_data_audience_list': 'customerDataAudienceList',
        'app_user_audience_list': 'appUserAudienceList',
        'yahoo_japan_audience_discovery_audience_list': 'yahooJapanAudienceDiscoveryAudienceList',
        'audience_list_type': 'audienceListType'
    }

    def __init__(self, combination_audience_list=None, rule_audience_list=None, similarity_audience_list=None, website_visitors_audience_list=None, customer_data_audience_list=None, app_user_audience_list=None, yahoo_japan_audience_discovery_audience_list=None, audience_list_type=None, local_vars_configuration=None):  # noqa: E501
        """AudienceListServiceContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._combination_audience_list = None
        self._rule_audience_list = None
        self._similarity_audience_list = None
        self._website_visitors_audience_list = None
        self._customer_data_audience_list = None
        self._app_user_audience_list = None
        self._yahoo_japan_audience_discovery_audience_list = None
        self._audience_list_type = None
        self.discriminator = None

        self.combination_audience_list = combination_audience_list
        self.rule_audience_list = rule_audience_list
        self.similarity_audience_list = similarity_audience_list
        self.website_visitors_audience_list = website_visitors_audience_list
        self.customer_data_audience_list = customer_data_audience_list
        self.app_user_audience_list = app_user_audience_list
        self.yahoo_japan_audience_discovery_audience_list = yahoo_japan_audience_discovery_audience_list
        self.audience_list_type = audience_list_type

    @property
    def combination_audience_list(self):
        """Gets the combination_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The combination_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceCombinationAudienceList
        """
        return self._combination_audience_list

    @combination_audience_list.setter
    def combination_audience_list(self, combination_audience_list):
        """Sets the combination_audience_list of this AudienceListServiceContent.


        :param combination_audience_list: The combination_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceCombinationAudienceList
        """

        self._combination_audience_list = combination_audience_list

    @property
    def rule_audience_list(self):
        """Gets the rule_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The rule_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceRuleAudienceList
        """
        return self._rule_audience_list

    @rule_audience_list.setter
    def rule_audience_list(self, rule_audience_list):
        """Sets the rule_audience_list of this AudienceListServiceContent.


        :param rule_audience_list: The rule_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceRuleAudienceList
        """

        self._rule_audience_list = rule_audience_list

    @property
    def similarity_audience_list(self):
        """Gets the similarity_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The similarity_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceSimilarityAudienceList
        """
        return self._similarity_audience_list

    @similarity_audience_list.setter
    def similarity_audience_list(self, similarity_audience_list):
        """Sets the similarity_audience_list of this AudienceListServiceContent.


        :param similarity_audience_list: The similarity_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceSimilarityAudienceList
        """

        self._similarity_audience_list = similarity_audience_list

    @property
    def website_visitors_audience_list(self):
        """Gets the website_visitors_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The website_visitors_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceWebsiteVisitorsAudienceList
        """
        return self._website_visitors_audience_list

    @website_visitors_audience_list.setter
    def website_visitors_audience_list(self, website_visitors_audience_list):
        """Sets the website_visitors_audience_list of this AudienceListServiceContent.


        :param website_visitors_audience_list: The website_visitors_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceWebsiteVisitorsAudienceList
        """

        self._website_visitors_audience_list = website_visitors_audience_list

    @property
    def customer_data_audience_list(self):
        """Gets the customer_data_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The customer_data_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceCustomerDataAudienceList
        """
        return self._customer_data_audience_list

    @customer_data_audience_list.setter
    def customer_data_audience_list(self, customer_data_audience_list):
        """Sets the customer_data_audience_list of this AudienceListServiceContent.


        :param customer_data_audience_list: The customer_data_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceCustomerDataAudienceList
        """

        self._customer_data_audience_list = customer_data_audience_list

    @property
    def app_user_audience_list(self):
        """Gets the app_user_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The app_user_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceAppUserAudienceList
        """
        return self._app_user_audience_list

    @app_user_audience_list.setter
    def app_user_audience_list(self, app_user_audience_list):
        """Sets the app_user_audience_list of this AudienceListServiceContent.


        :param app_user_audience_list: The app_user_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceAppUserAudienceList
        """

        self._app_user_audience_list = app_user_audience_list

    @property
    def yahoo_japan_audience_discovery_audience_list(self):
        """Gets the yahoo_japan_audience_discovery_audience_list of this AudienceListServiceContent.  # noqa: E501


        :return: The yahoo_japan_audience_discovery_audience_list of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceYahooJapanAudienceDiscoveryAudienceList
        """
        return self._yahoo_japan_audience_discovery_audience_list

    @yahoo_japan_audience_discovery_audience_list.setter
    def yahoo_japan_audience_discovery_audience_list(self, yahoo_japan_audience_discovery_audience_list):
        """Sets the yahoo_japan_audience_discovery_audience_list of this AudienceListServiceContent.


        :param yahoo_japan_audience_discovery_audience_list: The yahoo_japan_audience_discovery_audience_list of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceYahooJapanAudienceDiscoveryAudienceList
        """

        self._yahoo_japan_audience_discovery_audience_list = yahoo_japan_audience_discovery_audience_list

    @property
    def audience_list_type(self):
        """Gets the audience_list_type of this AudienceListServiceContent.  # noqa: E501


        :return: The audience_list_type of this AudienceListServiceContent.  # noqa: E501
        :rtype: AudienceListServiceType
        """
        return self._audience_list_type

    @audience_list_type.setter
    def audience_list_type(self, audience_list_type):
        """Sets the audience_list_type of this AudienceListServiceContent.


        :param audience_list_type: The audience_list_type of this AudienceListServiceContent.  # noqa: E501
        :type: AudienceListServiceType
        """

        self._audience_list_type = audience_list_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceListServiceContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudienceListServiceContent):
            return True

        return self.to_dict() != other.to_dict()

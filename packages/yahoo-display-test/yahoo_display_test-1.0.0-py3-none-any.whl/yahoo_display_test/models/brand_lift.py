# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class BrandLift(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'campaign_id': 'int',
        'brand_lift_id': 'int',
        'questions': 'list[BrandLiftServiceQuestion]',
        'approval_status': 'BrandLiftServiceApprovalStatus',
        'disapproval_reason': 'str',
        'review_complete_date': 'str',
        'disapproval_reason_codes': 'list[str]',
        'submit_date': 'str',
        'campaign_start_date': 'str',
        'campaign_name': 'str',
        'notification_business_ids': 'list[str]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'campaign_id': 'campaignId',
        'brand_lift_id': 'brandLiftId',
        'questions': 'questions',
        'approval_status': 'approvalStatus',
        'disapproval_reason': 'disapprovalReason',
        'review_complete_date': 'reviewCompleteDate',
        'disapproval_reason_codes': 'disapprovalReasonCodes',
        'submit_date': 'submitDate',
        'campaign_start_date': 'campaignStartDate',
        'campaign_name': 'campaignName',
        'notification_business_ids': 'notificationBusinessIds'
    }

    def __init__(self, account_id=None, campaign_id=None, brand_lift_id=None, questions=None, approval_status=None, disapproval_reason=None, review_complete_date=None, disapproval_reason_codes=None, submit_date=None, campaign_start_date=None, campaign_name=None, notification_business_ids=None, local_vars_configuration=None):  # noqa: E501
        """BrandLift - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._campaign_id = None
        self._brand_lift_id = None
        self._questions = None
        self._approval_status = None
        self._disapproval_reason = None
        self._review_complete_date = None
        self._disapproval_reason_codes = None
        self._submit_date = None
        self._campaign_start_date = None
        self._campaign_name = None
        self._notification_business_ids = None
        self.discriminator = None

        self.account_id = account_id
        self.campaign_id = campaign_id
        self.brand_lift_id = brand_lift_id
        self.questions = questions
        self.approval_status = approval_status
        self.disapproval_reason = disapproval_reason
        self.review_complete_date = review_complete_date
        self.disapproval_reason_codes = disapproval_reason_codes
        self.submit_date = submit_date
        self.campaign_start_date = campaign_start_date
        self.campaign_name = campaign_name
        self.notification_business_ids = notification_business_ids

    @property
    def account_id(self):
        """Gets the account_id of this BrandLift.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID. </div>   # noqa: E501

        :return: The account_id of this BrandLift.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BrandLift.

        <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID. </div>   # noqa: E501

        :param account_id: The account_id of this BrandLift.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this BrandLift.  # noqa: E501

        <div lang=\"ja\">キャンペーンIDです。</div> <div lang=\"en\">Campaign ID. </div>   # noqa: E501

        :return: The campaign_id of this BrandLift.  # noqa: E501
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this BrandLift.

        <div lang=\"ja\">キャンペーンIDです。</div> <div lang=\"en\">Campaign ID. </div>   # noqa: E501

        :param campaign_id: The campaign_id of this BrandLift.  # noqa: E501
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def brand_lift_id(self):
        """Gets the brand_lift_id of this BrandLift.  # noqa: E501

        <div lang=\"ja\">ブランドリフト調査IDです。</div> <div lang=\"en\">BrandLift ID. </div>   # noqa: E501

        :return: The brand_lift_id of this BrandLift.  # noqa: E501
        :rtype: int
        """
        return self._brand_lift_id

    @brand_lift_id.setter
    def brand_lift_id(self, brand_lift_id):
        """Sets the brand_lift_id of this BrandLift.

        <div lang=\"ja\">ブランドリフト調査IDです。</div> <div lang=\"en\">BrandLift ID. </div>   # noqa: E501

        :param brand_lift_id: The brand_lift_id of this BrandLift.  # noqa: E501
        :type: int
        """

        self._brand_lift_id = brand_lift_id

    @property
    def questions(self):
        """Gets the questions of this BrandLift.  # noqa: E501


        :return: The questions of this BrandLift.  # noqa: E501
        :rtype: list[BrandLiftServiceQuestion]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this BrandLift.


        :param questions: The questions of this BrandLift.  # noqa: E501
        :type: list[BrandLiftServiceQuestion]
        """

        self._questions = questions

    @property
    def approval_status(self):
        """Gets the approval_status of this BrandLift.  # noqa: E501


        :return: The approval_status of this BrandLift.  # noqa: E501
        :rtype: BrandLiftServiceApprovalStatus
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this BrandLift.


        :param approval_status: The approval_status of this BrandLift.  # noqa: E501
        :type: BrandLiftServiceApprovalStatus
        """

        self._approval_status = approval_status

    @property
    def disapproval_reason(self):
        """Gets the disapproval_reason of this BrandLift.  # noqa: E501

        <div lang=\"ja\">審査否認理由です。</div> <div lang=\"en\">Disapproval reason. </div>   # noqa: E501

        :return: The disapproval_reason of this BrandLift.  # noqa: E501
        :rtype: str
        """
        return self._disapproval_reason

    @disapproval_reason.setter
    def disapproval_reason(self, disapproval_reason):
        """Sets the disapproval_reason of this BrandLift.

        <div lang=\"ja\">審査否認理由です。</div> <div lang=\"en\">Disapproval reason. </div>   # noqa: E501

        :param disapproval_reason: The disapproval_reason of this BrandLift.  # noqa: E501
        :type: str
        """

        self._disapproval_reason = disapproval_reason

    @property
    def review_complete_date(self):
        """Gets the review_complete_date of this BrandLift.  # noqa: E501

        <div lang=\"ja\">審査完了日時です。</div> <div lang=\"en\">Review Complete Date.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :return: The review_complete_date of this BrandLift.  # noqa: E501
        :rtype: str
        """
        return self._review_complete_date

    @review_complete_date.setter
    def review_complete_date(self, review_complete_date):
        """Sets the review_complete_date of this BrandLift.

        <div lang=\"ja\">審査完了日時です。</div> <div lang=\"en\">Review Complete Date.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :param review_complete_date: The review_complete_date of this BrandLift.  # noqa: E501
        :type: str
        """

        self._review_complete_date = review_complete_date

    @property
    def disapproval_reason_codes(self):
        """Gets the disapproval_reason_codes of this BrandLift.  # noqa: E501

        <div lang=\"ja\">審査否認理由コードです。</div> <div lang=\"en\">Disapproval reason codes</div>   # noqa: E501

        :return: The disapproval_reason_codes of this BrandLift.  # noqa: E501
        :rtype: list[str]
        """
        return self._disapproval_reason_codes

    @disapproval_reason_codes.setter
    def disapproval_reason_codes(self, disapproval_reason_codes):
        """Sets the disapproval_reason_codes of this BrandLift.

        <div lang=\"ja\">審査否認理由コードです。</div> <div lang=\"en\">Disapproval reason codes</div>   # noqa: E501

        :param disapproval_reason_codes: The disapproval_reason_codes of this BrandLift.  # noqa: E501
        :type: list[str]
        """

        self._disapproval_reason_codes = disapproval_reason_codes

    @property
    def submit_date(self):
        """Gets the submit_date of this BrandLift.  # noqa: E501

        <div lang=\"ja\">入稿日時です。</div> <div lang=\"en\">Submit date.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :return: The submit_date of this BrandLift.  # noqa: E501
        :rtype: str
        """
        return self._submit_date

    @submit_date.setter
    def submit_date(self, submit_date):
        """Sets the submit_date of this BrandLift.

        <div lang=\"ja\">入稿日時です。</div> <div lang=\"en\">Submit date.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :param submit_date: The submit_date of this BrandLift.  # noqa: E501
        :type: str
        """

        self._submit_date = submit_date

    @property
    def campaign_start_date(self):
        """Gets the campaign_start_date of this BrandLift.  # noqa: E501

        <div lang=\"ja\">キャンペーン配信開始日時です。</div> <div lang=\"en\">Campaign start date. </div> <br>Format: yyyyMMdd   # noqa: E501

        :return: The campaign_start_date of this BrandLift.  # noqa: E501
        :rtype: str
        """
        return self._campaign_start_date

    @campaign_start_date.setter
    def campaign_start_date(self, campaign_start_date):
        """Sets the campaign_start_date of this BrandLift.

        <div lang=\"ja\">キャンペーン配信開始日時です。</div> <div lang=\"en\">Campaign start date. </div> <br>Format: yyyyMMdd   # noqa: E501

        :param campaign_start_date: The campaign_start_date of this BrandLift.  # noqa: E501
        :type: str
        """

        self._campaign_start_date = campaign_start_date

    @property
    def campaign_name(self):
        """Gets the campaign_name of this BrandLift.  # noqa: E501

        <div lang=\"ja\">キャンペーン名です。</div> <div lang=\"en\">Campaign name. </div>   # noqa: E501

        :return: The campaign_name of this BrandLift.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this BrandLift.

        <div lang=\"ja\">キャンペーン名です。</div> <div lang=\"en\">Campaign name. </div>   # noqa: E501

        :param campaign_name: The campaign_name of this BrandLift.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def notification_business_ids(self):
        """Gets the notification_business_ids of this BrandLift.  # noqa: E501

        <div lang=\"ja\">連絡先Yahoo! JAPANビジネスIDです。</div> <div lang=\"en\">Yahoo! JAPAN Business ID to send notifications.</div>   # noqa: E501

        :return: The notification_business_ids of this BrandLift.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_business_ids

    @notification_business_ids.setter
    def notification_business_ids(self, notification_business_ids):
        """Sets the notification_business_ids of this BrandLift.

        <div lang=\"ja\">連絡先Yahoo! JAPANビジネスIDです。</div> <div lang=\"en\">Yahoo! JAPAN Business ID to send notifications.</div>   # noqa: E501

        :param notification_business_ids: The notification_business_ids of this BrandLift.  # noqa: E501
        :type: list[str]
        """

        self._notification_business_ids = notification_business_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandLift):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrandLift):
            return True

        return self.to_dict() != other.to_dict()

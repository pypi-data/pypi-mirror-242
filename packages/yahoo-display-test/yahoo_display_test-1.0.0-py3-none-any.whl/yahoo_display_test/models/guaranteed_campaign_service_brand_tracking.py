# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class GuaranteedCampaignServiceBrandTracking(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audience_category_ids1': 'list[str]',
        'audience_category_ids2': 'list[str]',
        'business_category_ids': 'list[str]'
    }

    attribute_map = {
        'audience_category_ids1': 'audienceCategoryIds1',
        'audience_category_ids2': 'audienceCategoryIds2',
        'business_category_ids': 'businessCategoryIds'
    }

    def __init__(self, audience_category_ids1=None, audience_category_ids2=None, business_category_ids=None, local_vars_configuration=None):  # noqa: E501
        """GuaranteedCampaignServiceBrandTracking - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audience_category_ids1 = None
        self._audience_category_ids2 = None
        self._business_category_ids = None
        self.discriminator = None

        self.audience_category_ids1 = audience_category_ids1
        self.audience_category_ids2 = audience_category_ids2
        self.business_category_ids = business_category_ids

    @property
    def audience_category_ids1(self):
        """Gets the audience_category_ids1 of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501

        <div lang=\"ja\"> オーディエンスカテゴリIDグループ1です。<br> レポート作成時、ここで指定されたカテゴリーに対して強い興味関心を持つ層を対象に集計します。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Audience category ID group 1.<br> When creating a report, aggregation will be executed for the group with a strong interest in the category specified in this field.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :return: The audience_category_ids1 of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501
        :rtype: list[str]
        """
        return self._audience_category_ids1

    @audience_category_ids1.setter
    def audience_category_ids1(self, audience_category_ids1):
        """Sets the audience_category_ids1 of this GuaranteedCampaignServiceBrandTracking.

        <div lang=\"ja\"> オーディエンスカテゴリIDグループ1です。<br> レポート作成時、ここで指定されたカテゴリーに対して強い興味関心を持つ層を対象に集計します。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Audience category ID group 1.<br> When creating a report, aggregation will be executed for the group with a strong interest in the category specified in this field.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :param audience_category_ids1: The audience_category_ids1 of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501
        :type: list[str]
        """

        self._audience_category_ids1 = audience_category_ids1

    @property
    def audience_category_ids2(self):
        """Gets the audience_category_ids2 of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501

        <div lang=\"ja\"> オーディエンスカテゴリIDグループ2です。<br> レポート作成時、ここで指定されたカテゴリーに対して少し興味関心を持つ層を対象に集計します。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Audience category ID group 2.<br> When creating a report, aggregation will be executed for the group with a small interest in the category specified in this field.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :return: The audience_category_ids2 of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501
        :rtype: list[str]
        """
        return self._audience_category_ids2

    @audience_category_ids2.setter
    def audience_category_ids2(self, audience_category_ids2):
        """Sets the audience_category_ids2 of this GuaranteedCampaignServiceBrandTracking.

        <div lang=\"ja\"> オーディエンスカテゴリIDグループ2です。<br> レポート作成時、ここで指定されたカテゴリーに対して少し興味関心を持つ層を対象に集計します。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Audience category ID group 2.<br> When creating a report, aggregation will be executed for the group with a small interest in the category specified in this field.<br> Although this field will be returned in the response, it will be ignored on input. </div>   # noqa: E501

        :param audience_category_ids2: The audience_category_ids2 of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501
        :type: list[str]
        """

        self._audience_category_ids2 = audience_category_ids2

    @property
    def business_category_ids(self):
        """Gets the business_category_ids of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501

        <div lang=\"ja\"> ビジネスカテゴリIDグループです。<br> アンケート対象になる広告・商材の業種の種別を表します。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。<br> ※返却される値は、DictionaryServiceのgetBusinessCategoryで取得されるDictionaryServiceBusinessCategoryのbusinessCategoryIdフィールドをご確認ください。 </div> <div lang=\"en\"> Business category ID group.<br> This describes the type of ads/products which is a subject of the survey.  <br> Although this field will be returned in the response, it will be ignored on input.<br> *Refer to the businessCategoryId field of DictionaryServiceBusinessCategory which can be obtained via getBusinessCategory in DictionaryService, to check the values to be returned in this field. </div>   # noqa: E501

        :return: The business_category_ids of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501
        :rtype: list[str]
        """
        return self._business_category_ids

    @business_category_ids.setter
    def business_category_ids(self, business_category_ids):
        """Sets the business_category_ids of this GuaranteedCampaignServiceBrandTracking.

        <div lang=\"ja\"> ビジネスカテゴリIDグループです。<br> アンケート対象になる広告・商材の業種の種別を表します。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。<br> ※返却される値は、DictionaryServiceのgetBusinessCategoryで取得されるDictionaryServiceBusinessCategoryのbusinessCategoryIdフィールドをご確認ください。 </div> <div lang=\"en\"> Business category ID group.<br> This describes the type of ads/products which is a subject of the survey.  <br> Although this field will be returned in the response, it will be ignored on input.<br> *Refer to the businessCategoryId field of DictionaryServiceBusinessCategory which can be obtained via getBusinessCategory in DictionaryService, to check the values to be returned in this field. </div>   # noqa: E501

        :param business_category_ids: The business_category_ids of this GuaranteedCampaignServiceBrandTracking.  # noqa: E501
        :type: list[str]
        """

        self._business_category_ids = business_category_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedCampaignServiceBrandTracking):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuaranteedCampaignServiceBrandTracking):
            return True

        return self.to_dict() != other.to_dict()

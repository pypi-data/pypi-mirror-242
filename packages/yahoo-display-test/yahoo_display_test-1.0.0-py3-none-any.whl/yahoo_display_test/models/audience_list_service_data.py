# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class AudienceListServiceData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audience_list_id': 'int',
        'audience_list_name': 'str',
        'audience_list_name_en': 'str'
    }

    attribute_map = {
        'audience_list_id': 'audienceListId',
        'audience_list_name': 'audienceListName',
        'audience_list_name_en': 'audienceListNameEn'
    }

    def __init__(self, audience_list_id=None, audience_list_name=None, audience_list_name_en=None, local_vars_configuration=None):  # noqa: E501
        """AudienceListServiceData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audience_list_id = None
        self._audience_list_name = None
        self._audience_list_name_en = None
        self.discriminator = None

        self.audience_list_id = audience_list_id
        self.audience_list_name = audience_list_name
        self.audience_list_name_en = audience_list_name_en

    @property
    def audience_list_id(self):
        """Gets the audience_list_id of this AudienceListServiceData.  # noqa: E501

        <div lang=\"ja\"> 組み合わせ対象のオーディエンスリストIDです。<br> このフィールドは、ADDおよびSET時に必須となります。 </div> <div lang=\"en\"> Audience list ID that is subject to the combination.<br> This field is required in ADD and SET operation. </div>   # noqa: E501

        :return: The audience_list_id of this AudienceListServiceData.  # noqa: E501
        :rtype: int
        """
        return self._audience_list_id

    @audience_list_id.setter
    def audience_list_id(self, audience_list_id):
        """Sets the audience_list_id of this AudienceListServiceData.

        <div lang=\"ja\"> 組み合わせ対象のオーディエンスリストIDです。<br> このフィールドは、ADDおよびSET時に必須となります。 </div> <div lang=\"en\"> Audience list ID that is subject to the combination.<br> This field is required in ADD and SET operation. </div>   # noqa: E501

        :param audience_list_id: The audience_list_id of this AudienceListServiceData.  # noqa: E501
        :type: int
        """

        self._audience_list_id = audience_list_id

    @property
    def audience_list_name(self):
        """Gets the audience_list_name of this AudienceListServiceData.  # noqa: E501

        <div lang=\"ja\">組み合わせ対象のオーディエンスリストの名前です。</div> <div lang=\"en\">Audience list name that is subject to the combination.</div>   # noqa: E501

        :return: The audience_list_name of this AudienceListServiceData.  # noqa: E501
        :rtype: str
        """
        return self._audience_list_name

    @audience_list_name.setter
    def audience_list_name(self, audience_list_name):
        """Sets the audience_list_name of this AudienceListServiceData.

        <div lang=\"ja\">組み合わせ対象のオーディエンスリストの名前です。</div> <div lang=\"en\">Audience list name that is subject to the combination.</div>   # noqa: E501

        :param audience_list_name: The audience_list_name of this AudienceListServiceData.  # noqa: E501
        :type: str
        """

        self._audience_list_name = audience_list_name

    @property
    def audience_list_name_en(self):
        """Gets the audience_list_name_en of this AudienceListServiceData.  # noqa: E501

        <div lang=\"ja\">組み合わせ対象のオーディエンスリストの名前(英語)です。<br> 共通オーディエンスリストの場合のみ返却されます。 </div> <div lang=\"en\">Audience list name (English) that is subject to the combination.<br> This field is returned when the audience list is shared audience list. </div>   # noqa: E501

        :return: The audience_list_name_en of this AudienceListServiceData.  # noqa: E501
        :rtype: str
        """
        return self._audience_list_name_en

    @audience_list_name_en.setter
    def audience_list_name_en(self, audience_list_name_en):
        """Sets the audience_list_name_en of this AudienceListServiceData.

        <div lang=\"ja\">組み合わせ対象のオーディエンスリストの名前(英語)です。<br> 共通オーディエンスリストの場合のみ返却されます。 </div> <div lang=\"en\">Audience list name (English) that is subject to the combination.<br> This field is returned when the audience list is shared audience list. </div>   # noqa: E501

        :param audience_list_name_en: The audience_list_name_en of this AudienceListServiceData.  # noqa: E501
        :type: str
        """

        self._audience_list_name_en = audience_list_name_en

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceListServiceData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudienceListServiceData):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class AudienceListServiceUploadUserListJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'upload_job_id': 'str',
        'retargeting_tag_id': 'str',
        'audience_list_id': 'int',
        'upload_type': 'AudienceListServiceUploadUserListUploadType',
        'upload_submit_date': 'str',
        'received_date': 'str',
        'job_status': 'AudienceListServiceJobStatus'
    }

    attribute_map = {
        'upload_job_id': 'uploadJobId',
        'retargeting_tag_id': 'retargetingTagId',
        'audience_list_id': 'audienceListId',
        'upload_type': 'uploadType',
        'upload_submit_date': 'uploadSubmitDate',
        'received_date': 'receivedDate',
        'job_status': 'jobStatus'
    }

    def __init__(self, upload_job_id=None, retargeting_tag_id=None, audience_list_id=None, upload_type=None, upload_submit_date=None, received_date=None, job_status=None, local_vars_configuration=None):  # noqa: E501
        """AudienceListServiceUploadUserListJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._upload_job_id = None
        self._retargeting_tag_id = None
        self._audience_list_id = None
        self._upload_type = None
        self._upload_submit_date = None
        self._received_date = None
        self._job_status = None
        self.discriminator = None

        self.upload_job_id = upload_job_id
        self.retargeting_tag_id = retargeting_tag_id
        self.audience_list_id = audience_list_id
        self.upload_type = upload_type
        self.upload_submit_date = upload_submit_date
        self.received_date = received_date
        self.job_status = job_status

    @property
    def upload_job_id(self):
        """Gets the upload_job_id of this AudienceListServiceUploadUserListJob.  # noqa: E501

        <div lang=\"ja\">アップロードジョブIDです。</div> <div lang=\"en\">Upload job ID.</div>   # noqa: E501

        :return: The upload_job_id of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: str
        """
        return self._upload_job_id

    @upload_job_id.setter
    def upload_job_id(self, upload_job_id):
        """Sets the upload_job_id of this AudienceListServiceUploadUserListJob.

        <div lang=\"ja\">アップロードジョブIDです。</div> <div lang=\"en\">Upload job ID.</div>   # noqa: E501

        :param upload_job_id: The upload_job_id of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: str
        """

        self._upload_job_id = upload_job_id

    @property
    def retargeting_tag_id(self):
        """Gets the retargeting_tag_id of this AudienceListServiceUploadUserListJob.  # noqa: E501

        <div lang=\"ja\">サイトリターゲティングのタグIDです。</div> <div lang=\"en\">Tag ID for site retargeting.</div>   # noqa: E501

        :return: The retargeting_tag_id of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: str
        """
        return self._retargeting_tag_id

    @retargeting_tag_id.setter
    def retargeting_tag_id(self, retargeting_tag_id):
        """Sets the retargeting_tag_id of this AudienceListServiceUploadUserListJob.

        <div lang=\"ja\">サイトリターゲティングのタグIDです。</div> <div lang=\"en\">Tag ID for site retargeting.</div>   # noqa: E501

        :param retargeting_tag_id: The retargeting_tag_id of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: str
        """

        self._retargeting_tag_id = retargeting_tag_id

    @property
    def audience_list_id(self):
        """Gets the audience_list_id of this AudienceListServiceUploadUserListJob.  # noqa: E501

        <div lang=\"ja\">オーディエンスリストIDです。</div> <div lang=\"en\">Audience list ID.</div>   # noqa: E501

        :return: The audience_list_id of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: int
        """
        return self._audience_list_id

    @audience_list_id.setter
    def audience_list_id(self, audience_list_id):
        """Sets the audience_list_id of this AudienceListServiceUploadUserListJob.

        <div lang=\"ja\">オーディエンスリストIDです。</div> <div lang=\"en\">Audience list ID.</div>   # noqa: E501

        :param audience_list_id: The audience_list_id of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: int
        """

        self._audience_list_id = audience_list_id

    @property
    def upload_type(self):
        """Gets the upload_type of this AudienceListServiceUploadUserListJob.  # noqa: E501


        :return: The upload_type of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: AudienceListServiceUploadUserListUploadType
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this AudienceListServiceUploadUserListJob.


        :param upload_type: The upload_type of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: AudienceListServiceUploadUserListUploadType
        """

        self._upload_type = upload_type

    @property
    def upload_submit_date(self):
        """Gets the upload_submit_date of this AudienceListServiceUploadUserListJob.  # noqa: E501

        <div lang=\"ja\">アップロード日時</div> <div lang=\"en\">Upload date and time.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :return: The upload_submit_date of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: str
        """
        return self._upload_submit_date

    @upload_submit_date.setter
    def upload_submit_date(self, upload_submit_date):
        """Sets the upload_submit_date of this AudienceListServiceUploadUserListJob.

        <div lang=\"ja\">アップロード日時</div> <div lang=\"en\">Upload date and time.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :param upload_submit_date: The upload_submit_date of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: str
        """

        self._upload_submit_date = upload_submit_date

    @property
    def received_date(self):
        """Gets the received_date of this AudienceListServiceUploadUserListJob.  # noqa: E501

        <div lang=\"ja\">アップロード受付完了日時</div> <div lang=\"en\">Upload job completion date and time.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :return: The received_date of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: str
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date):
        """Sets the received_date of this AudienceListServiceUploadUserListJob.

        <div lang=\"ja\">アップロード受付完了日時</div> <div lang=\"en\">Upload job completion date and time.</div> <br>Format: yyyyMMddHHmmss   # noqa: E501

        :param received_date: The received_date of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: str
        """

        self._received_date = received_date

    @property
    def job_status(self):
        """Gets the job_status of this AudienceListServiceUploadUserListJob.  # noqa: E501


        :return: The job_status of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :rtype: AudienceListServiceJobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this AudienceListServiceUploadUserListJob.


        :param job_status: The job_status of this AudienceListServiceUploadUserListJob.  # noqa: E501
        :type: AudienceListServiceJobStatus
        """

        self._job_status = job_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceListServiceUploadUserListJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudienceListServiceUploadUserListJob):
            return True

        return self.to_dict() != other.to_dict()

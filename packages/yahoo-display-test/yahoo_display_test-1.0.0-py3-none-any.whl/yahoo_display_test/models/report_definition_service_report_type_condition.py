# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v12/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v12
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_test.configuration import Configuration


class ReportDefinitionServiceReportTypeCondition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conversion_path_report_condition': 'ReportDefinitionServiceConversionPathReportCondition',
        'cross_campaign_reaches_report_condition': 'ReportDefinitionServiceCrossCampaignReachesReportCondition',
        'reach_report_condition': 'ReportDefinitionServiceReachReportCondition',
        'model_comparison_report_condition': 'ReportDefinitionServiceModelComparisonReportCondition',
        'report_type': 'ReportDefinitionServiceReportType'
    }

    attribute_map = {
        'conversion_path_report_condition': 'conversionPathReportCondition',
        'cross_campaign_reaches_report_condition': 'crossCampaignReachesReportCondition',
        'reach_report_condition': 'reachReportCondition',
        'model_comparison_report_condition': 'modelComparisonReportCondition',
        'report_type': 'reportType'
    }

    def __init__(self, conversion_path_report_condition=None, cross_campaign_reaches_report_condition=None, reach_report_condition=None, model_comparison_report_condition=None, report_type=None, local_vars_configuration=None):  # noqa: E501
        """ReportDefinitionServiceReportTypeCondition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conversion_path_report_condition = None
        self._cross_campaign_reaches_report_condition = None
        self._reach_report_condition = None
        self._model_comparison_report_condition = None
        self._report_type = None
        self.discriminator = None

        self.conversion_path_report_condition = conversion_path_report_condition
        self.cross_campaign_reaches_report_condition = cross_campaign_reaches_report_condition
        self.reach_report_condition = reach_report_condition
        self.model_comparison_report_condition = model_comparison_report_condition
        self.report_type = report_type

    @property
    def conversion_path_report_condition(self):
        """Gets the conversion_path_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501


        :return: The conversion_path_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceConversionPathReportCondition
        """
        return self._conversion_path_report_condition

    @conversion_path_report_condition.setter
    def conversion_path_report_condition(self, conversion_path_report_condition):
        """Sets the conversion_path_report_condition of this ReportDefinitionServiceReportTypeCondition.


        :param conversion_path_report_condition: The conversion_path_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :type: ReportDefinitionServiceConversionPathReportCondition
        """

        self._conversion_path_report_condition = conversion_path_report_condition

    @property
    def cross_campaign_reaches_report_condition(self):
        """Gets the cross_campaign_reaches_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501


        :return: The cross_campaign_reaches_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceCrossCampaignReachesReportCondition
        """
        return self._cross_campaign_reaches_report_condition

    @cross_campaign_reaches_report_condition.setter
    def cross_campaign_reaches_report_condition(self, cross_campaign_reaches_report_condition):
        """Sets the cross_campaign_reaches_report_condition of this ReportDefinitionServiceReportTypeCondition.


        :param cross_campaign_reaches_report_condition: The cross_campaign_reaches_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :type: ReportDefinitionServiceCrossCampaignReachesReportCondition
        """

        self._cross_campaign_reaches_report_condition = cross_campaign_reaches_report_condition

    @property
    def reach_report_condition(self):
        """Gets the reach_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501


        :return: The reach_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceReachReportCondition
        """
        return self._reach_report_condition

    @reach_report_condition.setter
    def reach_report_condition(self, reach_report_condition):
        """Sets the reach_report_condition of this ReportDefinitionServiceReportTypeCondition.


        :param reach_report_condition: The reach_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :type: ReportDefinitionServiceReachReportCondition
        """

        self._reach_report_condition = reach_report_condition

    @property
    def model_comparison_report_condition(self):
        """Gets the model_comparison_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501


        :return: The model_comparison_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceModelComparisonReportCondition
        """
        return self._model_comparison_report_condition

    @model_comparison_report_condition.setter
    def model_comparison_report_condition(self, model_comparison_report_condition):
        """Sets the model_comparison_report_condition of this ReportDefinitionServiceReportTypeCondition.


        :param model_comparison_report_condition: The model_comparison_report_condition of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :type: ReportDefinitionServiceModelComparisonReportCondition
        """

        self._model_comparison_report_condition = model_comparison_report_condition

    @property
    def report_type(self):
        """Gets the report_type of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501


        :return: The report_type of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :rtype: ReportDefinitionServiceReportType
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportDefinitionServiceReportTypeCondition.


        :param report_type: The report_type of this ReportDefinitionServiceReportTypeCondition.  # noqa: E501
        :type: ReportDefinitionServiceReportType
        """

        self._report_type = report_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDefinitionServiceReportTypeCondition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportDefinitionServiceReportTypeCondition):
            return True

        return self.to_dict() != other.to_dict()

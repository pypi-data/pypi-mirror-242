"""
A Wrapper for the Postal REST API.
"""

import base64
import mimetypes
import magic
import json



class Addressee:
    """Class for Storing name and Email Address, to allow easy creation of recipient headers"""
    name: str
    """The name of adressee."""

    email: str
    """The email address of adressee."""

    def __init__(self, name: str, email:str):
        """Make an addresse. Requires name and email"""
        self.name = name
        self.email = email

    def sendFormat(self, loud: bool = True):
        """Return appendable string"""
        return "{} <{}>".format(self.name, self.email)


class Attachment:
    """Attachment Class"""
    name: str
    """File name of file if available. Defaults to file"""
    data : str
    """Base64 data representation of file"""

    def __init__(self, name: str=None):
        """Creates empty attachment"""
        if name:
            self.name = name


    def sendFormat(self):
        """Creates an attachment array"""
        decoded_bytes = base64.b64decode(self.data)

        # Use python-magic to get the MIME type
        mime_type = magic.from_buffer(decoded_bytes, mime=True)

        #print(f'MIME type: {mime_type}')
        extension = mimetypes.guess_extension(mime_type)

        # Print the MIME type and extension
        #print(f'MIME type: {mime_type}')
        #print(f'Extension: {extension}')

        try:
            #print("{}.{}".format(self.name, extension))
            name = "{}{}".format(self.name, extension)
        except:
            #print("file{}".format(extension))
            name = "file{}".format(extension)

        return {"name":name, "data":self.data}

class Email:
    """Email Class"""
    sender: Addressee
    """The sender name and email, uses Addresse Class"""

    srv_account: Addressee
    """The server name and email, uses Addresse Class"""

    rply_to: Addressee
    """The reply to email, uses Addresse Class"""

    reciever: list
    """Reciever List of addresse"""
    cc: list
    """CC List of addresse"""
    bcc:list
    """BCC List of addresse"""
    subject: str
    """Subject of email"""
    html:str
    """HTML content of email"""
    plain_text: str
    """Plain Text content of email"""
    attachments:list
    """List of all Attachments"""
    tag:str
    """Postal feature to add a tag to the email for easy debugging"""

    def __init__(self):
        self.sender = None
        self.srv_account =None
        self.rply_to = None
        self.reciever = []
        self.cc = []
        self.bcc = []
        self.subject = None
        self.html = None
        self.plain_text = None
        self.attachments = []
        self.tag = None

    def addReciever(self, addressee:Addressee):
        """Add a reciever"""
        self.reciever.append(addressee)

    def addCC(self, addressee:Addressee):
        """Add a carbon copy (CC) reciever"""
        self.cc.append(addressee)

    def addBCC(self, addressee:Addressee):
        """Add a black carbon copy (BCC) reciever"""
        self.bcc.append(addressee)

    def makeEmail(self):
        """Function that creates the JSON Email, preparing the system to send emails."""

        data = {}
        #First create header info for senders

        recievers = []
        for person in self.reciever:
            recievers.append(person.sendFormat())
        data['to'] = recievers

        recievers = []
        for person in self.cc:
            recievers.append(person.sendFormat())
        data['cc'] = recievers

        recievers = []
        for person in self.bcc:
            recievers.append(person.sendFormat())
        data['bcc'] = recievers

        data['from'] = self.sender.sendFormat()
        if self.srv_account:
            data['sender'] = self.srv_account.sendFormat()

        if self.rply_to:
            data['reply_to'] = self.rply_to.sendFormat()

        if self.tag:
            data['tag'] = self.tag
        data['subject'] = self.subject

        if self.plain_text:
            data['plain_body'] = self.plain_text
        if self.html:
            data['html_body'] = self.html

        attachments = []
        for attachment in self.attachments:
            attachments.append(attachment.sendFormat())
        data['attachments'] = attachments

        return data



if __name__ == "__main__":
    myFile = Attachment()
    myFile.data = ""
    print(myFile.sendFormat())

    sender = Addressee('Prem', 'info@udeshi.dev')
    myEmail = Email()
    myEmail.sender = sender
    myEmail.addReciever(Addressee('Prem Udeshi', 'premudeshi99@gmail.com'))

    myEmail.subject = "Hello World"
    myEmail.attachments.append(myFile)

    myEmail.plain_text = "This is an email test!"

    myEmail.tag = "Email Text"

    print(json.dumps(myEmail.makeEmail()))
